[
  {
    "id": "822/A",
    "problem": "Title: I'm bored with life\n\nHolidays have finished. Thanks to the help of the hacker Leha, Noora managed to enter the university of her dreams which is located in a town Pavlopolis. It's well known that universities provide students with dormitory for the period of university studies. Consequently Noora had to leave Vi\u010dkopolis and move to Pavlopolis. Thus Leha was left completely alone in a quiet town Vi\u010dkopolis. He almost even fell into a depression from boredom!\n\nLeha came up with a task for himself to relax a little. He chooses two integers A and B and then calculates the greatest common divisor of integers \"A factorial\" and \"B factorial\". Formally the hacker wants to find out GCD(A!, B!). It's well known that the factorial of an integer x is a product of all positive integers less than or equal to x. Thus x! = 1\u00b72\u00b73\u00b7...\u00b7(x - 1)\u00b7x. For example 4! = 1\u00b72\u00b73\u00b74 = 24. Recall that GCD(x, y) is the largest positive integer q that divides (without a remainder) both x and y.\n\nLeha has learned how to solve this task very effective. You are able to cope with it not worse, aren't you?\n\nInput Format:\nThe first and single line contains two integers A and B (1 \u2264 A, B \u2264 109, min(A, B) \u2264 12).\n\nOutput Format:\nPrint a single integer denoting the greatest common divisor of integers A! and B!.\n\nExamples:\nExample 1:\nInput:\n4 3\nOutput:\n6\n\nNote:\nConsider the sample.\n\n4! = 1\u00b72\u00b73\u00b74 = 24. 3! = 1\u00b72\u00b73 = 6. The greatest common divisor of integers 24 and 6 is exactly 6.",
    "examples": [
      {
        "input": "4 3",
        "output": "6"
      }
    ],
    "solution": "import math as m\r\na,b=map(int,input().split())\r\nc=min(a,b)\r\nprint(m.factorial(c))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1003/A",
    "problem": "Title: Polycarp's Pockets\n\nPolycarp has $$$n$$$ coins, the value of the $$$i$$$-th coin is $$$a_i$$$. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.\n\nFor example, if Polycarp has got six coins represented as an array $$$a = [1, 2, 4, 3, 3, 2]$$$, he can distribute the coins into two pockets as follows: $$$[1, 2, 3], [2, 3, 4]$$$.\n\nPolycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.\n\nInput Format:\nThe first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 100$$$) \u2014 the number of coins.\n\nThe second line of the input contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 100$$$) \u2014 values of coins.\n\nOutput Format:\nPrint only one integer \u2014 the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.\n\nExamples:\nExample 1:\nInput:\n6\n1 2 4 3 3 2\nOutput:\n2\n\nExample 2:\nInput:\n1\n100\nOutput:\n1",
    "examples": [
      {
        "input": "6\n1 2 4 3 3 2",
        "output": "2"
      },
      {
        "input": "1\n100",
        "output": "1"
      }
    ],
    "solution": "n= int(input())\r\na= list(map(int, input().split()))\r\n\r\nx= [a.count(i) for i in a]\r\nx.sort()\r\nprint(x[n-1])",
    "explanation": "We have to find the maximum number of elements with the same value (it can be done by counting). This number will be the answer because if there are no more than $$$k$$$ elements with the same value in the array it is obvious that we cannot use less than $$$k$$$ pockets, but we also doesn't need to use more than $$$k$$$ pockets because of the other values can be also distributed using $$$k$$$ pockets.\nOverall complexity is $$$O(n + maxAi)$$$."
  },
  {
    "id": "807/A",
    "problem": "Title: Is it rated?\n\nIs it rated?\n\nHere it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.\n\nAnother Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.\n\nIt's known that if at least one participant's rating has changed, then the round was rated for sure.\n\nIt's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.\n\nIn this problem, you should not make any other assumptions about the rating system.\n\nDetermine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.\n\nInput Format:\nThe first line contains a single integer n (2 \u2264 n \u2264 1000)\u00a0\u2014 the number of round participants.\n\nEach of the next n lines contains two integers ai and bi (1 \u2264 ai, bi \u2264 4126)\u00a0\u2014 the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.\n\nOutput Format:\nIf the round is rated for sure, print \"rated\". If the round is unrated for sure, print \"unrated\". If it's impossible to determine whether the round is rated or not, print \"maybe\".\n\nExamples:\nExample 1:\nInput:\n6\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\nOutput:\nrated\n\nExample 2:\nInput:\n4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\nOutput:\nunrated\n\nExample 3:\nInput:\n5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\nOutput:\nmaybe\n\nNote:\nIn the first example, the ratings of the participants in the third and fifth places have changed, therefore, the round was rated.\n\nIn the second example, no one's rating has changed, but the participant in the second place has lower rating than the participant in the fourth place. Therefore, if the round was rated, someone's rating would've changed for sure.\n\nIn the third example, no one's rating has changed, and the participants took places in non-increasing order of their rating. Therefore, it's impossible to determine whether the round is rated or not.",
    "examples": [
      {
        "input": "6\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884",
        "output": "rated"
      },
      {
        "input": "4\n1500 1500\n1300 1300\n1200 1200\n1400 1400",
        "output": "unrated"
      },
      {
        "input": "5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699",
        "output": "maybe"
      }
    ],
    "solution": "n=eval(input())\r\na=list(map(int,input().split()))\r\ni=2\r\nflag1=0\r\nwhile (i<=n):\r\n    b=list(map(int,input().split()))\r\n    a=a+b\r\n    i+=1\r\ni=0\r\nwhile (i<len(a)) and (flag1==0):\r\n    if (a[i]==a[i+1]):\r\n        flag1=0\r\n    else:\r\n        flag1=1\r\n    i+=2\r\nif (flag1==0):\r\n    i=1\r\n    flag2=0\r\n    while (i<len(a)-1) and (flag2==0):\r\n        if (a[i]>=a[i+2]):\r\n            flag2=0\r\n        else:\r\n            flag2=1\r\n        i+=2\r\nif flag1==1 :\r\n    print (\"rated\")\r\nelif flag2==0 :\r\n    print (\"maybe\")\r\nelif flag2==1 :\r\n    print (\"unrated\")\r\n \r\n     \r\n\r\n\r\n\r\n",
    "explanation": "To solve this problem, you just had to read the problem statement carefully. Looking through the explanations for the example cases was pretty useful.\nHow do we check if the round is rated for sure?\nThe round is rated for sure if anyone's rating has changed, that is, if ai\u2009\u2260\u2009bi for some i.\nHow do we check if the round is unrated for sure?\nGiven that all ai\u2009=\u2009bi, the round is unrated for sure if for some i\u2009<\u2009j we have ai\u2009<\u2009aj. This can be checked using two nested for-loops over i and j.\nExercise: can you check the same using one for-loop?\nHow do we find that it's impossible to determine if the round is rated or not?\nIf none of the conditions from steps 1 and 2 is satisfied, the answer is \"maybe\"."
  },
  {
    "id": "959/A",
    "problem": "Title: Mahmoud and Ehab and the even-odd game\n\nMahmoud and Ehab play a game called the even-odd game. Ehab chooses his favorite integer n and then they take turns, starting from Mahmoud. In each player's turn, he has to choose an integer a and subtract it from n such that:\n\n- 1\u2009\u2264\u2009a\u2009\u2264\u2009n.\n- If it's Mahmoud's turn, a has to be even, but if it's Ehab's turn, a has to be odd.\n\nIf the current player can't choose any number satisfying the conditions, he loses. Can you determine the winner if they both play optimally?\n\nInput Format:\nThe only line contains an integer n (1 \u2264 n \u2264 109), the number at the beginning of the game.\n\nOutput Format:\nOutput \"Mahmoud\" (without quotes) if Mahmoud wins and \"Ehab\" (without quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\n1\nOutput:\nEhab\n\nExample 2:\nInput:\n2\nOutput:\nMahmoud\n\nNote:\nIn the first sample, Mahmoud can't choose any integer a initially because there is no positive even integer less than or equal to 1 so Ehab wins.\n\nIn the second sample, Mahmoud has to choose a = 2 and subtract it from n. It's Ehab's turn and n = 0. There is no positive odd integer less than or equal to 0 so Mahmoud wins.",
    "examples": [
      {
        "input": "1",
        "output": "Ehab"
      },
      {
        "input": "2",
        "output": "Mahmoud"
      }
    ],
    "solution": "# https://codeforces.com/problemset/problem/959/A\r\n# ehab first chosses n\r\nn_ehab = int(input())\r\nprint (\"Mahmoud\") if n_ehab%2 ==0 else print(\"Ehab\")\r\n# a_mahmoud =# has to be even\r\n# a_ehab = # has to be odd\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "413/A",
    "problem": "Title: Data Recovery\n\nNot so long ago company R2 bought company R1 and consequently, all its developments in the field of multicore processors. Now the R2 laboratory is testing one of the R1 processors.\n\nThe testing goes in n steps, at each step the processor gets some instructions, and then its temperature is measured. The head engineer in R2 is keeping a report record on the work of the processor: he writes down the minimum and the maximum measured temperature in his notebook. His assistant had to write down all temperatures into his notebook, but (for unknown reasons) he recorded only m.\n\nThe next day, the engineer's assistant filed in a report with all the m temperatures. However, the chief engineer doubts that the assistant wrote down everything correctly (naturally, the chief engineer doesn't doubt his notes). So he asked you to help him. Given numbers n, m, min, max and the list of m temperatures determine whether you can upgrade the set of m temperatures to the set of n temperatures (that is add n - m temperatures), so that the minimum temperature was min and the maximum one was max.\n\nInput Format:\nThe first line contains four integers n, m, min, max (1 \u2264 m < n \u2264 100;\u00a01 \u2264 min < max \u2264 100). The second line contains m space-separated integers ti (1 \u2264 ti \u2264 100) \u2014 the temperatures reported by the assistant.\n\nNote, that the reported temperatures, and the temperatures you want to add can contain equal temperatures.\n\nOutput Format:\nIf the data is consistent, print 'Correct' (without the quotes). Otherwise, print 'Incorrect' (without the quotes).\n\nExamples:\nExample 1:\nInput:\n2 1 1 2\n1\nOutput:\nCorrect\n\nExample 2:\nInput:\n3 1 1 3\n2\nOutput:\nCorrect\n\nExample 3:\nInput:\n2 1 1 3\n2\nOutput:\nIncorrect\n\nNote:\nIn the first test sample one of the possible initial configurations of temperatures is [1, 2].\n\nIn the second test sample one of the possible initial configurations of temperatures is [2, 1, 3].\n\nIn the third test sample it is impossible to add one temperature to obtain the minimum equal to 1 and the maximum equal to 3.",
    "examples": [
      {
        "input": "2 1 1 2\n1",
        "output": "Correct"
      },
      {
        "input": "3 1 1 3\n2",
        "output": "Correct"
      },
      {
        "input": "2 1 1 3\n2",
        "output": "Incorrect"
      }
    ],
    "solution": "a,b,c,d=map(int,input().split())\r\nz=list(map(int,input().split()))\r\nk=z.copy()\r\nif c in k:k.remove(c)\r\nif d in k:k.remove(d)\r\nif (max(z)>d or min(z)<c or len(k)+2>a ):print(\"Incorrect\")\r\nelse:print(\"Correct\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "767/A",
    "problem": "Title: Snacktower\n\nAccording to an old legeng, a long time ago Ankh-Morpork residents did something wrong to miss Fortune, and she cursed them. She said that at some time n snacks of distinct sizes will fall on the city, and the residents should build a Snacktower of them by placing snacks one on another. Of course, big snacks should be at the bottom of the tower, while small snacks should be at the top.\n\nYears passed, and once different snacks started to fall onto the city, and the residents began to build the Snacktower.\n\nHowever, they faced some troubles. Each day exactly one snack fell onto the city, but their order was strange. So, at some days the residents weren't able to put the new stack on the top of the Snacktower: they had to wait until all the bigger snacks fell. Of course, in order to not to anger miss Fortune again, the residents placed each snack on the top of the tower immediately as they could do it.\n\nWrite a program that models the behavior of Ankh-Morpork residents.\n\nInput Format:\nThe first line contains single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the total number of snacks.\n\nThe second line contains n integers, the i-th of them equals the size of the snack which fell on the i-th day. Sizes are distinct integers from 1 to n.\n\nOutput Format:\nPrint n lines. On the i-th of them print the sizes of the snacks which the residents placed on the top of the Snacktower on the i-th day in the order they will do that. If no snack is placed on some day, leave the corresponding line empty.\n\nExamples:\nExample 1:\nInput:\n3\n3 1 2\nOutput:\n3\n2 1\n\nExample 2:\nInput:\n5\n4 5 1 2 3\nOutput:\n5 4\n3 2 1\n\nNote:\nIn the example a snack of size 3 fell on the first day, and the residents immediately placed it. On the second day a snack of size 1 fell, and the residents weren't able to place it because they were missing the snack of size 2. On the third day a snack of size 2 fell, and the residents immediately placed it. Right after that they placed the snack of size 1 which had fallen before.",
    "examples": [
      {
        "input": "3\n3 1 2",
        "output": "3\n2 1"
      },
      {
        "input": "5\n4 5 1 2 3",
        "output": "5 4\n3 2 1"
      }
    ],
    "solution": "n = int(input())\r\nsnacks = {int(num): day for day, num in enumerate(input().split(\" \"))}\r\ndays = [[] for _ in range(n)]\r\nsorted_snacks = sorted(snacks, reverse=True)\r\ncurrent_day = None\r\nfor snack in sorted_snacks:\r\n    snack_day = snacks[snack]\r\n    if current_day is None:\r\n        current_day = snack_day\r\n\r\n    if snack_day > current_day:\r\n        current_day = snack_day\r\n\r\n    days[current_day].append(snack)\r\n\r\nfor day in days:\r\n    if not day:\r\n        print(\"\")\r\n    else:\r\n        print(\" \".join([str(snack) for snack in day]))\r\n    \r\n\r\n\r\n",
    "explanation": "It is enough to do what is written in the statements. You can maintain an array has, and mark in it which snacks has already fallen, and which hasn't. Create another variable next which tracks the next snack which should be put on the top. Let's proceed with the integers in the input one by one. After reading next integer, mark it in the has array and go from next to the first snack which is not marked. Print all integers which we passed by."
  },
  {
    "id": "840/A",
    "problem": "Title: Leha and Function\n\nLeha like all kinds of strange things. Recently he liked the function F(n, k). Consider all possible k-element subsets of the set [1, 2, ..., n]. For subset find minimal element in it. F(n, k) \u2014 mathematical expectation of the minimal element among all k-element subsets.\n\nBut only function does not interest him. He wants to do interesting things with it. Mom brought him two arrays A and B, each consists of m integers. For all i, j such that 1 \u2264 i, j \u2264 m the condition Ai \u2265 Bj holds. Help Leha rearrange the numbers in the array A so that the sum $$\\sum_{i=1}^{m} F(A'_i, B_i)$$ is maximally possible, where A' is already rearranged array.\n\nInput Format:\nFirst line of input data contains single integer m (1 \u2264 m \u2264 2\u00b7105) \u2014 length of arrays A and B.\n\nNext line contains m integers a1, a2, ..., am (1 \u2264 ai \u2264 109) \u2014 array A.\n\nNext line contains m integers b1, b2, ..., bm (1 \u2264 bi \u2264 109) \u2014 array B.\n\nOutput Format:\nOutput m integers a'1, a'2, ..., a'm \u2014 array A' which is permutation of the array A.\n\nExamples:\nExample 1:\nInput:\n5\n7 3 5 3 4\n2 1 3 2 3\nOutput:\n4 7 3 5 3\n\nExample 2:\nInput:\n7\n4 6 5 8 8 2 6\n2 1 2 2 1 1 2\nOutput:\n2 6 4 5 8 8 6",
    "examples": [
      {
        "input": "5\n7 3 5 3 4\n2 1 3 2 3",
        "output": "4 7 3 5 3"
      },
      {
        "input": "7\n4 6 5 8 8 2 6\n2 1 2 2 1 1 2",
        "output": "2 6 4 5 8 8 6"
      }
    ],
    "solution": "# F[n,k]=(n+1)/(k+1)\r\n# sort a in increasing order and\r\n# sort b in decreasing order\r\nn=int(input())\r\na,b=list(map(int,input().split())),list(map(int,input().split()))\r\nc=[]\r\na.sort(reverse=True)\r\nfor i in range(n):\r\n    c.append([b[i],i])\r\nc=sorted(c,key=lambda x:(x[0],-x[1]))\r\nd=[0]*n\r\nfor i in range(n):\r\n    d[c[i][1]]=a[i]\r\nprint(*d)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "223/A",
    "problem": "Title: Bracket Sequence\n\nA bracket sequence is a string, containing only characters \"(\", \")\", \"[\" and \"]\".\n\nA correct bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example, bracket sequences \"()[]\", \"([])\" are correct (the resulting expressions are: \"(1)+[1]\", \"([1+1]+1)\"), and \"](\" and \"[\" are not. The empty string is a correct bracket sequence by definition.\n\nA substring s[l... r] (1 \u2264 l \u2264 r \u2264 |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is the string slsl + 1... sr. The empty string is a substring of any string by definition.\n\nYou are given a bracket sequence, not necessarily correct. Find its substring which is a correct bracket sequence and contains as many opening square brackets \u00ab[\u00bb as possible.\n\nInput Format:\nThe first and the only line contains the bracket sequence as a string, consisting only of characters \"(\", \")\", \"[\" and \"]\". It is guaranteed that the string is non-empty and its length doesn't exceed 105 characters.\n\nOutput Format:\nIn the first line print a single integer \u2014 the number of brackets \u00ab[\u00bb in the required bracket sequence. In the second line print the optimal sequence. If there are more than one optimal solutions print any of them.\n\nExamples:\nExample 1:\nInput:\n([])\nOutput:\n1\n([])\n\nExample 2:\nInput:\n(((\nOutput:\n0",
    "examples": [
      {
        "input": "([])",
        "output": "1\n([])"
      },
      {
        "input": "(((",
        "output": "0"
      }
    ],
    "solution": "import sys\nimport math\nimport string\nimport operator\nimport functools\nimport fractions\nimport collections\nsys.setrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda: list(map(int,input().split()))\nRS=lambda: input().rstrip().split()\n#################################################\ns=RS()[0]\nst=[]\ncloseInd=[0]*len(s)\ndef rev(c):\n    return \"([\"[c==']']\nfor i in range(len(s)):\n    if len(st) and s[i] in \")]\" and st[-1][0]==rev(s[i]):\n        temp=st[-1]\n        st.pop()\n        closeInd[temp[1]]=i\n    else:\n        st.append((s[i],i))\nmaxSq=0\nmaxX,maxY=0,0\ni=0\nwhile i<len(s):\n    sq=0\n    start=i\n    while i<len(s) and closeInd[i]:\n        j=i\n        while i<=closeInd[j]:\n            if s[i]=='[':\n                sq+=1\n            i+=1\n    else:\n        i+=1\n    if sq>maxSq:\n        maxSq=sq\n        maxX=start\n        maxY=i-1\nprint(maxSq, s[maxX:maxY], sep='\\n')\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "293/A",
    "problem": "Title: Weird Game\n\nYaroslav, Andrey and Roman can play cubes for hours and hours. But the game is for three, so when Roman doesn't show up, Yaroslav and Andrey play another game.\n\nRoman leaves a word for each of them. Each word consists of 2\u00b7n binary characters \"0\" or \"1\". After that the players start moving in turns. Yaroslav moves first. During a move, a player must choose an integer from 1 to 2\u00b7n, which hasn't been chosen by anybody up to that moment. Then the player takes a piece of paper and writes out the corresponding character from his string.\n\nLet's represent Yaroslav's word as s = s1s2... s2n. Similarly, let's represent Andrey's word as t = t1t2... t2n. Then, if Yaroslav choose number k during his move, then he is going to write out character sk on the piece of paper. Similarly, if Andrey choose number r during his move, then he is going to write out character tr on the piece of paper.\n\nThe game finishes when no player can make a move. After the game is over, Yaroslav makes some integer from the characters written on his piece of paper (Yaroslav can arrange these characters as he wants). Andrey does the same. The resulting numbers can contain leading zeroes. The person with the largest number wins. If the numbers are equal, the game ends with a draw.\n\nYou are given two strings s and t. Determine the outcome of the game provided that Yaroslav and Andrey play optimally well.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 106). The second line contains string s \u2014 Yaroslav's word. The third line contains string t \u2014 Andrey's word.\n\nIt is guaranteed that both words consist of 2\u00b7n characters \"0\" and \"1\".\n\nOutput Format:\nPrint \"First\", if both players play optimally well and Yaroslav wins. If Andrey wins, print \"Second\" and if the game ends with a draw, print \"Draw\". Print the words without the quotes.\n\nExamples:\nExample 1:\nInput:\n2\n0111\n0001\nOutput:\nFirst\n\nExample 2:\nInput:\n3\n110110\n001001\nOutput:\nFirst\n\nExample 3:\nInput:\n3\n111000\n000111\nOutput:\nDraw\n\nExample 4:\nInput:\n4\n01010110\n00101101\nOutput:\nFirst\n\nExample 5:\nInput:\n4\n01100000\n10010011\nOutput:\nSecond",
    "examples": [
      {
        "input": "2\n0111\n0001",
        "output": "First"
      },
      {
        "input": "3\n110110\n001001",
        "output": "First"
      },
      {
        "input": "3\n111000\n000111",
        "output": "Draw"
      },
      {
        "input": "4\n01010110\n00101101",
        "output": "First"
      },
      {
        "input": "4\n01100000\n10010011",
        "output": "Second"
      }
    ],
    "solution": "n = int(input())\na, b = input(), input()\nt = {i + j: 0 for i in '01' for j in '01'}\nfor i in range(2 * n): t[a[i] + b[i]] += 1\nd = t['11'] & 1\nd += (t['10'] - t['01'] + 1 - d) // 2\nif d > 0: d = 1\nelif d < 0: d = 2\nprint(['Draw', 'First', 'Second'][d])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "459/A",
    "problem": "Title: Pashmak and Garden\n\nPashmak has fallen in love with an attractive girl called Parmida since one year ago...\n\nToday, Pashmak set up a meeting with his partner in a romantic garden. Unfortunately, Pashmak has forgotten where the garden is. But he remembers that the garden looks like a square with sides parallel to the coordinate axes. He also remembers that there is exactly one tree on each vertex of the square. Now, Pashmak knows the position of only two of the trees. Help him to find the position of two remaining ones.\n\nInput Format:\nThe first line contains four space-separated x1, y1, x2, y2 ( - 100 \u2264 x1, y1, x2, y2 \u2264 100) integers, where x1 and y1 are coordinates of the first tree and x2 and y2 are coordinates of the second tree. It's guaranteed that the given points are distinct.\n\nOutput Format:\nIf there is no solution to the problem, print -1. Otherwise print four space-separated integers x3, y3, x4, y4 that correspond to the coordinates of the two other trees. If there are several solutions you can output any of them.\n\nNote that x3, y3, x4, y4 must be in the range ( - 1000 \u2264 x3, y3, x4, y4 \u2264 1000).\n\nExamples:\nExample 1:\nInput:\n0 0 0 1\nOutput:\n1 0 1 1\n\nExample 2:\nInput:\n0 0 1 1\nOutput:\n0 1 1 0\n\nExample 3:\nInput:\n0 0 1 2\nOutput:\n-1",
    "examples": [
      {
        "input": "0 0 0 1",
        "output": "1 0 1 1"
      },
      {
        "input": "0 0 1 1",
        "output": "0 1 1 0"
      },
      {
        "input": "0 0 1 2",
        "output": "-1"
      }
    ],
    "solution": "x1 , y1 , x2 , y2 = map(int,input().split())\r\nif x1 == x2 :\r\n    if -1000 <= x1 + abs(y1 - y2) <= 1000 :\r\n        x3 = x4 = x1 + abs(y1 - y2)\r\n        y3 = min(y1 , y2)\r\n        y4 = max(y1 , y2)\r\n        print(x3 , y3 , x4 , y4)\r\n    else :\r\n        x3 = x4 = x1 - abs(y1 - y2)\r\n        y3 = min(y1 , y2)\r\n        y4 = max(y1 , y2)\r\n        print(x3 , y3 , x4 , y4)   \r\n    \r\nelif y1 == y2 :\r\n    if -1000 <= y1 + abs(x1 - x2) <= 1000 :\r\n        y3 = y4 = y1 + abs(x1 - x2)\r\n        x3 = min(x1 , x2)\r\n        x4 = max(x1 , x2)\r\n        print(x3 , y3 , x4 , y4)\r\n    else :\r\n        y3 = y4 = y1 - abs(x1 - x2)\r\n        x3 = min(x1 , x2)\r\n        x4 = max(x1 , x2)\r\n        print(x3 , y3 , x4 , y4)\r\nelif abs(x1 - x2) == abs(y1 - y2) and x1 != x2 :\r\n    x3 = x1\r\n    y3 = y2\r\n    x4 = x2 \r\n    y4 = y1\r\n    print(x3 , y3 , x4 , y4)\r\nelse : print(-1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "651/A",
    "problem": "Title: Joysticks\n\nFriends are going to play console. They have two joysticks and only one charger for them. Initially first joystick is charged at a1 percent and second one is charged at a2 percent. You can connect charger to a joystick only at the beginning of each minute. In one minute joystick either discharges by 2 percent (if not connected to a charger) or charges by 1 percent (if connected to a charger).\n\nGame continues while both joysticks have a positive charge. Hence, if at the beginning of minute some joystick is charged by 1 percent, it has to be connected to a charger, otherwise the game stops. If some joystick completely discharges (its charge turns to 0), the game also stops.\n\nDetermine the maximum number of minutes that game can last. It is prohibited to pause the game, i. e. at each moment both joysticks should be enabled. It is allowed for joystick to be charged by more than 100 percent.\n\nInput Format:\nThe first line of the input contains two positive integers a1 and a2 (1 \u2264 a1, a2 \u2264 100), the initial charge level of first and second joystick respectively.\n\nOutput Format:\nOutput the only integer, the maximum number of minutes that the game can last. Game continues until some joystick is discharged.\n\nExamples:\nExample 1:\nInput:\n3 5\nOutput:\n6\n\nExample 2:\nInput:\n4 4\nOutput:\n5\n\nNote:\nIn the first sample game lasts for 6 minute by using the following algorithm:\n\n- at the beginning of the first minute connect first joystick to the charger, by the end of this minute first joystick is at 4%, second is at 3%;\n- continue the game without changing charger, by the end of the second minute the first joystick is at 5%, second is at 1%;\n- at the beginning of the third minute connect second joystick to the charger, after this minute the first joystick is at 3%, the second one is at 2%;\n- continue the game without changing charger, by the end of the fourth minute first joystick is at 1%, second one is at 3%;\n- at the beginning of the fifth minute connect first joystick to the charger, after this minute the first joystick is at 2%, the second one is at 1%;\n- at the beginning of the sixth minute connect second joystick to the charger, after this minute the first joystick is at 0%, the second one is at 2%.\n\nAfter that the first joystick is completely discharged and the game is stopped.",
    "examples": [
      {
        "input": "3 5",
        "output": "6"
      },
      {
        "input": "4 4",
        "output": "5"
      }
    ],
    "solution": "a,b=map(int,input().split())\r\nans=0\r\nwhile(a>0 and b >0):\r\n    if(a>b):\r\n        a,b=b,a\r\n    a=a+1\r\n    b=b-2\r\n    ans=ans+1\r\n    if(a<0 or b<0):\r\n        ans=ans-1\r\n        break\r\nprint(ans)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "482/A",
    "problem": "Title: Diverse Permutation\n\nPermutation p is an ordered set of integers p1,   p2,   ...,   pn, consisting of n distinct positive integers not larger than n. We'll denote as n the length of permutation p1,   p2,   ...,   pn.\n\nYour task is to find such permutation p of length n, that the group of numbers |p1 - p2|, |p2 - p3|, ..., |pn - 1 - pn| has exactly k distinct elements.\n\nInput Format:\nThe single line of the input contains two space-separated positive integers n, k (1 \u2264 k < n \u2264 105).\n\nOutput Format:\nPrint n integers forming the permutation. If there are multiple answers, print any of them.\n\nExamples:\nExample 1:\nInput:\n3 2\nOutput:\n1 3 2\n\nExample 2:\nInput:\n3 1\nOutput:\n1 2 3\n\nExample 3:\nInput:\n5 2\nOutput:\n1 3 2 4 5\n\nNote:\nBy |x| we denote the absolute value of number x.",
    "examples": [
      {
        "input": "3 2",
        "output": "1 3 2"
      },
      {
        "input": "3 1",
        "output": "1 2 3"
      },
      {
        "input": "5 2",
        "output": "1 3 2 4 5"
      }
    ],
    "solution": "n, k = map(int, input().split())\r\ncur = 1\r\nx = 0\r\na = [0] * (n + 1)\r\nwhile k > 0:\r\n    a[cur] = 1\r\n    print(cur, end=(' '))\r\n    if x == 0:\r\n        cur = cur + k\r\n        x = 1\r\n    else:\r\n        cur = cur - k\r\n        x = 0\r\n    k = k - 1\r\nfor i in range(1, n + 1):\r\n    if a[i] == 0:\r\n        print(i, end=' ')",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "45/A",
    "problem": "Title: Codecraft III\n\nToday Vasya visited a widely known site and learned that the continuation of his favourite game Codecraft II will appear after exactly k months. He looked at the calendar and learned that at the moment is the month number s. Vasya immediately got interested in what month Codecraft III will appear. Help him understand that.\n\nAll the twelve months in Vasya's calendar are named using their usual English names: January, February, March, April, May, June, July, August, September, October, November, December.\n\nInput Format:\nThe first input line contains the name of the current month. It is guaranteed that it is a proper English name of one of twelve months. The first letter is uppercase, the rest are lowercase. The second line contains integer k (0 \u2264 k \u2264 100) \u2014 the number of months left till the appearance of Codecraft III.\n\nOutput Format:\nPrint starting from an uppercase letter the name of the month in which the continuation of Codeforces II will appear. The printed name must be contained in the list January, February, March, April, May, June, July, August, September, October, November, December.\n\nExamples:\nExample 1:\nInput:\nNovember\n3\nOutput:\nFebruary\n\nExample 2:\nInput:\nMay\n24\nOutput:\nMay",
    "examples": [
      {
        "input": "November\n3",
        "output": "February"
      },
      {
        "input": "May\n24",
        "output": "May"
      }
    ],
    "solution": "l=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\nn=input()\r\np=int(input())\r\npp=l.index(n)\r\nprint(l[(pp+p)%12])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "787/A",
    "problem": "Title: The Monster\n\nA monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, ....\n\nThe Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.\n\nInput Format:\nThe first line of input contains two integers a and b (1 \u2264 a, b \u2264 100).\n\nThe second line contains two integers c and d (1 \u2264 c, d \u2264 100).\n\nOutput Format:\nPrint the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.\n\nExamples:\nExample 1:\nInput:\n20 2\n9 19\nOutput:\n82\n\nExample 2:\nInput:\n2 1\n16 12\nOutput:\n-1\n\nNote:\nIn the first sample testcase, Rick's 5th scream and Morty's 8th time are at time 82.\n\nIn the second sample testcase, all Rick's screams will be at odd times and Morty's will be at even times, so they will never scream at the same time.",
    "examples": [
      {
        "input": "20 2\n9 19",
        "output": "82"
      },
      {
        "input": "2 1\n16 12",
        "output": "-1"
      }
    ],
    "solution": "#!/usr/bin/python3\n\na,b = [int(x) for x in input().split()]\nc,d = [int(x) for x in input().split()]\ni = 0\nj = 0\nflag = 0\nfor i in range(1000000):\n\ts1 = b + a*i\n\tif (s1 >= d and 0 == (s1-d)%c):\n\t\tprint(s1)\n\t\tflag = 1\n\t\tbreak\nif (not flag):\n\tprint(\"-1\")\n",
    "explanation": "You need to find out if there are non-negative integers like i and j such ai\u2009+\u2009b\u2009=\u2009cj\u2009+\u2009d and i or j (or both) is minimized. It's easy to show that if a,\u2009b,\u2009c,\u2009d\u2009\u2264\u2009N, and such i and j exist, then i,\u2009j\u2009\u2264\u2009N, so you can iterate over i and check if such j exists.\nTime complexity: $${\\mathcal{O}}(n)$$"
  },
  {
    "id": "116/A",
    "problem": "Title: Tram\n\nLinear Kingdom has exactly one tram line. It has n stops, numbered from 1 to n in the order of tram's movement. At the i-th stop ai passengers exit the tram, while bi passengers enter it. The tram is empty before it arrives at the first stop. Also, when the tram arrives at the last stop, all passengers exit so that it becomes empty.\n\nYour task is to calculate the tram's minimum capacity such that the number of people inside the tram at any time never exceeds this capacity. Note that at each stop all exiting passengers exit before any entering passenger enters the tram.\n\nInput Format:\nThe first line contains a single number n (2 \u2264 n \u2264 1000) \u2014 the number of the tram's stops.\n\nThen n lines follow, each contains two integers ai and bi (0 \u2264 ai, bi \u2264 1000) \u2014 the number of passengers that exits the tram at the i-th stop, and the number of passengers that enter the tram at the i-th stop. The stops are given from the first to the last stop in the order of tram's movement.\n\n- The number of people who exit at a given stop does not exceed the total number of people in the tram immediately before it arrives at the stop. More formally, $$$$. This particularly means that a1\u2009=\u20090.\n- At the last stop, all the passengers exit the tram and it becomes empty. More formally, $$\\sum_{j=1}^{n-1} b_j - \\sum_{j=1}^{n-1} a_j = a_n$$.\n- No passenger will enter the train at the last stop. That is, bn\u2009=\u20090.\n\nOutput Format:\nPrint a single integer denoting the minimum possible capacity of the tram (0 is allowed).\n\nExamples:\nExample 1:\nInput:\n4\n0 3\n2 5\n4 2\n4 0\nOutput:\n6\n\nNote:\nFor the first example, a capacity of 6 is sufficient:\n\n- At the first stop, the number of passengers inside the tram before arriving is 0. Then, 3 passengers enter the tram, and the number of passengers inside the tram becomes 3.\n- At the second stop, 2 passengers exit the tram (1 passenger remains inside). Then, 5 passengers enter the tram. There are 6 passengers inside the tram now.\n- At the third stop, 4 passengers exit the tram (2 passengers remain inside). Then, 2 passengers enter the tram. There are 4 passengers inside the tram now.\n- Finally, all the remaining passengers inside the tram exit the tram at the last stop. There are no passenger inside the tram now, which is in line with the constraints.\n\nSince the number of passengers inside the tram never exceeds 6, a capacity of 6 is sufficient. Furthermore it is not possible for the tram to have a capacity less than 6. Hence, 6 is the correct answer.",
    "examples": [
      {
        "input": "4\n0 3\n2 5\n4 2\n4 0",
        "output": "6"
      }
    ],
    "solution": "n = int(input())\r\ncurrent = 0\r\nmx = 0\r\nfor i in range(n):\r\n    l = list(map(int,input().split()))\r\n    current -= l[0]\r\n    current += l[1]\r\n    if(current>mx):\r\n        mx = current\r\nprint(mx)\r\n    ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "154/A",
    "problem": "Title: Hometask\n\nSergey attends lessons of the N-ish language. Each lesson he receives a hometask. This time the task is to translate some sentence to the N-ish language. Sentences of the N-ish language can be represented as strings consisting of lowercase Latin letters without spaces or punctuation marks.\n\nSergey totally forgot about the task until half an hour before the next lesson and hastily scribbled something down. But then he recollected that in the last lesson he learned the grammar of N-ish. The spelling rules state that N-ish contains some \"forbidden\" pairs of letters: such letters can never occur in a sentence next to each other. Also, the order of the letters doesn't matter (for example, if the pair of letters \"ab\" is forbidden, then any occurrences of substrings \"ab\" and \"ba\" are also forbidden). Also, each pair has different letters and each letter occurs in no more than one forbidden pair.\n\nNow Sergey wants to correct his sentence so that it doesn't contain any \"forbidden\" pairs of letters that stand next to each other. However, he is running out of time, so he decided to simply cross out some letters from the sentence. What smallest number of letters will he have to cross out? When a letter is crossed out, it is \"removed\" so that the letters to its left and right (if they existed), become neighboring. For example, if we cross out the first letter from the string \"aba\", we get the string \"ba\", and if we cross out the second letter, we get \"aa\".\n\nInput Format:\nThe first line contains a non-empty string s, consisting of lowercase Latin letters \u2014 that's the initial sentence in N-ish, written by Sergey. The length of string s doesn't exceed 105.\n\nThe next line contains integer k (0 \u2264 k \u2264 13) \u2014 the number of forbidden pairs of letters.\n\nNext k lines contain descriptions of forbidden pairs of letters. Each line contains exactly two different lowercase Latin letters without separators that represent the forbidden pairs. It is guaranteed that each letter is included in no more than one pair.\n\nOutput Format:\nPrint the single number \u2014 the smallest number of letters that need to be removed to get a string without any forbidden pairs of neighboring letters. Please note that the answer always exists as it is always possible to remove all letters.\n\nExamples:\nExample 1:\nInput:\nababa\n1\nab\nOutput:\n2\n\nExample 2:\nInput:\ncodeforces\n2\ndo\ncs\nOutput:\n1\n\nNote:\nIn the first sample you should remove two letters b.\n\nIn the second sample you should remove the second or the third letter. The second restriction doesn't influence the solution.",
    "examples": [
      {
        "input": "ababa\n1\nab",
        "output": "2"
      },
      {
        "input": "codeforces\n2\ndo\ncs",
        "output": "1"
      }
    ],
    "solution": "s = input()\r\nn = len(s)\r\nk = int(input())\r\narr = [set(input()) for _ in range(k)]\r\n\r\nstart = 0\r\ncnt = 0\r\nd = []\r\nfor i in range(n):\r\n    if s[start] == s[i]:\r\n        cnt += 1\r\n    else:\r\n        d.append([s[start], cnt])\r\n        cnt = 1\r\n        start = i\r\n\r\nif cnt > 0:\r\n    d.append([s[start], cnt])\r\n\r\nstart = 0\r\nend = 0\r\ncnt = 0\r\ncnt_first = d[start][1]\r\ncnt_second = 0\r\n\r\nfor i in range(len(d)-1):\r\n\r\n    if {d[i][0], d[i + 1][0]} in arr:\r\n        end = i + 1\r\n        if d[start][0] == d[i+1][0]:\r\n            cnt_first += d[i+1][1]\r\n        else:\r\n            cnt_second += d[i+1][1]\r\n    else:\r\n        le = end-start+1\r\n        cnt += min(cnt_first, cnt_second)\r\n        start = i + 1\r\n        end = i + 1\r\n        cnt_first = d[start][1]\r\n        cnt_second = 0\r\n\r\ncnt += min(cnt_first, cnt_second)\r\nprint(cnt)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "236/A",
    "problem": "Title: Boy or Girl\n\nThose days, many boys use beautiful girls' photos as avatars in forums. So it is pretty hard to tell the gender of a user at the first glance. Last year, our hero went to a forum and had a nice chat with a beauty (he thought so). After that they talked very often and eventually they became a couple in the network.\n\nBut yesterday, he came to see \"her\" in the real world and found out \"she\" is actually a very strong man! Our hero is very sad and he is too tired to love again now. So he came up with a way to recognize users' genders by their user names.\n\nThis is his method: if the number of distinct characters in one's user name is odd, then he is a male, otherwise she is a female. You are given the string that denotes the user name, please help our hero to determine the gender of this user by his method.\n\nInput Format:\nThe first line contains a non-empty string, that contains only lowercase English letters \u2014 the user name. This string contains at most 100 letters.\n\nOutput Format:\nIf it is a female by our hero's method, print \"CHAT WITH HER!\" (without the quotes), otherwise, print \"IGNORE HIM!\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\nwjmzbmr\nOutput:\nCHAT WITH HER!\n\nExample 2:\nInput:\nxiaodao\nOutput:\nIGNORE HIM!\n\nExample 3:\nInput:\nsevenkplus\nOutput:\nCHAT WITH HER!\n\nNote:\nFor the first example. There are 6 distinct characters in \"wjmzbmr\". These characters are: \"w\", \"j\", \"m\", \"z\", \"b\", \"r\". So wjmzbmr is a female and you should print \"CHAT WITH HER!\".",
    "examples": [
      {
        "input": "wjmzbmr",
        "output": "CHAT WITH HER!"
      },
      {
        "input": "xiaodao",
        "output": "IGNORE HIM!"
      },
      {
        "input": "sevenkplus",
        "output": "CHAT WITH HER!"
      }
    ],
    "solution": "d=dict()\r\nn=input()\r\nfor ch in n:\r\n    if(ch in d):\r\n        d[ch]=d[ch]+1 \r\n    else:\r\n        d[ch]=0\r\ncount=len(d)\r\nif(count%2==0):\r\n    print(\"CHAT WITH HER!\")\r\nelse:\r\n    print(\"IGNORE HIM!\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "235/A",
    "problem": "Title: LCM Challenge\n\nSome days ago, I learned the concept of LCM (least common multiple). I've played with it for several times and I want to make a big number with it.\n\nBut I also don't want to use many numbers, so I'll choose three positive integers (they don't have to be distinct) which are not greater than n. Can you help me to find the maximum possible least common multiple of these three integers?\n\nInput Format:\nThe first line contains an integer n (1 \u2264 n \u2264 106) \u2014 the n mentioned in the statement.\n\nOutput Format:\nPrint a single integer \u2014 the maximum possible LCM of three not necessarily distinct positive integers that are not greater than n.\n\nExamples:\nExample 1:\nInput:\n9\nOutput:\n504\n\nExample 2:\nInput:\n7\nOutput:\n210\n\nNote:\nThe least common multiple of some positive integers is the least positive integer which is multiple for each of them.\n\nThe result may become very large, 32-bit integer won't be enough. So using 64-bit integers is recommended.\n\nFor the last example, we can chose numbers 7, 6, 5 and the LCM of them is 7\u00b76\u00b75 = 210. It is the maximum value we can get.",
    "examples": [
      {
        "input": "9",
        "output": "504"
      },
      {
        "input": "7",
        "output": "210"
      }
    ],
    "solution": "import math\r\n\r\ndef main():\r\n    n = int(input())\r\n    if n <= 3:\r\n        ans = 1\r\n        for i in range(1,n+1):\r\n            ans *= i\r\n        print(ans)\r\n        return\r\n    if n%2 == 0:\r\n        #print(n,n-1,n-3)\r\n        if n%3 == 0:\r\n            print((n-3)*(n-1)*(n-2))\r\n        else:\r\n            print(n*(n-1)*(n-3))\r\n    else:\r\n        print(n*(n-1)*(n-2))\r\n\r\nmain()\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "239/A",
    "problem": "Title: Two Bags of Potatoes\n\nValera had two bags of potatoes, the first of these bags contains x (x \u2265 1) potatoes, and the second \u2014 y (y \u2265 1) potatoes. Valera \u2014 very scattered boy, so the first bag of potatoes (it contains x potatoes) Valera lost. Valera remembers that the total amount of potatoes (x + y) in the two bags, firstly, was not gerater than n, and, secondly, was divisible by k.\n\nHelp Valera to determine how many potatoes could be in the first bag. Print all such possible numbers in ascending order.\n\nInput Format:\nThe first line of input contains three integers y, k, n (1 \u2264 y, k, n \u2264 109; $$\\pi_{k}$$  \u2264 105).\n\nOutput Format:\nPrint the list of whitespace-separated integers \u2014 all possible values of x in ascending order. You should print each possible value of x exactly once.\n\nIf there are no such values of x print a single integer -1.\n\nExamples:\nExample 1:\nInput:\n10 1 10\nOutput:\n-1\n\nExample 2:\nInput:\n10 6 40\nOutput:\n2 8 14 20 26",
    "examples": [
      {
        "input": "10 1 10",
        "output": "-1"
      },
      {
        "input": "10 6 40",
        "output": "2 8 14 20 26"
      }
    ],
    "solution": "y,k,n = map(int,input().split())\r\nx = k - y%k\r\nf = 0\r\nwhile x+y <= n:\r\n    print(x,end=\" \")\r\n    x += k\r\n    f = 1\r\nif f==0:\r\n    print(-1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "237/A",
    "problem": "Title: Free Cash\n\nValera runs a 24/7 fast food cafe. He magically learned that next day n people will visit his cafe. For each person we know the arrival time: the i-th person comes exactly at hi hours mi minutes. The cafe spends less than a minute to serve each client, but if a client comes in and sees that there is no free cash, than he doesn't want to wait and leaves the cafe immediately.\n\nValera is very greedy, so he wants to serve all n customers next day (and get more profit). However, for that he needs to ensure that at each moment of time the number of working cashes is no less than the number of clients in the cafe.\n\nHelp Valera count the minimum number of cashes to work at his cafe next day, so that they can serve all visitors.\n\nInput Format:\nThe first line contains a single integer n (1 \u2264 n \u2264 105), that is the number of cafe visitors.\n\nEach of the following n lines has two space-separated integers hi and mi (0 \u2264 hi \u2264 23;\u00a00 \u2264 mi \u2264 59), representing the time when the i-th person comes into the cafe.\n\nNote that the time is given in the chronological order. All time is given within one 24-hour period.\n\nOutput Format:\nPrint a single integer \u2014 the minimum number of cashes, needed to serve all clients next day.\n\nExamples:\nExample 1:\nInput:\n4\n8 0\n8 10\n8 10\n8 45\nOutput:\n2\n\nExample 2:\nInput:\n3\n0 12\n10 11\n22 22\nOutput:\n1\n\nNote:\nIn the first sample it is not enough one cash to serve all clients, because two visitors will come into cafe in 8:10. Therefore, if there will be one cash in cafe, then one customer will be served by it, and another one will not wait and will go away.\n\nIn the second sample all visitors will come in different times, so it will be enough one cash.",
    "examples": [
      {
        "input": "4\n8 0\n8 10\n8 10\n8 45",
        "output": "2"
      },
      {
        "input": "3\n0 12\n10 11\n22 22",
        "output": "1"
      }
    ],
    "solution": "n = int(input())\r\nd = {}\r\nc = 1\r\nfor i in range(n):\r\n  m,h = list(map(str, input().split()))\r\n  if m+\":\"+h in d.keys():\r\n    d[m+\":\"+h] += 1\r\n    c = max(c, d[m+\":\"+h]) \r\n  else:\r\n    d[m+\":\"+h] = 1\r\n\r\nprint(c)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "856/A",
    "problem": "Title: Set Theory\n\nMasha and Grisha like studying sets of positive integers.\n\nOne day Grisha has written a set A containing n different integers ai on a blackboard. Now he asks Masha to create a set B containing n different integers bj such that all n2 integers that can be obtained by summing up ai and bj for all possible pairs of i and j are different.\n\nBoth Masha and Grisha don't like big numbers, so all numbers in A are from 1 to 106, and all numbers in B must also be in the same range.\n\nHelp Masha to create the set B that satisfies Grisha's requirement.\n\nInput Format:\nInput data contains multiple test cases. The first line contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n\u00a0\u2014 the number of elements in A (1 \u2264 n \u2264 100).\n\nThe second line contains n integers ai\u00a0\u2014 the elements of A (1 \u2264 ai \u2264 106).\n\nOutput Format:\nFor each test first print the answer:\n\n- NO, if Masha's task is impossible to solve, there is no way to create the required set B.\n- YES, if there is the way to create the required set. In this case the second line must contain n different positive integers bj\u00a0\u2014 elements of B (1\u2009\u2264\u2009bj\u2009\u2264\u2009106). If there are several possible sets, output any of them.\n\nExamples:\nExample 1:\nInput:\n3\n3\n1 10 100\n1\n1\n2\n2 4\nOutput:\nYES\n1 2 3\nYES\n1\nYES\n1 2",
    "examples": [
      {
        "input": "3\n3\n1 10 100\n1\n1\n2\n2 4",
        "output": "YES\n1 2 3\nYES\n1\nYES\n1 2"
      }
    ],
    "solution": "d = [-1] * 1000001\r\nfor t in range(int(input())):\r\n    n, a = int(input()), list(map(int, input().split()))\r\n    a.sort()\r\n    for i in range(n):\r\n        for j in range(i + 1, n):  d[a[j] - a[i]] = t\r\n    i = 1\r\n    while any(d[i * j] == t for j in range(1, n)): i += 1\r\n    print(\"YES\\n\" + ' '.join(str(j * i + 1) for j in range(n)))",
    "explanation": "\u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0441\u043f\u043e\u0439\u043b\u0435\u0440\u044b: \u043e\u0442\u0432\u0435\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 YES, \u043f\u043e\u0447\u0435\u043c\u0443\u00a0\u2014 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0438\u0432\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u0411\u0443\u0434\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0442\u044c bj \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u0441\u0435\u0445 ai \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 bj, \u0432\u0441\u0435 \u0441\u0443\u043c\u043c\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b. \u041d\u0435\u0441\u043b\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0437\u0430 O(max(B)\u00b7n2).\n\u041e\u0446\u0435\u043d\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435 B. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430, \u043e\u043d \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c 106 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438. \u0417\u0430\u0442\u0435\u043c, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e: ai1\u2009+\u2009bj1\u2009=\u2009ai2\u2009+\u2009bj2, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u043d\u0435\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f B. \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043f\u0438\u0448\u0435\u043c: bj2\u2009=\u2009bj1\u2009-\u2009(ai2\u2009-\u2009ai1). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043b\u044e\u0431\u044b\u0445 \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 B \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u043d\u0430 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u0434\u0432\u0443\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 A. \u0412 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0435 A \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c O(n2) \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0435\u0439, \u0438\u0437 \u0447\u0435\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442, \u0447\u0442\u043e max(B) \u043d\u0435 \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c O(n2) \u0432 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\u0418\u0437 \u0432\u044b\u0448\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043b\u0435\u0434\u0443\u0435\u0442, \u0447\u0442\u043e \u043d\u0430\u0438\u0432\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0437\u0430 O(n4) \u043d\u0430 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442, \u0447\u0442\u043e \u043d\u0435 \u0443\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435? \u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u043c\u044b \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u0432\u0443\u0445 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432, \u0438 \u0438\u0437\u0431\u0430\u0432\u0438\u043c\u0441\u044f \u043e\u0442 \u044d\u0442\u043e\u0433\u043e. \u0417\u0430\u0432\u0435\u0434\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 bad, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u043c \u043e\u0442\u043c\u0435\u0447\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u0434\u043b\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 B. \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 bj, \u0435\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u043e\u0442\u043c\u0435\u0447\u0435\u043d\u043e \u0432 bad, \u0442\u043e \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0432 \u043e\u0442\u0432\u0435\u0442. \u041a\u0430\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u0431\u0443\u0434\u0435\u0442 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0431\u0440\u0430\u0442\u044c \u0432 \u043e\u0442\u0432\u0435\u0442? \u0422\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043e\u0442 bj, \u043d\u0430 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043a\u0430\u043a\u0438\u0445-\u0442\u043e \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 A. (\u0422\u0430\u043a \u043a\u0430\u043a bj \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445, \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u043e, \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 n2\u2009/\u20092)\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0431\u043e\u0440\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e bj \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0447\u0442\u043e-\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043c\u044b \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0431\u0435\u0440\u0435\u043c \u0432 \u043e\u0442\u0432\u0435\u0442. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u043a\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 O(max(B)\u2009+\u2009n3) \u043d\u0430 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442. \u0422\u0430\u043a\u0436\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e max(B) \u0432 \u0442\u0430\u043a\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u0437\u043e\u0439\u0434\u0435\u0442 n3\u2009/\u20092, \u0430 \u0437\u043d\u0430\u0447\u0438\u0442, \u043e\u0431\u0449\u0430\u044f \u0430\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u043a\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u00a0\u2014O(n3) \u043d\u0430 \u0442\u0435\u0441\u0442.\n\u041f\u043e\u0441\u043b\u0435\u0441\u043b\u043e\u0432\u0438\u0435: \u041a \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0437\u0430 O(n4) \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u044d\u0432\u0440\u0438\u0441\u0442\u0438\u043a, \u043d\u0435 \u043a\u0430\u0436\u0434\u0443\u044e \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043e\u0442\u0441\u0435\u0447\u044c \u0442\u0435\u0441\u0442\u0430\u043c\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u0438\u0441\u0430\u0442\u044c \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u044b\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u0434\u0430\u0447\u0443 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0432 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044e, \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u0438\u0445\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u043d\u0430\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f."
  },
  {
    "id": "672/A",
    "problem": "Title: Summer Camp\n\nEvery year, hundreds of people come to summer camps, they learn new algorithms and solve hard problems.\n\nThis is your first year at summer camp, and you are asked to solve the following problem. All integers starting with 1 are written in one line. The prefix of these line is \"123456789101112131415...\". Your task is to print the n-th digit of this string (digits are numbered starting with 1.\n\nInput Format:\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the position of the digit you need to print.\n\nOutput Format:\nPrint the n-th digit of the line.\n\nExamples:\nExample 1:\nInput:\n3\nOutput:\n3\n\nExample 2:\nInput:\n11\nOutput:\n0\n\nNote:\nIn the first sample the digit at position 3 is '3', as both integers 1 and 2 consist on one digit.\n\nIn the second sample, the digit at position 11 is '0', it belongs to the integer 10.",
    "examples": [
      {
        "input": "3",
        "output": "3"
      },
      {
        "input": "11",
        "output": "0"
      }
    ],
    "solution": "\r\n\r\ns = ''\r\nfor i in range(1,371):\r\n    s+=str(i)\r\ndef solve():\r\n    n = int(input())\r\n    print(s[n-1])\r\nfor _ in range(1):\r\n    solve()\r\n",
    "explanation": "We have to calculate d array, di is number of digits in number i. We will iterate 1 to 1000. In i, if n\u2009\u2264\u2009di then answer is one of number i's digits, otherwise just decrease n by di."
  },
  {
    "id": "376/A",
    "problem": "Title: Lever\n\nYou have a description of a lever as string s. We'll represent the string length as record |s|, then the lever looks as a horizontal bar with weights of length |s| - 1 with exactly one pivot. We will assume that the bar is a segment on the Ox axis between points 0 and |s| - 1.\n\nThe decoding of the lever description is given below.\n\n- If the i-th character of the string equals \"^\", that means that at coordinate i there is the pivot under the bar.\n- If the i-th character of the string equals \"=\", that means that at coordinate i there is nothing lying on the bar.\n- If the i-th character of the string equals digit c (1-9), that means that at coordinate i there is a weight of mass c on the bar.\n\nYour task is, given the lever description, print if it will be in balance or not. Assume that the bar doesn't weight anything. Assume that the bar initially is in balance then all weights are simultaneously put on it. After that the bar either tilts to the left, or tilts to the right, or is in balance.\n\nInput Format:\nThe first line contains the lever description as a non-empty string s (3 \u2264 |s| \u2264 106), consisting of digits (1-9) and characters \"^\" and \"=\". It is guaranteed that the line contains exactly one character \"^\". It is guaranteed that the pivot of the lever isn't located in any end of the lever bar.\n\nTo solve the problem you may need 64-bit integer numbers. Please, do not forget to use them in your programs.\n\nOutput Format:\nPrint \"left\" if the given lever tilts to the left, \"right\" if it tilts to the right and \"balance\", if it is in balance.\n\nExamples:\nExample 1:\nInput:\n=^==\nOutput:\nbalance\n\nExample 2:\nInput:\n9===^==1\nOutput:\nleft\n\nExample 3:\nInput:\n2==^7==\nOutput:\nright\n\nExample 4:\nInput:\n41^52==\nOutput:\nbalance\n\nNote:\nAs you solve the problem, you may find the following link useful to better understand how a lever functions: http://en.wikipedia.org/wiki/Lever.\n\nThe pictures to the examples:",
    "examples": [
      {
        "input": "=^==",
        "output": "balance"
      },
      {
        "input": "9===^==1",
        "output": "left"
      },
      {
        "input": "2==^7==",
        "output": "right"
      },
      {
        "input": "41^52==",
        "output": "balance"
      }
    ],
    "solution": "x=input()\r\nn=x.index(\"^\")\r\nl=list(x[:n])\r\nl=l[::-1]\r\nr=list(x[n+1:])\r\nf=s=0\r\nfor i in range(len(l)):\r\n    if l[i].isdigit():\r\n        f=f+(i+1)*int(l[i])\r\nfor i in range(len(r)):\r\n    if r[i].isdigit():\r\n        s=s+(i+1)*int(r[i])\r\nif f==s:\r\n    print(\"balance\")\r\nelif f>s:\r\n    print(\"left\")\r\nelse:\r\n    print(\"right\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "831/A",
    "problem": "Title: Unimodal Array\n\nArray of integers is unimodal, if:\n\n- it is strictly increasing in the beginning;\n- after that it is constant;\n- after that it is strictly decreasing.\n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 1 000) \u2014 the elements of the array.\n\nOutput Format:\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\nExamples:\nExample 1:\nInput:\n6\n1 5 5 5 4 2\nOutput:\nYES\n\nExample 2:\nInput:\n5\n10 20 30 20 10\nOutput:\nYES\n\nExample 3:\nInput:\n4\n1 2 1 2\nOutput:\nNO\n\nExample 4:\nInput:\n7\n3 3 3 3 3 3 3\nOutput:\nYES\n\nNote:\nIn the first example the array is unimodal, because it is strictly increasing in the beginning (from position 1 to position 2, inclusively), that it is constant (from position 2 to position 4, inclusively) and then it is strictly decreasing (from position 4 to position 6, inclusively).",
    "examples": [
      {
        "input": "6\n1 5 5 5 4 2",
        "output": "YES"
      },
      {
        "input": "5\n10 20 30 20 10",
        "output": "YES"
      },
      {
        "input": "4\n1 2 1 2",
        "output": "NO"
      },
      {
        "input": "7\n3 3 3 3 3 3 3",
        "output": "YES"
      }
    ],
    "solution": "# -*- coding: utf-8 -*-\n\"\"\"831.ipynb\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https://colab.research.google.com/drive/1hYxPSks58iBj6lqO-ZFgsg_7bcRbm3l3\n\"\"\"\n\n#https://codeforces.com/contest/831/problem/A  Unimodal Array\n\na=int(input())\nb=list(map(int,input().split()))\ni=1\nwhile i<a and b[i-1]<b[i]:\n  i+=1\nwhile i<a and b[i-1]==b[i]:\n  i+=1\nwhile i<a and b[i-1]>b[i]:\n  i+=1\nif i==a:\n  print(\"Yes\")\nelse:\n  print(\"No\")",
    "explanation": "Let use two variables pos1 \u0438 pos2. Initially pos1\u2009=\u20090 and pos2\u2009=\u2009n\u2009-\u20091.\nAfter that we need to iterate through the given array from the left to the right and increase pos1 until the next element is strictly more than previous. After that we need to iterate through the given array from the right to the left and decrease pos2 until a[pos2\u2009-\u20091]\u2009>\u2009a[pos2].\nNow it is left only to check that all elements between positions pos1 and pos2 are equal to each other. If it is true the answer is \"YES\", otherwise, the answer is \"NO\"."
  },
  {
    "id": "227/A",
    "problem": "Title: Where do I Turn?\n\nTrouble came from the overseas lands: a three-headed dragon Gorynych arrived. The dragon settled at point C and began to terrorize the residents of the surrounding villages.\n\nA brave hero decided to put an end to the dragon. He moved from point A to fight with Gorynych. The hero rode from point A along a straight road and met point B on his way. The hero knows that in this land for every pair of roads it is true that they are either parallel to each other, or lie on a straight line, or are perpendicular to each other. He also knows well that points B and C are connected by a road. So the hero must either turn 90 degrees to the left or continue riding straight ahead or turn 90 degrees to the right. But he forgot where the point C is located.\n\nFortunately, a Brave Falcon flew right by. It can see all three points from the sky. The hero asked him what way to go to get to the dragon's lair.\n\nIf you have not got it, you are the falcon. Help the hero and tell him how to get him to point C: turn left, go straight or turn right.\n\nAt this moment the hero is believed to stand at point B, turning his back to point A.\n\nInput Format:\nThe first input line contains two space-separated integers xa, ya (|xa|, |ya| \u2264 109) \u2014 the coordinates of point A. The second line contains the coordinates of point B in the same form, the third line contains the coordinates of point C.\n\nIt is guaranteed that all points are pairwise different. It is also guaranteed that either point B lies on segment AC, or angle ABC is right.\n\nOutput Format:\nPrint a single line. If a hero must turn left, print \"LEFT\" (without the quotes); If he must go straight ahead, print \"TOWARDS\" (without the quotes); if he should turn right, print \"RIGHT\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n0 0\n0 1\n1 1\nOutput:\nRIGHT\n\nExample 2:\nInput:\n-1 -1\n-3 -3\n-4 -4\nOutput:\nTOWARDS\n\nExample 3:\nInput:\n-4 -6\n-3 -7\n-2 -6\nOutput:\nLEFT\n\nNote:\nThe picture to the first sample:\n\nThe red color shows points A, B and C. The blue arrow shows the hero's direction. The green color shows the hero's trajectory.\n\nThe picture to the second sample:",
    "examples": [
      {
        "input": "0 0\n0 1\n1 1",
        "output": "RIGHT"
      },
      {
        "input": "-1 -1\n-3 -3\n-4 -4",
        "output": "TOWARDS"
      },
      {
        "input": "-4 -6\n-3 -7\n-2 -6",
        "output": "LEFT"
      }
    ],
    "solution": "xa,ya = input().split()\r\nxa = int(xa)\r\nya = int(ya)\r\n\r\nxb,yb = input().split()\r\nxb = int(xb)\r\nyb = int(yb)\r\n\r\nxc,yc = input().split()\r\nxc = int(xc)\r\nyc = int(yc)\r\n\r\nvab_x = xb-xa\r\nvab_y = yb-ya\r\n\r\nvbc_x = xc - xb\r\nvbc_y = yc - yb\r\n\r\nproduto_vetorial = (vab_x * vbc_y) - (vab_y * vbc_x)\r\n\r\nif(produto_vetorial == 0):\r\n    print(\"TOWARDS\")\r\nelif(produto_vetorial < 0):\r\n    print(\"RIGHT\")\r\nelse:\r\n    print(\"LEFT\")\r\n\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "647/A",
    "problem": "Title: \u041e\u0446\u0435\u043d\u043a\u0438 \u0412\u0430\u0441\u0438\n\n\u0420\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0412\u0430\u0441\u0438 \u0445\u043e\u0442\u044f\u0442, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043b\u0443\u0447\u0448\u0435 \u0443\u0447\u0438\u043b\u0441\u044f. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0434\u0440\u044f\u0434 \u0442\u0440\u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 (\u00ab\u0447\u0435\u0442\u0432\u0451\u0440\u043a\u0438\u00bb \u0438\u043b\u0438 \u00ab\u043f\u044f\u0442\u0451\u0440\u043a\u0438\u00bb), \u043e\u043d\u0438 \u0434\u0430\u0440\u044f\u0442 \u0435\u043c\u0443 \u043f\u043e\u0434\u0430\u0440\u043e\u043a. \u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043e\u0446\u0435\u043d\u043a\u0438 \u00ab\u0435\u0434\u0438\u043d\u0438\u0446\u0430\u00bb, \u00ab\u0434\u0432\u043e\u0439\u043a\u0430\u00bb \u0438 \u00ab\u0442\u0440\u043e\u0439\u043a\u0430\u00bb \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0412\u0430\u0441\u0438 \u0441\u0447\u0438\u0442\u0430\u044e\u0442 \u043f\u043b\u043e\u0445\u0438\u043c\u0438. \u041a\u043e\u0433\u0434\u0430 \u0412\u0430\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u0434\u0440\u044f\u0434 \u0442\u0440\u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438, \u0435\u043c\u0443 \u0441\u0440\u0430\u0437\u0443 \u0432\u0440\u0443\u0447\u0430\u044e\u0442 \u043f\u043e\u0434\u0430\u0440\u043e\u043a, \u043d\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0449\u0451 \u043e\u0434\u0438\u043d \u043f\u043e\u0434\u0430\u0440\u043e\u043a, \u0435\u043c\u0443 \u0432\u043d\u043e\u0432\u044c \u043d\u0430\u0434\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0440\u044f\u0434 \u0435\u0449\u0451 \u0442\u0440\u0438 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0412\u0430\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043f\u043e\u0434\u0440\u044f\u0434 \u043f\u044f\u0442\u044c \u00ab\u0447\u0435\u0442\u0432\u0451\u0440\u043e\u043a\u00bb \u043e\u0446\u0435\u043d\u043e\u043a, \u0430 \u043f\u043e\u0442\u043e\u043c \u00ab\u0434\u0432\u043e\u0439\u043a\u0443\u00bb, \u0442\u043e \u0435\u043c\u0443 \u0434\u0430\u0434\u0443\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043f\u043e\u0434\u0430\u0440\u043e\u043a, \u0430 \u0432\u043e\u0442 \u0435\u0441\u043b\u0438 \u0431\u044b \u00ab\u0447\u0435\u0442\u0432\u0451\u0440\u043e\u043a\u00bb \u0431\u044b\u043b\u043e \u0443\u0436\u0435 \u0448\u0435\u0441\u0442\u044c, \u0442\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432 \u0431\u044b\u043b\u043e \u0431\u044b \u0434\u0432\u0430.\n\n\u0417\u0430 \u043c\u0435\u0441\u044f\u0446 \u0412\u0430\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b n \u043e\u0446\u0435\u043d\u043e\u043a. \u0412\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0412\u0430\u0441\u044f. \u041e\u0446\u0435\u043d\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u0434\u0430\u043d\u044b \u0438\u043c\u0435\u043d\u043d\u043e \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0412\u0430\u0441\u044f \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u043b.\n\nInput Format:\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0446\u0435\u043b\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (3 \u2264 n \u2264 1000)\u00a0\u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0446\u0435\u043d\u043e\u043a, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0412\u0430\u0441\u0435\u0439.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0437 n \u0447\u0438\u0441\u0435\u043b a1, a2, ..., an (1 \u2264 ai \u2264 5)\u00a0\u2014 \u043e\u0446\u0435\u043d\u043a\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0412\u0430\u0441\u0435\u0439. \u041e\u0446\u0435\u043d\u043a\u0438 \u0437\u0430\u0434\u0430\u043d\u044b \u0432 \u0442\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0412\u0430\u0441\u044f \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0438\u043b.\n\nOutput Format:\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\u00a0\u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0412\u0430\u0441\u0435\u0439.\n\nExamples:\nExample 1:\nInput:\n6\n4 5 4 5 4 4\nOutput:\n2\n\nExample 2:\nInput:\n14\n1 5 4 5 2 4 4 5 5 4 3 4 5 5\nOutput:\n3\n\nNote:\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0412\u0430\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0434\u0432\u0430 \u043f\u043e\u0434\u0430\u0440\u043a\u0430\u00a0\u2014 \u0437\u0430 \u043f\u0435\u0440\u0432\u044b\u0435 \u0442\u0440\u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u0437\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0442\u0440\u043e\u0439\u043a\u0443 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.",
    "examples": [
      {
        "input": "6\n4 5 4 5 4 4",
        "output": "2"
      },
      {
        "input": "14\n1 5 4 5 2 4 4 5 5 4 3 4 5 5",
        "output": "3"
      }
    ],
    "solution": "n = int(input())\r\na = list(map(int, input().split()))\r\nk = 0\r\nc = 0\r\nfor i in range(n):\r\n    if a[i] > 3:\r\n        k += 1\r\n    if k == 3:\r\n        c += 1\r\n        k = 0\r\n    if a[i] < 4:\r\n        k = 0\r\nprint(c)\r\n\r\n\r\n\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "794/A",
    "problem": "Title: Bank Robbery\n\nA robber has attempted to rob a bank but failed to complete his task. However, he had managed to open all the safes.\n\nOleg the bank client loves money (who doesn't), and decides to take advantage of this failed robbery and steal some money from the safes. There are many safes arranged in a line, where the i-th safe from the left is called safe i. There are n banknotes left in all the safes in total. The i-th banknote is in safe xi. Oleg is now at safe a. There are two security guards, one of which guards the safe b such that b < a, i.e. the first guard is to the left of Oleg. The other guard guards the safe c so that c > a, i.e. he is to the right of Oleg.\n\nThe two guards are very lazy, so they do not move. In every second, Oleg can either take all the banknotes from the current safe or move to any of the neighboring safes. However, he cannot visit any safe that is guarded by security guards at any time, becaues he might be charged for stealing. Determine the maximum amount of banknotes Oleg can gather.\n\nInput Format:\nThe first line of input contains three space-separated integers, a, b and c (1 \u2264 b < a < c \u2264 109), denoting the positions of Oleg, the first security guard and the second security guard, respectively.\n\nThe next line of input contains a single integer n (1 \u2264 n \u2264 105), denoting the number of banknotes.\n\nThe next line of input contains n space-separated integers x1, x2, ..., xn (1 \u2264 xi \u2264 109), denoting that the i-th banknote is located in the xi-th safe. Note that xi are not guaranteed to be distinct.\n\nOutput Format:\nOutput a single integer: the maximum number of banknotes Oleg can take.\n\nExamples:\nExample 1:\nInput:\n5 3 7\n8\n4 7 5 5 3 6 2 8\nOutput:\n4\n\nExample 2:\nInput:\n6 5 7\n5\n1 5 7 92 3\nOutput:\n0\n\nNote:\nIn the first example Oleg can take the banknotes in positions 4, 5, 6 (note that there are 2 banknotes at position 5). Oleg can't take the banknotes in safes 7 and 8 because he can't run into the second security guard. Similarly, Oleg cannot take the banknotes at positions 3 and 2 because he can't run into the first security guard. Thus, he can take a maximum of 4 banknotes.\n\nFor the second sample, Oleg can't take any banknotes without bumping into any of the security guards.",
    "examples": [
      {
        "input": "5 3 7\n8\n4 7 5 5 3 6 2 8",
        "output": "4"
      },
      {
        "input": "6 5 7\n5\n1 5 7 92 3",
        "output": "0"
      }
    ],
    "solution": "n = [int(x) for x in input().split()]\r\nnum = int(input())\r\nacc = [int(x) for x in input().split()]\r\ncount = 0\r\nfor i in acc:\r\n    if(n[1]<i and n[2]>i):\r\n        count+=1\r\nprint(count)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "456/A",
    "problem": "Title: Laptops\n\nOne day Dima and Alex had an argument about the price and quality of laptops. Dima thinks that the more expensive a laptop is, the better it is. Alex disagrees. Alex thinks that there are two laptops, such that the price of the first laptop is less (strictly smaller) than the price of the second laptop but the quality of the first laptop is higher (strictly greater) than the quality of the second laptop.\n\nPlease, check the guess of Alex. You are given descriptions of n laptops. Determine whether two described above laptops exist.\n\nInput Format:\nThe first line contains an integer n (1 \u2264 n \u2264 105) \u2014 the number of laptops.\n\nNext n lines contain two integers each, ai and bi (1 \u2264 ai, bi \u2264 n), where ai is the price of the i-th laptop, and bi is the number that represents the quality of the i-th laptop (the larger the number is, the higher is the quality).\n\nAll ai are distinct. All bi are distinct.\n\nOutput Format:\nIf Alex is correct, print \"Happy Alex\", otherwise print \"Poor Alex\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n2\n1 2\n2 1\nOutput:\nHappy Alex",
    "examples": [
      {
        "input": "2\n1 2\n2 1",
        "output": "Happy Alex"
      }
    ],
    "solution": "n=int(input())\r\nl=[]\r\nfor a in range(0,n):\r\n   l.append(list(map(int,input().split())))\r\ndef key_function1(x):\r\n   return x[0]\r\ndef key_function2(x):\r\n   return x[1]\r\nl1=sorted(l,key=key_function1)\r\nl2=sorted(l,key=key_function2)\r\nprint(['Happy Alex','Poor Alex'][l1==l2])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "350/A",
    "problem": "Title: TL\n\nValera wanted to prepare a Codesecrof round. He's already got one problem and he wants to set a time limit (TL) on it.\n\nValera has written n correct solutions. For each correct solution, he knows its running time (in seconds). Valera has also wrote m wrong solutions and for each wrong solution he knows its running time (in seconds).\n\nLet's suppose that Valera will set v seconds TL in the problem. Then we can say that a solution passes the system testing if its running time is at most v seconds. We can also say that a solution passes the system testing with some \"extra\" time if for its running time, a seconds, an inequality 2a \u2264 v holds.\n\nAs a result, Valera decided to set v seconds TL, that the following conditions are met:\n\n1. v is a positive integer;\n2. all correct solutions pass the system testing;\n3. at least one correct solution passes the system testing with some \"extra\" time;\n4. all wrong solutions do not pass the system testing;\n5. value v is minimum among all TLs, for which points 1, 2, 3, 4 hold.\n\nHelp Valera and find the most suitable TL or else state that such TL doesn't exist.\n\nInput Format:\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 100). The second line contains n space-separated positive integers a1, a2, ..., an (1 \u2264 ai \u2264 100) \u2014 the running time of each of the n correct solutions in seconds. The third line contains m space-separated positive integers b1, b2, ..., bm (1 \u2264 bi \u2264 100) \u2014 the running time of each of m wrong solutions in seconds.\n\nOutput Format:\nIf there is a valid TL value, print it. Otherwise, print -1.\n\nExamples:\nExample 1:\nInput:\n3 6\n4 5 2\n8 9 6 10 7 11\nOutput:\n5\n\nExample 2:\nInput:\n3 1\n3 4 5\n6\nOutput:\n-1",
    "examples": [
      {
        "input": "3 6\n4 5 2\n8 9 6 10 7 11",
        "output": "5"
      },
      {
        "input": "3 1\n3 4 5\n6",
        "output": "-1"
      }
    ],
    "solution": "n , m = map(int,input().split())\r\ncans = list(map(int,input().split()))\r\nwans = list(map(int,input().split()))\r\nv = max(min(cans) * 2 , max(cans))\r\nif v < min(wans):\r\n    print(v)\r\nelse:\r\n    print(-1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "294/A",
    "problem": "Title: Shaass and Oskols\n\nShaass has decided to hunt some birds. There are n horizontal electricity wires aligned parallel to each other. Wires are numbered 1 to n from top to bottom. On each wire there are some oskols sitting next to each other. Oskol is the name of a delicious kind of birds in Shaass's territory. Supposed there are ai oskols sitting on the i-th wire.\n\nSometimes Shaass shots one of the birds and the bird dies (suppose that this bird sat at the i-th wire). Consequently all the birds on the i-th wire to the left of the dead bird get scared and jump up on the wire number i - 1, if there exists no upper wire they fly away. Also all the birds to the right of the dead bird jump down on wire number i + 1, if there exists no such wire they fly away.\n\nShaass has shot m birds. You're given the initial number of birds on each wire, tell him how many birds are sitting on each wire after the shots.\n\nInput Format:\nThe first line of the input contains an integer n, (1 \u2264 n \u2264 100). The next line contains a list of space-separated integers a1, a2, ..., an, (0 \u2264 ai \u2264 100).\n\nThe third line contains an integer m, (0 \u2264 m \u2264 100). Each of the next m lines contains two integers xi and yi. The integers mean that for the i-th time Shaass shoot the yi-th (from left) bird on the xi-th wire, (1 \u2264 xi \u2264 n, 1 \u2264 yi). It's guaranteed there will be at least yi birds on the xi-th wire at that moment.\n\nOutput Format:\nOn the i-th line of the output print the number of birds on the i-th wire.\n\nExamples:\nExample 1:\nInput:\n5\n10 10 10 10 10\n5\n2 5\n3 13\n2 12\n1 13\n4 6\nOutput:\n0\n12\n5\n0\n16\n\nExample 2:\nInput:\n3\n2 4 1\n1\n2 2\nOutput:\n3\n0\n3",
    "examples": [
      {
        "input": "5\n10 10 10 10 10\n5\n2 5\n3 13\n2 12\n1 13\n4 6",
        "output": "0\n12\n5\n0\n16"
      },
      {
        "input": "3\n2 4 1\n1\n2 2",
        "output": "3\n0\n3"
      }
    ],
    "solution": "n=int(input())\r\ns=input()\r\ns=s.split()\r\nl=[]\r\nfor i in range(n):\r\n    l.append(int(s[i]))\r\n\r\n\r\n\r\nm = int(input())\r\n\r\nfor i in range(m):\r\n    \r\n    ss=input()\r\n    ss=ss.split()\r\n    xi=int(ss[0])\r\n    yi=int(ss[1])\r\n    ox=l[xi-1]\r\n    l[xi-1]-=yi\r\n    if xi-2>=0:\r\n        l[xi-2]+=(yi-1)\r\n    \r\n    ox=ox-yi\r\n    l[xi-1]-=ox\r\n    if xi-1<n-1:\r\n        l[xi]+=ox\r\n\r\nfor j in l:\r\n    print(j)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "333/A",
    "problem": "Title: Secrets\n\nGerald has been selling state secrets at leisure. All the secrets cost the same: n marks. The state which secrets Gerald is selling, has no paper money, only coins. But there are coins of all positive integer denominations that are powers of three: 1 mark, 3 marks, 9 marks, 27 marks and so on. There are no coins of other denominations. Of course, Gerald likes it when he gets money without the change. And all buyers respect him and try to give the desired sum without change, if possible. But this does not always happen.\n\nOne day an unlucky buyer came. He did not have the desired sum without change. Then he took out all his coins and tried to give Gerald a larger than necessary sum with as few coins as possible. What is the maximum number of coins he could get?\n\nThe formal explanation of the previous paragraph: we consider all the possible combinations of coins for which the buyer can not give Gerald the sum of n marks without change. For each such combination calculate the minimum number of coins that can bring the buyer at least n marks. Among all combinations choose the maximum of the minimum number of coins. This is the number we want.\n\nInput Format:\nThe single line contains a single integer n (1 \u2264 n \u2264 1017).\n\nPlease, do not use the %lld specifier to read or write 64 bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput Format:\nIn a single line print an integer: the maximum number of coins the unlucky buyer could have paid with.\n\nExamples:\nExample 1:\nInput:\n1\nOutput:\n1\n\nExample 2:\nInput:\n4\nOutput:\n2\n\nNote:\nIn the first test case, if a buyer has exactly one coin of at least 3 marks, then, to give Gerald one mark, he will have to give this coin. In this sample, the customer can not have a coin of one mark, as in this case, he will be able to give the money to Gerald without any change.\n\nIn the second test case, if the buyer had exactly three coins of 3 marks, then, to give Gerald 4 marks, he will have to give two of these coins. The buyer cannot give three coins as he wants to minimize the number of coins that he gives.",
    "examples": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "4",
        "output": "2"
      }
    ],
    "solution": "n = int(input())\r\n\r\na = 1\r\n\r\nwhile n % a == 0:\r\n    a *= 3\r\n\r\nprint ((n - 1) // a + 1)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1/A",
    "problem": "Title: Theatre Square\n\nTheatre Square in the capital city of Berland has a rectangular shape with the size n \u00d7 m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a \u00d7 a.\n\nWhat is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.\n\nInput Format:\nThe input contains three positive integer numbers in the first line: n,  m and a (1 \u2264  n, m, a \u2264 109).\n\nOutput Format:\nWrite the needed number of flagstones.\n\nExamples:\nExample 1:\nInput:\n6 6 4\nOutput:\n4",
    "examples": [
      {
        "input": "6 6 4",
        "output": "4"
      }
    ],
    "solution": "'''Vipin'''\n# cook your dish here\nn,m,a=map(int,input().split())\nif a>n and a>m:\n    print(\"1\")\nelse:\n    if n%a>0:\n        n=n//a+1 \n    else:\n        n=n//a\n        \n    if m%a>0:\n        m=(m//a)+1 \n    else:\n        m=m//a\n        \n    ans = n*m     \n    print(ans)\n    \n        \n\t\t \t  \t\t\t\t\t\t \t\t    \t\t  \t\t    \t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "569/A",
    "problem": "Title: Music\n\nLittle Lesha loves listening to music via his smartphone. But the smartphone doesn't have much memory, so Lesha listens to his favorite songs in a well-known social network InTalk.\n\nUnfortunately, internet is not that fast in the city of Ekaterinozavodsk and the song takes a lot of time to download. But Lesha is quite impatient. The song's duration is T seconds. Lesha downloads the first S seconds of the song and plays it. When the playback reaches the point that has not yet been downloaded, Lesha immediately plays the song from the start (the loaded part of the song stays in his phone, and the download is continued from the same place), and it happens until the song is downloaded completely and Lesha listens to it to the end. For q seconds of real time the Internet allows you to download q - 1 seconds of the track.\n\nTell Lesha, for how many times he will start the song, including the very first start.\n\nInput Format:\nThe single line contains three integers T, S, q (2 \u2264 q \u2264 104, 1 \u2264 S < T \u2264 105).\n\nOutput Format:\nPrint a single integer\u00a0\u2014 the number of times the song will be restarted.\n\nExamples:\nExample 1:\nInput:\n5 2 2\nOutput:\n2\n\nExample 2:\nInput:\n5 4 7\nOutput:\n1\n\nExample 3:\nInput:\n6 2 3\nOutput:\n1\n\nNote:\nIn the first test, the song is played twice faster than it is downloaded, which means that during four first seconds Lesha reaches the moment that has not been downloaded, and starts the song again. After another two seconds, the song is downloaded completely, and thus, Lesha starts the song twice.\n\nIn the second test, the song is almost downloaded, and Lesha will start it only once.\n\nIn the third sample test the download finishes and Lesha finishes listening at the same moment. Note that song isn't restarted in this case.",
    "examples": [
      {
        "input": "5 2 2",
        "output": "2"
      },
      {
        "input": "5 4 7",
        "output": "1"
      },
      {
        "input": "6 2 3",
        "output": "1"
      }
    ],
    "solution": "n,m,r=map(int,input().split());o=0\r\nwhile(m<n):\r\n        m*=r;o+=1\r\nprint(o)\r\n",
    "explanation": "\u041f\u0443\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u044b\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0443\u0436\u0435\u043d\u043e S \u0441\u0435\u043a\u0443\u043d\u0434 \u043f\u0435\u0441\u043d\u0438, \u043d\u0430\u0439\u0434\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0433\u0440\u0443\u0436\u0435\u043d\u043e \u043f\u0435\u0440\u0435\u0434 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c. $$\\frac{x}{q} = \\frac{x-S}{q-1}$$. \u041e\u0442\u0441\u044e\u0434\u0430 x\u2009=\u2009qS.\n\u0422\u043e\u0433\u0434\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0435: \u0431\u0443\u0434\u0435\u043c \u0443\u043c\u043d\u043e\u0436\u0430\u0442\u044c S \u043d\u0430 q \u043f\u043e\u043a\u0430 S\u2009<\u2009T. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0439\u00a0\u2014 \u044d\u0442\u043e \u043e\u0442\u0432\u0435\u0442.\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u00a0\u2014 $${\\mathcal O}\\left(\\log T\\right)$$"
  },
  {
    "id": "219/A",
    "problem": "Title: k-String\n\nA string is called a k-string if it can be represented as k concatenated copies of some string. For example, the string \"aabaabaabaab\" is at the same time a 1-string, a 2-string and a 4-string, but it is not a 3-string, a 5-string, or a 6-string and so on. Obviously any string is a 1-string.\n\nYou are given a string s, consisting of lowercase English letters and a positive integer k. Your task is to reorder the letters in the string s in such a way that the resulting string is a k-string.\n\nInput Format:\nThe first input line contains integer k (1 \u2264 k \u2264 1000). The second line contains s, all characters in s are lowercase English letters. The string length s satisfies the inequality 1 \u2264 |s| \u2264 1000, where |s| is the length of string s.\n\nOutput Format:\nRearrange the letters in string s in such a way that the result is a k-string. Print the result on a single output line. If there are multiple solutions, print any of them.\n\nIf the solution doesn't exist, print \"-1\" (without quotes).\n\nExamples:\nExample 1:\nInput:\n2\naazz\nOutput:\nazaz\n\nExample 2:\nInput:\n3\nabcabcabz\nOutput:\n-1",
    "examples": [
      {
        "input": "2\naazz",
        "output": "azaz"
      },
      {
        "input": "3\nabcabcabz",
        "output": "-1"
      }
    ],
    "solution": "alphabet=[0]*27\r\n# print(alphabet)\r\na=int(input())\r\nc=input()\r\n# print(a)\r\nd=False\r\nseta=set()\r\nsetalfabet=set()\r\nfor i in range(len(c)):\r\n    b=int(ord(c[i])-ord('a'))\r\n    alphabet[b]+=1\r\n    setalfabet.add(c[i])\r\nvalue=0\r\nlista=[]\r\nfor i in range(27):\r\n    if alphabet[i]%a!=0:\r\n        d=True\r\n        break\r\n    if(alphabet[i]!=0):\r\n\r\n        alphabet[i]=int(alphabet[i]/a)\r\n\r\n\r\n\r\n\r\n\r\n# Convert the set to a string without commas and brackets\r\nset_string =''.join(map(str,setalfabet))\r\n# print(set_string)\r\nsetlist = list(seta)\r\n# print(setlist)\r\nif d :\r\n    print(-1)\r\n\r\n\r\n\r\nelse:\r\n\r\n    stringa=\"\"\r\n\r\n    for i in setalfabet:\r\n        for j in range(alphabet[int(ord(i)-ord('a'))]):\r\n            stringa+=i\r\n\r\n    mainstring=\"\"\r\n\r\n    for i in range(a):\r\n        mainstring+=stringa\r\n\r\n    print(mainstring)\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "594/A",
    "problem": "Title: Warrior and Archer\n\nIn the official contest this problem has a different statement, for which jury's solution was working incorrectly, and for this reason it was excluded from the contest. This mistake have been fixed and the current given problem statement and model solution corresponds to what jury wanted it to be during the contest.\n\nVova and Lesha are friends. They often meet at Vova's place and compete against each other in a computer game named The Ancient Papyri: Swordsink. Vova always chooses a warrior as his fighter and Leshac chooses an archer. After that they should choose initial positions for their characters and start the fight. A warrior is good at melee combat, so Vova will try to make the distance between fighters as small as possible. An archer prefers to keep the enemy at a distance, so Lesha will try to make the initial distance as large as possible.\n\nThere are n (n is always even) possible starting positions for characters marked along the Ox axis. The positions are given by their distinct coordinates x1, x2, ..., xn, two characters cannot end up at the same position.\n\nVova and Lesha take turns banning available positions, Vova moves first. During each turn one of the guys bans exactly one of the remaining positions. Banned positions cannot be used by both Vova and Lesha. They continue to make moves until there are only two possible positions remaining (thus, the total number of moves will be n - 2). After that Vova's character takes the position with the lesser coordinate and Lesha's character takes the position with the bigger coordinate and the guys start fighting.\n\nVova and Lesha are already tired by the game of choosing positions, as they need to play it before every fight, so they asked you (the developer of the The Ancient Papyri: Swordsink) to write a module that would automatically determine the distance at which the warrior and the archer will start fighting if both Vova and Lesha play optimally.\n\nInput Format:\nThe first line on the input contains a single integer n (2 \u2264 n \u2264 200 000, n is even)\u00a0\u2014 the number of positions available initially. The second line contains n distinct integers x1, x2, ..., xn (0 \u2264 xi \u2264 109), giving the coordinates of the corresponding positions.\n\nOutput Format:\nPrint the distance between the warrior and the archer at the beginning of the fight, provided that both Vova and Lesha play optimally.\n\nExamples:\nExample 1:\nInput:\n6\n0 1 3 7 15 31\nOutput:\n7\n\nExample 2:\nInput:\n2\n73 37\nOutput:\n36\n\nNote:\nIn the first sample one of the optimum behavior of the players looks like that:\n\n1. Vova bans the position at coordinate 15;\n2. Lesha bans the position at coordinate 3;\n3. Vova bans the position at coordinate 31;\n4. Lesha bans the position at coordinate 1.\n\nAfter these actions only positions 0 and 7 will remain, and the distance between them is equal to 7.\n\nIn the second sample there are only two possible positions, so there will be no bans.",
    "examples": [
      {
        "input": "6\n0 1 3 7 15 31",
        "output": "7"
      },
      {
        "input": "2\n73 37",
        "output": "36"
      }
    ],
    "solution": "# LUOGU_RID: 99814317\nans=0x3f3f3f3f\r\nn=int(input())\r\na=list(map(int,input().split()))#\u8f93\u5165n\u4e2a\u70b9\u7684\u4f4d\u7f6e\u5750\u6807\r\nb=n//2\r\na.sort()#\u7ed9n\u4e2a\u70b9\u7684\u4f4d\u7f6e\u5750\u6807\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\r\nfor i in range(b):#\u627e\u51fa\u6700\u540e\u5269\u4e0b\u7684\u4e24\u4e2a\u70b9\u7684\u4f4d\u7f6e\u5750\u6807\u7684\u6700\u5c0f\u503c\r\n    ans=min(ans,a[b+i]-a[i])#a[b+i]\u4e3a\u5269\u4e0b\u53f3\u4fa7\u7684\u70b9\u7684\u4f4d\u7f6e\u5750\u6807\uff0ca[i]\u4e3a\u5269\u4e0b\u5de6\u4fa7\u7684\u70b9\u7684\u4f4d\u7f6e\u5750\u6807\r\nprint(ans)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "266/A",
    "problem": "Title: Stones on the Table\n\nThere are n stones on the table in a row, each of them can be red, green or blue. Count the minimum number of stones to take from the table so that any two neighboring stones had different colors. Stones in a row are considered neighboring if there are no other stones between them.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of stones on the table.\n\nThe next line contains string s, which represents the colors of the stones. We'll consider the stones in the row numbered from 1 to n from left to right. Then the i-th character s equals \"R\", if the i-th stone is red, \"G\", if it's green and \"B\", if it's blue.\n\nOutput Format:\nPrint a single integer \u2014 the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n3\nRRG\nOutput:\n1\n\nExample 2:\nInput:\n5\nRRRRR\nOutput:\n4\n\nExample 3:\nInput:\n4\nBRBG\nOutput:\n0",
    "examples": [
      {
        "input": "3\nRRG",
        "output": "1"
      },
      {
        "input": "5\nRRRRR",
        "output": "4"
      },
      {
        "input": "4\nBRBG",
        "output": "0"
      }
    ],
    "solution": "n = input()\nn = int(n)\n\nstones = input()\n\nans = 0\n\nfor i in range(1, n):\n    if stones[i] == stones[i-1]:\n        ans = ans + 1\n\nprint(ans)\n\n\n\t\t  \t  \t\t\t  \t\t  \t\t\t\t\t\t\t \t\t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "277/A",
    "problem": "Title: Learning Languages\n\nThe \"BerCorp\" company has got n employees. These employees can use m approved official languages for the formal correspondence. The languages are numbered with integers from 1 to m. For each employee we have the list of languages, which he knows. This list could be empty, i. e. an employee may know no official languages. But the employees are willing to learn any number of official languages, as long as the company pays their lessons. A study course in one language for one employee costs 1 berdollar.\n\nFind the minimum sum of money the company needs to spend so as any employee could correspond to any other one (their correspondence can be indirect, i. e. other employees can help out translating).\n\nInput Format:\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of employees and the number of languages.\n\nThen n lines follow \u2014 each employee's language list. At the beginning of the i-th line is integer ki (0 \u2264 ki \u2264 m) \u2014 the number of languages the i-th employee knows. Next, the i-th line contains ki integers \u2014 aij (1 \u2264 aij \u2264 m) \u2014 the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\nOutput Format:\nPrint a single integer \u2014 the minimum amount of money to pay so that in the end every employee could write a letter to every other one (other employees can help out translating).\n\nExamples:\nExample 1:\nInput:\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\nOutput:\n0\n\nExample 2:\nInput:\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\nOutput:\n2\n\nExample 3:\nInput:\n2 2\n1 2\n0\nOutput:\n1\n\nNote:\nIn the second sample the employee 1 can learn language 2, and employee 8 can learn language 4.\n\nIn the third sample employee 2 must learn language 2.",
    "examples": [
      {
        "input": "5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5",
        "output": "0"
      },
      {
        "input": "8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1",
        "output": "2"
      },
      {
        "input": "2 2\n1 2\n0",
        "output": "1"
      }
    ],
    "solution": "n,m = map(int,input().split())\r\narr = []\r\nki = False\r\nfor i in range(n):\r\n\ta = list(map(int,input().split()))\r\n\tset_a = set(());\r\n\tfor j in range (a[0]):\r\n\t\tki=True\r\n\t\tset_a.add(a[j+1])\r\n\tarr.append(set_a)\r\nchange = 0\r\nif ki:\r\n\twhile(change!=-1):\r\n\t\tchanged = -1\r\n\t\tchange = -1\r\n\t\tfor i in range(len(arr)):\r\n\t\t\tfor j in range(i+1,len(arr)):\r\n\t\t\t\tfor x in arr[i]:\r\n\t\t\t\t\tif x in arr[j]:\r\n\t\t\t\t\t\tarr[i] = arr[i].union(arr[j])\r\n\t\t\t\t\t\tchanged =j\r\n\t\t\t\t\t\tchange = 1\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\tif (change==1):\r\n\t\t\t\t\tbreak;\r\n\t\t\tif (change==1):\r\n\t\t\t\tbreak;\r\n\t\tif (change==1):\r\n\t\t\tarr.pop(changed)\r\n\tprint(len(arr)-1)\r\nelse:\r\n\tprint(n)\r\n\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "952/A",
    "problem": "Title: Quirky Quantifiers\n\nInput Format:\nThe input contains a single integer a (10 \u2264 a \u2264 999).\n\nOutput Format:\nOutput 0 or 1.\n\nExamples:\nExample 1:\nInput:\n13\nOutput:\n1\n\nExample 2:\nInput:\n927\nOutput:\n1\n\nExample 3:\nInput:\n48\nOutput:\n0",
    "examples": [
      {
        "input": "13",
        "output": "1"
      },
      {
        "input": "927",
        "output": "1"
      },
      {
        "input": "48",
        "output": "0"
      }
    ],
    "solution": "num = int(input())\r\nprint(num%2)\r\n\r\n",
    "explanation": "JAPE riddle generator is a program which can produce question-answer puns. This problem has been inspired by one of the witticisms produced by it:\nWhat do you call a quirky quantifier? An odd number.\nAll you had to do was to check whether the given \"quantifier\" was \"quirky\"."
  },
  {
    "id": "120/A",
    "problem": "Title: Elevator\n\nA sky scraper with 1000 floors has been built in the city of N. It has modern superfast elevators to help to travel from one floor to another. Each elevator has two doors, the front one and the back one. If one goes in through the front door, he goes out through the back one and vice versa. The elevator has two rails numbered with numbers 1 and 2. Rail 1 is located to the left of the entrance to the front door (or correspondingly, to the right of the entrance to the back door). Rail 2 is located opposite it, to the right of the entrance to the front door and to the left of the entrance to the back door. We know that each person in the city of N holds at a rail with the strongest hand.\n\nOne day a VIP person visited the city and of course, he took a look at the skyscraper and took a ride in the elevator. We know the door through which he entered and the rail he was holding at. Now we need to determine as soon as possible whether he is left-handed or right-handed.\n\nInput Format:\nThe first line indicates the door through which the very important person entered the elevator. It contains \"front\" if the person enters the elevator through the front door and \"back\" if he entered the elevator through the back door. The second line contains integer a (1 \u2264 a \u2264 2) which denotes the number of the rail at which the person was holding.\n\nOutput Format:\nPrint character \"R\" if the VIP is right-handed or \"L\" if he is left-handed.\n\nExamples:\nExample 1:\nInput:\nfront\n1\nOutput:\nL",
    "examples": [
      {
        "input": "front\n1",
        "output": "L"
      }
    ],
    "solution": "fi = open('input.txt', 'r')\r\nd, a = fi.readline().strip() == 'front', int(fi.readline()) == 1\r\nprint('L' if d == a else 'R', file=open('output.txt', 'w'))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "214/A",
    "problem": "Title: System of Equations\n\nFurik loves math lessons very much, so he doesn't attend them, unlike Rubik. But now Furik wants to get a good mark for math. For that Ms. Ivanova, his math teacher, gave him a new task. Furik solved the task immediately. Can you?\n\nYou are given a system of equations:\n\nYou should count, how many there are pairs of integers (a, b) (0 \u2264 a, b) which satisfy the system.\n\nInput Format:\nA single line contains two integers n, m (1 \u2264 n, m \u2264 1000) \u2014 the parameters of the system. The numbers on the line are separated by a space.\n\nOutput Format:\nOn a single line print the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n9 3\nOutput:\n1\n\nExample 2:\nInput:\n14 28\nOutput:\n1\n\nExample 3:\nInput:\n4 20\nOutput:\n0\n\nNote:\nIn the first sample the suitable pair is integers (3, 0). In the second sample the suitable pair is integers (3, 5). In the third sample there is no suitable pair.",
    "examples": [
      {
        "input": "9 3",
        "output": "1"
      },
      {
        "input": "14 28",
        "output": "1"
      },
      {
        "input": "4 20",
        "output": "0"
      }
    ],
    "solution": "import sys\nimport math\n\ndef function():\n    n, m = map(int, input().split())\n    ans = 0 \n    for a in range(1001):\n        for b in range(1001):\n            if (a**2) + b == n and a + (b**2) == m:\n                ans+=1\n    print(ans)\n    return\n\n\nif __name__ == '__main__':\n    function()\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "234/A",
    "problem": "Title: Lefthanders and Righthanders\n\nOne fine October day a mathematics teacher Vasily Petrov went to a class and saw there n pupils who sat at the $$\\frac{\\pi}{2}$$ desks, two people at each desk. Vasily quickly realized that number n is even. Like all true mathematicians, Vasily has all students numbered from 1 to n.\n\nBut Vasily Petrov did not like the way the children were seated at the desks. According to him, the students whose numbers differ by 1, can not sit together, as they talk to each other all the time, distract others and misbehave.\n\nOn the other hand, if a righthanded student sits at the left end of the desk and a lefthanded student sits at the right end of the desk, they hit elbows all the time and distract each other. In other cases, the students who sit at the same desk, do not interfere with each other.\n\nVasily knows very well which students are lefthanders and which ones are righthanders, and he asks you to come up with any order that meets these two uncomplicated conditions (students do not talk to each other and do not bump their elbows). It is guaranteed that the input is such that at least one way to seat the students always exists.\n\nInput Format:\nThe first input line contains a single even integer n (4 \u2264 n \u2264 100) \u2014 the number of students in the class. The second line contains exactly n capital English letters \"L\" and \"R\". If the i-th letter at the second line equals \"L\", then the student number i is a lefthander, otherwise he is a righthander.\n\nOutput Format:\nPrint $$\\frac{\\pi}{2}$$ integer pairs, one pair per line. In the i-th line print the numbers of students that will sit at the i-th desk. The first number in the pair stands for the student who is sitting to the left, and the second number stands for the student who is sitting to the right. Separate the numbers in the pairs by spaces. If there are multiple solutions, print any of them.\n\nExamples:\nExample 1:\nInput:\n6\nLLRLLL\nOutput:\n1 4\n2 5\n6 3\n\nExample 2:\nInput:\n4\nRRLL\nOutput:\n3 1\n4 2",
    "examples": [
      {
        "input": "6\nLLRLLL",
        "output": "1 4\n2 5\n6 3"
      },
      {
        "input": "4\nRRLL",
        "output": "3 1\n4 2"
      }
    ],
    "solution": "# a - 1\ninFile=open(\"input.txt\",\"r\")\noutFiles=open(\"output.txt\",\"w\")\nstudents=inFile.readline().strip()\nstudents=int(students)\nseating=inFile.readline().strip()\nhalfstudents=students//2\nfor i in range(halfstudents):\n    if seating[i]==\"L\":\n        outFiles.write(str(i+1) + \" \" + str(i+halfstudents+1)+ \"\\n\")\n    else:\n        outFiles.write(str(i+halfstudents+1) + \" \" + str(i+1) + \"\\n\")\n\t\t  \t    \t \t\t\t \t\t  \t\t  \t\t \t\t\t\t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "13/A",
    "problem": "Title: Numbers\n\nLittle Petya likes numbers a lot. He found that number 123 in base 16 consists of two digits: the first is 7 and the second is 11. So the sum of digits of 123 in base 16 is equal to 18.\n\nNow he wonders what is an average value of sum of digits of the number A written in all bases from 2 to A - 1.\n\nNote that all computations should be done in base 10. You should find the result as an irreducible fraction, written in base 10.\n\nInput Format:\nInput contains one integer number A (3 \u2264 A \u2264 1000).\n\nOutput Format:\nOutput should contain required average value in format \u00abX/Y\u00bb, where X is the numerator and Y is the denominator.\n\nExamples:\nExample 1:\nInput:\n5\nOutput:\n7/3\n\nExample 2:\nInput:\n3\nOutput:\n2/1\n\nNote:\nIn the first sample number 5 written in all bases from 2 to 4 looks so: 101, 12, 11. Sums of digits are 2, 3 and 2, respectively.",
    "examples": [
      {
        "input": "5",
        "output": "7/3"
      },
      {
        "input": "3",
        "output": "2/1"
      }
    ],
    "solution": "N = int(input())\r\ns = 0\r\n\r\ndef gcd(a, b):\r\n    while(b):\r\n        a, b = b, a%b\r\n    return a\r\n\r\nfor i in range(2, N):\r\n    n = N\r\n    while(n>0):\r\n        s += n%i\r\n        n = n//i\r\n\r\nt = gcd(s, N-2)\r\nprint(str(s//t)+\"/\"+str((N-2)//t))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "618/A",
    "problem": "Title: Slime Combining\n\nYour friend recently gave you some slimes for your birthday. You have n slimes all initially with value 1.\n\nYou are going to play a game with these slimes. Initially, you put a single slime by itself in a row. Then, you will add the other n - 1 slimes one by one. When you add a slime, you place it at the right of all already placed slimes. Then, while the last two slimes in the row have the same value v, you combine them together to create a slime with value v + 1.\n\nYou would like to see what the final state of the row is after you've added all n slimes. Please print the values of the slimes in the row from left to right.\n\nInput Format:\nThe first line of the input will contain a single integer, n (1 \u2264 n \u2264 100 000).\n\nOutput Format:\nOutput a single line with k integers, where k is the number of slimes in the row after you've finished the procedure described in the problem statement. The i-th of these numbers should be the value of the i-th slime from the left.\n\nExamples:\nExample 1:\nInput:\n1\nOutput:\n1\n\nExample 2:\nInput:\n2\nOutput:\n2\n\nExample 3:\nInput:\n3\nOutput:\n2 1\n\nExample 4:\nInput:\n8\nOutput:\n4\n\nNote:\nIn the first sample, we only have a single slime with value 1. The final state of the board is just a single slime with value 1.\n\nIn the second sample, we perform the following steps:\n\nInitially we place a single slime in a row by itself. Thus, row is initially 1.\n\nThen, we will add another slime. The row is now 1 1. Since two rightmost slimes have the same values, we should replace these slimes with one with value 2. Thus, the final state of the board is 2.\n\nIn the third sample, after adding the first two slimes, our row is 2. After adding one more slime, the row becomes 2 1.\n\nIn the last sample, the steps look as follows:\n\n1. 1\n2. 2\n3. 2 1\n4. 3\n5. 3 1\n6. 3 2\n7. 3 2 1\n8. 4",
    "examples": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "2",
        "output": "2"
      },
      {
        "input": "3",
        "output": "2 1"
      },
      {
        "input": "8",
        "output": "4"
      }
    ],
    "solution": "N = int(input())\r\nans = []\r\ni = 0\r\n\r\nwhile N >> i:\r\n    if (N >> i) & 1:\r\n        ans.append(i + 1)\r\n    i += 1\r\n    \r\nprint(*ans[::-1])",
    "explanation": "Answer is index of 1 bits in binary representation of n. You can also simulate this."
  },
  {
    "id": "328/A",
    "problem": "Title: IQ Test\n\nPetya is preparing for IQ test and he has noticed that there many problems like: you are given a sequence, find the next number. Now Petya can solve only problems with arithmetic or geometric progressions.\n\nArithmetic progression is a sequence a1, a1 + d, a1 + 2d, ..., a1 + (n - 1)d, where a1 and d are any numbers.\n\nGeometric progression is a sequence b1, b2 = b1q, ..., bn = bn - 1q, where b1 \u2260 0, q \u2260 0, q \u2260 1.\n\nHelp Petya and write a program to determine if the given sequence is arithmetic or geometric. Also it should found the next number. If the sequence is neither arithmetic nor geometric, print 42 (he thinks it is impossible to find better answer). You should also print 42 if the next element of progression is not integer. So answer is always integer.\n\nInput Format:\nThe first line contains exactly four integer numbers between 1 and 1000, inclusively.\n\nOutput Format:\nPrint the required number. If the given sequence is arithmetic progression, print the next progression element. Similarly, if the given sequence is geometric progression, print the next progression element.\n\nPrint 42 if the given sequence is not an arithmetic or geometric progression.\n\nExamples:\nExample 1:\nInput:\n836 624 412 200\nOutput:\n-12\n\nExample 2:\nInput:\n1 334 667 1000\nOutput:\n1333\n\nNote:\nThis problem contains very weak pretests!",
    "examples": [
      {
        "input": "836 624 412 200",
        "output": "-12"
      },
      {
        "input": "1 334 667 1000",
        "output": "1333"
      }
    ],
    "solution": "a = list(map(int, input().split()))\r\n\r\nif a[0] > a[-1] and a[0]/a[1] == a[1]/a[2] and a[1]/a[2] == a[2]/a[3]:\r\n    print(int(a[-1]/(a[0]/a[1]) if int(a[-1]/(a[0]/a[1])) == (a[-1]/(a[0]/a[1])) else 42))\r\n\r\nelif a[-1] > a[0] and a[1]/a[0] == a[2]/a[1] and a[2]/a[1] == a[3]/a[2]:\r\n    print(int(a[-1]*(a[1]/a[0]) if int(a[-1]*(a[1]/a[0])) == (a[-1]*(a[1]/a[0])) else 42))\r\nelif abs(a[0] - a[1]) == abs(a[1] - a[2]) == abs(a[2] - a[3]):\r\n    print(a[-1] - abs(a[0] - a[1]) if a[0] > a[1] else a[-1] + abs(a[0] - a[1]))\r\nelse:\r\n    print(42)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "580/A",
    "problem": "Title: Kefa and First Steps\n\nKefa decided to make some money doing business on the Internet for exactly n days. He knows that on the i-th day (1 \u2264 i \u2264 n) he makes ai money. Kefa loves progress, that's why he wants to know the length of the maximum non-decreasing subsegment in sequence ai. Let us remind you that the subsegment of the sequence is its continuous fragment. A subsegment of numbers is called non-decreasing if all numbers in it follow in the non-decreasing order.\n\nHelp Kefa cope with this task!\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 105).\n\nThe second line contains n integers a1,  a2,  ...,  an (1 \u2264 ai \u2264 109).\n\nOutput Format:\nPrint a single integer \u2014 the length of the maximum non-decreasing subsegment of sequence a.\n\nExamples:\nExample 1:\nInput:\n6\n2 2 1 3 4 1\nOutput:\n3\n\nExample 2:\nInput:\n3\n2 2 9\nOutput:\n3\n\nNote:\nIn the first test the maximum non-decreasing subsegment is the numbers from the third to the fifth one.\n\nIn the second test the maximum non-decreasing subsegment is the numbers from the first to the third one.",
    "examples": [
      {
        "input": "6\n2 2 1 3 4 1",
        "output": "3"
      },
      {
        "input": "3\n2 2 9",
        "output": "3"
      }
    ],
    "solution": "n=int(input())\r\nr=input()\r\ns=r.split(\" \")\r\na=[]\r\nfor i in s:\r\n    a.append(int(i))\r\ni=0;maxi=1;num=1\r\nwhile i<n-1:\r\n    if a[i]<=a[i+1]:\r\n        num+=1\r\n        if num>maxi:\r\n            maxi=num\r\n    else:\r\n        num=1\r\n    i+=1\r\nprint(maxi)",
    "explanation": "\u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435 \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0442\u043e \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432 \u043e\u0434\u043d\u0443. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e. \u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e i-\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e, \u0438\u043d\u0430\u0447\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e. \u041e\u0442\u0432\u0435\u0442\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0438\u0437 \u0432\u0441\u0435\u0445 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439.\n\u0410\u0441\u0438\u043c\u043f\u0442\u043e\u0442\u0438\u043a\u0430 \u2014 O(n)."
  },
  {
    "id": "548/A",
    "problem": "Title: Mike and Fax\n\nWhile Mike was walking in the subway, all the stuff in his back-bag dropped on the ground. There were several fax messages among them. He concatenated these strings in some order and now he has string s.\n\nHe is not sure if this is his own back-bag or someone else's. He remembered that there were exactly k messages in his own bag, each was a palindrome string and all those strings had the same length.\n\nHe asked you to help him and tell him if he has worn his own back-bag. Check if the given string s is a concatenation of k palindromes of the same length.\n\nInput Format:\nThe first line of input contains string s containing lowercase English letters (1 \u2264 |s| \u2264 1000).\n\nThe second line contains integer k (1 \u2264 k \u2264 1000).\n\nOutput Format:\nPrint \"YES\"(without quotes) if he has worn his own back-bag or \"NO\"(without quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\nsaba\n2\nOutput:\nNO\n\nExample 2:\nInput:\nsaddastavvat\n2\nOutput:\nYES\n\nNote:\nPalindrome is a string reading the same forward and backward.\n\nIn the second sample, the faxes in his back-bag can be \"saddas\" and \"tavvat\".",
    "examples": [
      {
        "input": "saba\n2",
        "output": "NO"
      },
      {
        "input": "saddastavvat\n2",
        "output": "YES"
      }
    ],
    "solution": "string = input()\r\npartskitnekarnehai = int(input())\r\nif len(string)%partskitnekarnehai!=0:\r\n    print('NO')\r\n    exit()\r\n\r\nnayalength = len(string) // partskitnekarnehai\r\n\r\n# o is length of part\r\nfor j in range(partskitnekarnehai):\r\n    seedha_part = string[ j*nayalength : (j + 1)*nayalength]\r\n    # print(seedha_part)\r\n    ulta_part=reversed(seedha_part)\r\n    # print(\"\".join(ulta_part))\r\n    if seedha_part != \"\".join(ulta_part):\r\n        print(\"NO\") \r\n        exit()\r\nprint(\"YES\")\r\n\r\n'''\r\nhttps://codeforces.com/problemset/problem/548/A\r\n1. Aaj exit() seekha, kaafi useful, i always thought agar aise kuch \r\nkarna hai to i'll have to define a function, fir use return to get\r\nout of the code.\r\n4. Abe yaar mai bhi kya gadha hu, like agar NO hai answer, \r\nto exit karna chahiye, i exited on YES wala case\r\n3. Are bhai yaaar wo sabse upar wala block mai bhool hi gaya tha,\r\ngahdam ek aur wrong submission\r\n2. Also line 7 me agar -1 kia to it only check first part of string\r\n'''",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "687/A",
    "problem": "Title: NP-Hard Problem\n\nRecently, Pari and Arya did some research about NP-Hard problems and they found the minimum vertex cover problem very interesting.\n\nSuppose the graph G is given. Subset A of its vertices is called a vertex cover of this graph, if for each edge uv there is at least one endpoint of it in this set, i.e. $$u \\in A$$ or $$v \\in A$$ (or both).\n\nPari and Arya have won a great undirected graph as an award in a team contest. Now they have to split it in two parts, but both of them want their parts of the graph to be a vertex cover.\n\nThey have agreed to give you their graph and you need to find two disjoint subsets of its vertices A and B, such that both A and B are vertex cover or claim it's impossible. Each vertex should be given to no more than one of the friends (or you can even keep it for yourself).\n\nInput Format:\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of vertices and the number of edges in the prize graph, respectively.\n\nEach of the next m lines contains a pair of integers ui and vi (1  \u2264  ui,  vi  \u2264  n), denoting an undirected edge between ui and vi. It's guaranteed the graph won't contain any self-loops or multiple edges.\n\nOutput Format:\nIf it's impossible to split the graph between Pari and Arya as they expect, print \"-1\" (without quotes).\n\nIf there are two disjoint sets of vertices, such that both sets are vertex cover, print their descriptions. Each description must contain two lines. The first line contains a single integer k denoting the number of vertices in that vertex cover, and the second line contains k integers\u00a0\u2014 the indices of vertices. Note that because of m \u2265 1, vertex cover cannot be empty.\n\nExamples:\nExample 1:\nInput:\n4 2\n1 2\n2 3\nOutput:\n1\n2\n2\n1 3\n\nExample 2:\nInput:\n3 3\n1 2\n2 3\n1 3\nOutput:\n-1\n\nNote:\nIn the first sample, you can give the vertex number 2 to Arya and vertices numbered 1 and 3 to Pari and keep vertex number 4 for yourself (or give it someone, if you wish).\n\nIn the second sample, there is no way to satisfy both Pari and Arya.",
    "examples": [
      {
        "input": "4 2\n1 2\n2 3",
        "output": "1\n2\n2\n1 3"
      },
      {
        "input": "3 3\n1 2\n2 3\n1 3",
        "output": "-1"
      }
    ],
    "solution": "n,m = list(map(int,input().split()))\r\ngraph = [[]for _ in range(n)]\r\ncolor = [0]*n\r\nfor i in range(m):\r\n    a,b = list(map(int,input().split()))\r\n    graph[a-1].append(b-1)\r\n    graph[b-1].append(a-1)\r\nfor i in range(n):\r\n    if color[i]:\r\n        continue\r\n    color[i] = 1\r\n    queue = [i]\r\n    while queue:\r\n        u = queue.pop()\r\n        for v in graph[u]:\r\n            if color[v]:\r\n                if color[v]==color[u]:\r\n                    print(-1)\r\n                    exit(0)\r\n            else:\r\n                color[v] = 3-color[u]\r\n                queue.append(v)\r\narr1 = []\r\narr2 = []\r\nfor i in range(len(color)):\r\n    if color[i]==1:\r\n        arr1.append(i+1)\r\n    else:\r\n        arr2.append(i+1)\r\nprint(len(arr1))\r\nprint(*arr1)\r\nprint(len(arr2))\r\nprint(*arr2)",
    "explanation": "If the graph isn't bipartite the answer is -1, otherwise you can give each part as a vertex cover."
  },
  {
    "id": "259/A",
    "problem": "Title: Little Elephant and Chess\n\nThe Little Elephant loves chess very much.\n\nOne day the Little Elephant and his friend decided to play chess. They've got the chess pieces but the board is a problem. They've got an 8 \u00d7 8 checkered board, each square is painted either black or white. The Little Elephant and his friend know that a proper chessboard doesn't have any side-adjacent cells with the same color and the upper left cell is white. To play chess, they want to make the board they have a proper chessboard. For that the friends can choose any row of the board and cyclically shift the cells of the chosen row, that is, put the last (rightmost) square on the first place in the row and shift the others one position to the right. You can run the described operation multiple times (or not run it at all).\n\nFor example, if the first line of the board looks like that \"BBBBBBWW\" (the white cells of the line are marked with character \"W\", the black cells are marked with character \"B\"), then after one cyclic shift it will look like that \"WBBBBBBW\".\n\nHelp the Little Elephant and his friend to find out whether they can use any number of the described operations to turn the board they have into a proper chessboard.\n\nInput Format:\nThe input consists of exactly eight lines. Each line contains exactly eight characters \"W\" or \"B\" without any spaces: the j-th character in the i-th line stands for the color of the j-th cell of the i-th row of the elephants' board. Character \"W\" stands for the white color, character \"B\" stands for the black color.\n\nConsider the rows of the board numbered from 1 to 8 from top to bottom, and the columns \u2014 from 1 to 8 from left to right. The given board can initially be a proper chessboard.\n\nOutput Format:\nIn a single line print \"YES\" (without the quotes), if we can make the board a proper chessboard and \"NO\" (without the quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\nWBWBWBWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\nOutput:\nYES\n\nExample 2:\nInput:\nWBWBWBWB\nWBWBWBWB\nBBWBWWWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWWW\nBWBWBWBW\nBWBWBWBW\nOutput:\nNO\n\nNote:\nIn the first sample you should shift the following lines one position to the right: the 3-rd, the 6-th, the 7-th and the 8-th.\n\nIn the second sample there is no way you can achieve the goal.",
    "examples": [
      {
        "input": "WBWBWBWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWBW\nWBWBWBWB\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB",
        "output": "YES"
      },
      {
        "input": "WBWBWBWB\nWBWBWBWB\nBBWBWWWB\nBWBWBWBW\nBWBWBWBW\nBWBWBWWW\nBWBWBWBW\nBWBWBWBW",
        "output": "NO"
      }
    ],
    "solution": "ans = 'YES'\r\n\r\nfor _ in range(8):\r\n    line = input()\r\n    \r\n    for i in range(7):\r\n        if line[i] == line[i+1]:\r\n            ans = 'NO'\r\n            break\r\n\r\nprint(ans) ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "798/A",
    "problem": "Title: Mike and palindrome\n\nMike has a string s consisting of only lowercase English letters. He wants to change exactly one character from the string so that the resulting one is a palindrome.\n\nA palindrome is a string that reads the same backward as forward, for example strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, but strings \"codeforces\", \"reality\", \"ab\" are not.\n\nInput Format:\nThe first and single line contains string s (1 \u2264 |s| \u2264 15).\n\nOutput Format:\nPrint \"YES\" (without quotes) if Mike can change exactly one character so that the resulting string is palindrome or \"NO\" (without quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\nabccaa\nOutput:\nYES\n\nExample 2:\nInput:\nabbcca\nOutput:\nNO\n\nExample 3:\nInput:\nabcda\nOutput:\nYES",
    "examples": [
      {
        "input": "abccaa",
        "output": "YES"
      },
      {
        "input": "abbcca",
        "output": "NO"
      },
      {
        "input": "abcda",
        "output": "YES"
      }
    ],
    "solution": "text=input()\r\nn=len(text)\r\nc=0\r\nfor i in range(n):\r\n    if text[i]!=text[n-i-1]:\r\n        c=c+1\r\nif (n%2==0):\r\n    if(c==2):\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")\r\nelif(n%2==1):\r\n    if (c==2 or c==0):\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")",
    "explanation": "Let cnt be the number of $$1 \\leq i \\leq \\frac{n}{2}$$ such that si\u2009\u2260\u2009sn\u2009-\u2009i\u2009+\u20091.\nIf cnt\u2009\u2265\u20092 then the answer is \"NO\" since we must change more than 1 character.\nIf cnt\u2009=\u20091 then the answer is \"YES\".\nIf cnt\u2009=\u20090 and n is odd answer is \"YES\" since we can change the character in the middle otherwise if n is even the answer is \"NO\".\nComplexity is O(|s|)."
  },
  {
    "id": "832/A",
    "problem": "Title: Sasha and Sticks\n\nIt's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\nInput Format:\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 1018, k \u2264 n)\u00a0\u2014 the number of sticks drawn by Sasha and the number k\u00a0\u2014 the number of sticks to be crossed out on each turn.\n\nOutput Format:\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\nExamples:\nExample 1:\nInput:\n1 1\nOutput:\nYES\n\nExample 2:\nInput:\n10 4\nOutput:\nNO\n\nNote:\nIn the first example Sasha crosses out 1 stick, and then there are no sticks. So Lena can't make a move, and Sasha wins.\n\nIn the second example Sasha crosses out 4 sticks, then Lena crosses out 4 sticks, and after that there are only 2 sticks left. Sasha can't make a move. The players make equal number of moves, so Sasha doesn't win.",
    "examples": [
      {
        "input": "1 1",
        "output": "YES"
      },
      {
        "input": "10 4",
        "output": "NO"
      }
    ],
    "solution": "h,k=[int(i) for i in input().split()]\r\nif ((h//k)%2!=0):\r\n    print('yes')\r\nif ((h//k)%2==0):\r\n    print('no')",
    "explanation": "Note, that it's not important from which side sticks are being crossing out. Players will make summary $$\\left[\\frac{n}{k}\\right]$$ turns. If this number is odd, Sasha made 1 more turn than Lena and won. Otherwise, Sasha and Lena made same number of turns and Sasha didn't win."
  },
  {
    "id": "89/A",
    "problem": "Title: Robbery\n\nIt is nighttime and Joe the Elusive got into the country's main bank's safe. The safe has n cells positioned in a row, each of them contains some amount of diamonds. Let's make the problem more comfortable to work with and mark the cells with positive numbers from 1 to n from the left to the right.\n\nUnfortunately, Joe didn't switch the last security system off. On the plus side, he knows the way it works.\n\nEvery minute the security system calculates the total amount of diamonds for each two adjacent cells (for the cells between whose numbers difference equals 1). As a result of this check we get an n - 1 sums. If at least one of the sums differs from the corresponding sum received during the previous check, then the security system is triggered.\n\nJoe can move the diamonds from one cell to another between the security system's checks. He manages to move them no more than m times between two checks. One of the three following operations is regarded as moving a diamond: moving a diamond from any cell to any other one, moving a diamond from any cell to Joe's pocket, moving a diamond from Joe's pocket to any cell. Initially Joe's pocket is empty, and it can carry an unlimited amount of diamonds. It is considered that before all Joe's actions the system performs at least one check.\n\nIn the morning the bank employees will come, which is why Joe has to leave the bank before that moment. Joe has only k minutes left before morning, and on each of these k minutes he can perform no more than m operations. All that remains in Joe's pocket, is considered his loot.\n\nCalculate the largest amount of diamonds Joe can carry with him. Don't forget that the security system shouldn't be triggered (even after Joe leaves the bank) and Joe should leave before morning.\n\nInput Format:\nThe first line contains integers n, m and k (1 \u2264 n \u2264 104, 1 \u2264 m, k \u2264 109). The next line contains n numbers. The i-th number is equal to the amount of diamonds in the i-th cell \u2014 it is an integer from 0 to 105.\n\nOutput Format:\nPrint a single number \u2014 the maximum number of diamonds Joe can steal.\n\nExamples:\nExample 1:\nInput:\n2 3 1\n2 3\nOutput:\n0\n\nExample 2:\nInput:\n3 2 2\n4 1 3\nOutput:\n2\n\nNote:\nIn the second sample Joe can act like this:\n\nThe diamonds' initial positions are 4 1 3.\n\nDuring the first period of time Joe moves a diamond from the 1-th cell to the 2-th one and a diamond from the 3-th cell to his pocket.\n\nBy the end of the first period the diamonds' positions are 3 2 2. The check finds no difference and the security system doesn't go off.\n\nDuring the second period Joe moves a diamond from the 3-rd cell to the 2-nd one and puts a diamond from the 1-st cell to his pocket.\n\nBy the end of the second period the diamonds' positions are 2 3 1. The check finds no difference again and the security system doesn't go off.\n\nNow Joe leaves with 2 diamonds in his pocket.",
    "examples": [
      {
        "input": "2 3 1\n2 3",
        "output": "0"
      },
      {
        "input": "3 2 2\n4 1 3",
        "output": "2"
      }
    ],
    "solution": "z=lambda: list(map(int,input().split()))\r\nn,m,k=z()\r\nprint(n%2*min(m//(n//2+1)*k, *z()[::2]))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "353/A",
    "problem": "Title: Domino\n\nValera has got n domino pieces in a row. Each piece consists of two halves \u2014 the upper one and the lower one. Each of the halves contains a number from 1 to 6. Valera loves even integers very much, so he wants the sum of the numbers on the upper halves and the sum of the numbers on the lower halves to be even.\n\nTo do that, Valera can rotate the dominoes by 180 degrees. After the rotation the upper and the lower halves swap places. This action takes one second. Help Valera find out the minimum time he must spend rotating dominoes to make his wish come true.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 100), denoting the number of dominoes Valera has. Next n lines contain two space-separated integers xi, yi (1 \u2264 xi, yi \u2264 6). Number xi is initially written on the upper half of the i-th domino, yi is initially written on the lower half.\n\nOutput Format:\nPrint a single number \u2014 the minimum required number of seconds. If Valera can't do the task in any time, print  - 1.\n\nExamples:\nExample 1:\nInput:\n2\n4 2\n6 4\nOutput:\n0\n\nExample 2:\nInput:\n1\n2 3\nOutput:\n-1\n\nExample 3:\nInput:\n3\n1 4\n2 3\n4 4\nOutput:\n1\n\nNote:\nIn the first test case the sum of the numbers on the upper halves equals 10 and the sum of the numbers on the lower halves equals 6. Both numbers are even, so Valera doesn't required to do anything.\n\nIn the second sample Valera has only one piece of domino. It is written 3 on the one of its halves, therefore one of the sums will always be odd.\n\nIn the third case Valera can rotate the first piece, and after that the sum on the upper halves will be equal to 10, and the sum on the lower halves will be equal to 8.",
    "examples": [
      {
        "input": "2\n4 2\n6 4",
        "output": "0"
      },
      {
        "input": "1\n2 3",
        "output": "-1"
      },
      {
        "input": "3\n1 4\n2 3\n4 4",
        "output": "1"
      }
    ],
    "solution": "n = int(input())\r\ncnt=0\r\nsl=0\r\nsr=0\r\nfor i in range(n):\r\n    x,y = map(int,input().split())\r\n    sl=sl+x\r\n    sr+=y\r\n    if x%2!=y%2:\r\n        cnt=cnt+1\r\nif (sl+sr)%2==1:\r\n    print(-1)\r\nelse:\r\n    if sl%2==0:\r\n        print(0)\r\n    else:\r\n        if cnt>0:\r\n            print(1)\r\n        else:\r\n            print(-1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "760/A",
    "problem": "Title: Petr and a calendar\n\nPetr wants to make a calendar for current month. For this purpose he draws a table in which columns correspond to weeks (a week is seven consequent days from Monday to Sunday), rows correspond to weekdays, and cells contain dates. For example, a calendar for January 2017 should look like on the picture:\n\nPetr wants to know how many columns his table should have given the month and the weekday of the first date of that month? Assume that the year is non-leap.\n\nInput Format:\nThe only line contain two integers m and d (1 \u2264 m \u2264 12, 1 \u2264 d \u2264 7)\u00a0\u2014 the number of month (January is the first month, December is the twelfth) and the weekday of the first date of this month (1 is Monday, 7 is Sunday).\n\nOutput Format:\nPrint single integer: the number of columns the table should have.\n\nExamples:\nExample 1:\nInput:\n1 7\nOutput:\n6\n\nExample 2:\nInput:\n1 1\nOutput:\n5\n\nExample 3:\nInput:\n11 6\nOutput:\n5\n\nNote:\nThe first example corresponds to the January 2017 shown on the picture in the statements.\n\nIn the second example 1-st January is Monday, so the whole month fits into 5 columns.\n\nIn the third example 1-st November is Saturday and 5 columns is enough.",
    "examples": [
      {
        "input": "1 7",
        "output": "6"
      },
      {
        "input": "1 1",
        "output": "5"
      },
      {
        "input": "11 6",
        "output": "5"
      }
    ],
    "solution": "import math\r\nm, d = map(int, input().split())\r\na = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\r\nprint(math.ceil((a[m-1]+d-1)/7))\r\n",
    "explanation": "Just implement writing dates one by one and keeping current column and row, or use the formula answer\u2009=\u2009((d\u2009-\u20091)\u2009+\u2009ndays\u2009-\u20091)\u2009/\u20097\u2009+\u20091, where ndays is the number of days in the month."
  },
  {
    "id": "389/A",
    "problem": "Title: Fox and Number Game\n\nFox Ciel is playing a game with numbers now.\n\nCiel has n positive integers: x1, x2, ..., xn. She can do the following operation as many times as needed: select two different indexes i and j such that xi > xj hold, and then apply assignment xi = xi - xj. The goal is to make the sum of all numbers as small as possible.\n\nPlease help Ciel to find this minimal sum.\n\nInput Format:\nThe first line contains an integer n (2 \u2264 n \u2264 100). Then the second line contains n integers: x1, x2, ..., xn (1 \u2264 xi \u2264 100).\n\nOutput Format:\nOutput a single integer \u2014 the required minimal sum.\n\nExamples:\nExample 1:\nInput:\n2\n1 2\nOutput:\n2\n\nExample 2:\nInput:\n3\n2 4 6\nOutput:\n6\n\nExample 3:\nInput:\n2\n12 18\nOutput:\n12\n\nExample 4:\nInput:\n5\n45 12 27 30 18\nOutput:\n15\n\nNote:\nIn the first example the optimal way is to do the assignment: x2 = x2 - x1.\n\nIn the second example the optimal sequence of operations is: x3 = x3 - x2, x2 = x2 - x1.",
    "examples": [
      {
        "input": "2\n1 2",
        "output": "2"
      },
      {
        "input": "3\n2 4 6",
        "output": "6"
      },
      {
        "input": "2\n12 18",
        "output": "12"
      },
      {
        "input": "5\n45 12 27 30 18",
        "output": "15"
      }
    ],
    "solution": "import fractions\n\n\nN = int(input())\nX = list(map(int, input().split()))\nnow = fractions.gcd(X[0], X[1])\nfor i in range(2, N):\n    now = fractions.gcd(now, X[i])\n\nans = now * N\nprint(ans)\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "980/A",
    "problem": "Title: Links and Pearls\n\nA necklace can be described as a string of links ('-') and pearls ('o'), with the last link or pearl connected to the first one.\n\nYou can remove a link or a pearl and insert it between two other existing links or pearls (or between a link and a pearl) on the necklace. This process can be repeated as many times as you like, but you can't throw away any parts.\n\nCan you make the number of links between every two adjacent pearls equal? Two pearls are considered to be adjacent if there is no other pearl between them.\n\nNote that the final necklace should remain as one circular part of the same length as the initial necklace.\n\nInput Format:\nThe only line of input contains a string $$$s$$$ ($$$3 \\leq |s| \\leq 100$$$), representing the necklace, where a dash '-' represents a link and the lowercase English letter 'o' represents a pearl.\n\nOutput Format:\nPrint \"YES\" if the links and pearls can be rejoined such that the number of links between adjacent pearls is equal. Otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\nExamples:\nExample 1:\nInput:\n-o-o--\nOutput:\nYES\n\nExample 2:\nInput:\n-o---\nOutput:\nYES\n\nExample 3:\nInput:\n-o---o-\nOutput:\nNO\n\nExample 4:\nInput:\nooo\nOutput:\nYES",
    "examples": [
      {
        "input": "-o-o--",
        "output": "YES"
      },
      {
        "input": "-o---",
        "output": "YES"
      },
      {
        "input": "-o---o-",
        "output": "NO"
      },
      {
        "input": "ooo",
        "output": "YES"
      }
    ],
    "solution": "s = [x for x in input().lower()]\r\nb = s.count('o')\r\nv = s.count('-')\r\nif b == 0 or v % b == 0:\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n",
    "explanation": "The problem can be viewed as the following:\nYou have a cyclic array with the characters '-' and 'o', you want to rearrange the elements of the array such that the number of '-' characters after every 'o' character is the same.\nSo we want to distribute the '-' characters over the 'o' characters so that all the 'o' characters have the same number of '-' characters after them.\nIf we have $$$a$$$ of 'o' and $$$b$$$ of '-', then that can be done if and only if $$$b \\bmod a = 0$$$. When $$$a = 0$$$, the answer is YES since the condition still holds."
  },
  {
    "id": "496/A",
    "problem": "Title: Minimum Difficulty\n\nMike is trying rock climbing but he is awful at it.\n\nThere are n holds on the wall, i-th hold is at height ai off the ground. Besides, let the sequence ai increase, that is, ai < ai + 1 for all i from 1 to n - 1; we will call such sequence a track. Mike thinks that the track a1, ..., an has difficulty $$d = \\max_{1 \\leq i \\leq n-1} (a_{i+1} - a_i)$$. In other words, difficulty equals the maximum distance between two holds that are adjacent in height.\n\nToday Mike decided to cover the track with holds hanging on heights a1, ..., an. To make the problem harder, Mike decided to remove one hold, that is, remove one element of the sequence (for example, if we take the sequence (1, 2, 3, 4, 5) and remove the third element from it, we obtain the sequence (1, 2, 4, 5)). However, as Mike is awful at climbing, he wants the final difficulty (i.e. the maximum difference of heights between adjacent holds after removing the hold) to be as small as possible among all possible options of removing a hold. The first and last holds must stay at their positions.\n\nHelp Mike determine the minimum difficulty of the track after removing one hold.\n\nInput Format:\nThe first line contains a single integer n (3 \u2264 n \u2264 100)\u00a0\u2014 the number of holds.\n\nThe next line contains n space-separated integers ai (1 \u2264 ai \u2264 1000), where ai is the height where the hold number i hangs. The sequence ai is increasing (i.e. each element except for the first one is strictly larger than the previous one).\n\nOutput Format:\nPrint a single number \u2014 the minimum difficulty of the track after removing a single hold.\n\nExamples:\nExample 1:\nInput:\n3\n1 4 6\nOutput:\n5\n\nExample 2:\nInput:\n5\n1 2 3 4 5\nOutput:\n2\n\nExample 3:\nInput:\n5\n1 2 3 7 8\nOutput:\n4\n\nNote:\nIn the first sample you can remove only the second hold, then the sequence looks like (1, 6), the maximum difference of the neighboring elements equals 5.\n\nIn the second test after removing every hold the difficulty equals 2.\n\nIn the third test you can obtain sequences (1, 3, 7, 8), (1, 2, 7, 8), (1, 2, 3, 8), for which the difficulty is 4, 5 and 5, respectively. Thus, after removing the second element we obtain the optimal answer \u2014 4.",
    "examples": [
      {
        "input": "3\n1 4 6",
        "output": "5"
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "2"
      },
      {
        "input": "5\n1 2 3 7 8",
        "output": "4"
      }
    ],
    "solution": "n = int(input())\r\n\r\nl = list(map(int,input().split()))\r\nm = 0\r\nfor i in range(0,n-1):\r\n  m = max(m,l[i+1]-l[i])\r\n\r\na = 10000\r\nfor i in range(1,n-1):\r\n    \r\n  a = min(a,l[i+1]-l[i-1])\r\n  \r\nprint([m,a][m<a])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "670/A",
    "problem": "Title: Holidays\n\nOn the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings\u00a0\u2014 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.\n\nInput Format:\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 1 000 000)\u00a0\u2014 the number of days in a year on Mars.\n\nOutput Format:\nPrint two integers\u00a0\u2014 the minimum possible and the maximum possible number of days off per year on Mars.\n\nExamples:\nExample 1:\nInput:\n14\nOutput:\n4 4\n\nExample 2:\nInput:\n2\nOutput:\n0 2\n\nNote:\nIn the first sample there are 14 days in a year on Mars, and therefore independently of the day a year starts with there will be exactly 4 days off .\n\nIn the second sample there are only 2 days in a year on Mars, and they can both be either work days or days off.",
    "examples": [
      {
        "input": "14",
        "output": "4 4"
      },
      {
        "input": "2",
        "output": "0 2"
      }
    ],
    "solution": "w,e=divmod(int(input()),7)\nprint(w*2+int(e==6),w*2+min(e,2))\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "465/A",
    "problem": "Title: inc ARG\n\nSergey is testing a next-generation processor. Instead of bytes the processor works with memory cells consisting of n bits. These bits are numbered from 1 to n. An integer is stored in the cell in the following way: the least significant bit is stored in the first bit of the cell, the next significant bit is stored in the second bit, and so on; the most significant bit is stored in the n-th bit.\n\nNow Sergey wants to test the following instruction: \"add 1 to the value of the cell\". As a result of the instruction, the integer that is written in the cell must be increased by one; if some of the most significant bits of the resulting number do not fit into the cell, they must be discarded.\n\nSergey wrote certain values \u200b\u200bof the bits in the cell and is going to add one to its value. How many bits of the cell will change after the operation?\n\nInput Format:\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of bits in the cell.\n\nThe second line contains a string consisting of n characters \u2014 the initial state of the cell. The first character denotes the state of the first bit of the cell. The second character denotes the second least significant bit and so on. The last character denotes the state of the most significant bit.\n\nOutput Format:\nPrint a single integer \u2014 the number of bits in the cell which change their state after we add 1 to the cell.\n\nExamples:\nExample 1:\nInput:\n4\n1100\nOutput:\n3\n\nExample 2:\nInput:\n4\n1111\nOutput:\n4\n\nNote:\nIn the first sample the cell ends up with value 0010, in the second sample \u2014 with 0000.",
    "examples": [
      {
        "input": "4\n1100",
        "output": "3"
      },
      {
        "input": "4\n1111",
        "output": "4"
      }
    ],
    "solution": "n = int(input())\r\ns = (input())\r\n\r\nnum = (s[::-1])\r\nans = 0\r\nrem = 1\r\nwhile num:\r\n    x = int(num)%10\r\n    num = num[:-1]\r\n    \r\n    if x==1 and rem==1:\r\n        ans+=1\r\n        rem = 1\r\n        \r\n    elif x==0 and rem==1:\r\n        ans += 1\r\n        rem = 0\r\n        \r\n    else:\r\n        rem = 0\r\n        \r\nprint(ans)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "63/A",
    "problem": "Title: Sinking Ship\n\nThe ship crashed into a reef and is sinking. Now the entire crew must be evacuated. All n crew members have already lined up in a row (for convenience let's label them all from left to right with positive integers from 1 to n) and await further instructions. However, one should evacuate the crew properly, in a strict order. Specifically:\n\nThe first crew members to leave the ship are rats. Then women and children (both groups have the same priority) leave the ship. After that all men are evacuated from the ship. The captain leaves the sinking ship last.\n\nIf we cannot determine exactly who should leave the ship first for any two members of the crew by the rules from the previous paragraph, then the one who stands to the left in the line leaves the ship first (or in other words, the one whose number in the line is less).\n\nFor each crew member we know his status as a crew member, and also his name. All crew members have different names. Determine the order in which to evacuate the crew.\n\nInput Format:\nThe first line contains an integer n, which is the number of people in the crew (1 \u2264 n \u2264 100). Then follow n lines. The i-th of those lines contains two words \u2014 the name of the crew member who is i-th in line, and his status on the ship. The words are separated by exactly one space. There are no other spaces in the line. The names consist of Latin letters, the first letter is uppercase, the rest are lowercase. The length of any name is from 1 to 10 characters. The status can have the following values: rat for a rat, woman for a woman, child for a child, man for a man, captain for the captain. The crew contains exactly one captain.\n\nOutput Format:\nPrint n lines. The i-th of them should contain the name of the crew member who must be the i-th one to leave the ship.\n\nExamples:\nExample 1:\nInput:\n6\nJack captain\nAlice woman\nCharlie man\nTeddy rat\nBob child\nJulia woman\nOutput:\nTeddy\nAlice\nBob\nJulia\nCharlie\nJack",
    "examples": [
      {
        "input": "6\nJack captain\nAlice woman\nCharlie man\nTeddy rat\nBob child\nJulia woman",
        "output": "Teddy\nAlice\nBob\nJulia\nCharlie\nJack"
      }
    ],
    "solution": "numero = int(input())\nnombres = []\ntipo = []\norden = []\n\nfor i in range(numero):\n    datos = list(str(input()).split())\n    nombres.append(datos[0])\n    tipo.append(datos[1])\n\nfor i in range(len(tipo)):\n    if tipo[i] == 'rat':\n        orden.append(nombres[i])\nfor i in range(len(tipo)):\n    if tipo[i] == 'woman' or tipo[i]=='child':\n        orden.append(nombres[i])\nfor i in range(len(tipo)):\n    if tipo[i] == 'man':\n        orden.append(nombres[i])\nfor i in range(len(tipo)):\n    if tipo[i] == 'captain':\n        orden.append(nombres[i])\n\n\nfor j in orden:\n    print(j)\n\t  \t\t\t   \t\t\t    \t\t \t\t    \t   \t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "830/A",
    "problem": "Title: Office Keys\n\nThere are n people and k keys on a straight line. Every person wants to get to the office which is located on the line as well. To do that, he needs to reach some point with a key, take the key and then go to the office. Once a key is taken by somebody, it couldn't be taken by anybody else.\n\nYou are to determine the minimum time needed for all n people to get to the office with keys. Assume that people move a unit distance per 1 second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it.\n\nInput Format:\nThe first line contains three integers n, k and p (1 \u2264 n \u2264 1 000, n \u2264 k \u2264 2 000, 1 \u2264 p \u2264 109) \u2014 the number of people, the number of keys and the office location.\n\nThe second line contains n distinct integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains k distinct integers b1, b2, ..., bk (1 \u2264 bj \u2264 109) \u2014 positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point.\n\nOutput Format:\nPrint the minimum time (in seconds) needed for all n to reach the office with keys.\n\nExamples:\nExample 1:\nInput:\n2 4 50\n20 100\n60 10 40 80\nOutput:\n50\n\nExample 2:\nInput:\n1 2 10\n11\n15 7\nOutput:\n7\n\nNote:\nIn the first example the person located at point 20 should take the key located at point 40 and go with it to the office located at point 50. He spends 30 seconds. The person located at point 100 can take the key located at point 80 and go to the office with it. He spends 50 seconds. Thus, after 50 seconds everybody is in office with keys.",
    "examples": [
      {
        "input": "2 4 50\n20 100\n60 10 40 80",
        "output": "50"
      },
      {
        "input": "1 2 10\n11\n15 7",
        "output": "7"
      }
    ],
    "solution": "import copy\r\nimport random\r\nimport heapq\r\nimport math\r\nimport sys\r\nimport bisect\r\nimport datetime\r\nfrom functools import lru_cache\r\nfrom collections import deque\r\nfrom collections import Counter\r\nfrom collections import defaultdict\r\nfrom itertools import combinations\r\nfrom itertools import permutations\r\nfrom types import GeneratorType\r\nfrom functools import cmp_to_key\r\nfrom decimal import Decimal\r\nfrom heapq import nlargest\r\ninf = float(\"inf\")\r\nsys.setrecursionlimit(10000000)\r\n\r\n\r\nclass FastIO:\r\n    def __init__(self):\r\n        return\r\n\r\n    @staticmethod\r\n    def _read():\r\n        return sys.stdin.readline().strip()\r\n\r\n    def read_int(self):\r\n        return int(self._read())\r\n\r\n    def read_float(self):\r\n        return float(self._read())\r\n\r\n    def read_ints(self):\r\n        return map(int, self._read().split())\r\n\r\n    def read_floats(self):\r\n        return map(float, self._read().split())\r\n\r\n    def read_ints_minus_one(self):\r\n        return map(lambda x: int(x) - 1, self._read().split())\r\n\r\n    def read_list_ints(self):\r\n        return list(map(int, self._read().split()))\r\n\r\n    def read_list_floats(self):\r\n        return list(map(float, self._read().split()))\r\n\r\n    def read_list_ints_minus_one(self):\r\n        return list(map(lambda x: int(x) - 1, self._read().split()))\r\n\r\n    def read_str(self):\r\n        return self._read()\r\n\r\n    def read_list_strs(self):\r\n        return self._read().split()\r\n\r\n    def read_list_str(self):\r\n        return list(self._read())\r\n\r\n    @staticmethod\r\n    def st(x):\r\n        return sys.stdout.write(str(x) + '\\n')\r\n\r\n    @staticmethod\r\n    def lst(x):\r\n        return sys.stdout.write(\" \".join(str(w) for w in x) + '\\n')\r\n\r\n    @staticmethod\r\n    def round_5(f):\r\n        res = int(f)\r\n        if f - res >= 0.5:\r\n            res += 1\r\n        return res\r\n\r\n    @staticmethod\r\n    def max(a, b):\r\n        return a if a > b else b\r\n\r\n    @staticmethod\r\n    def min(a, b):\r\n        return a if a < b else b\r\n\r\n    @staticmethod\r\n    def bootstrap(f, queue=[]):\r\n        def wrappedfunc(*args, **kwargs):\r\n            if queue:\r\n                return f(*args, **kwargs)\r\n            else:\r\n                to = f(*args, **kwargs)\r\n                while True:\r\n                    if isinstance(to, GeneratorType):\r\n                        queue.append(to)\r\n                        to = next(to)\r\n                    else:\r\n                        queue.pop()\r\n                        if not queue:\r\n                            break\r\n                        to = queue[-1].send(to)\r\n                return to\r\n        return wrappedfunc\r\n\r\n\r\ndef main(ac=FastIO()):\r\n    n, k, p = ac.read_ints()\r\n    person = sorted(ac.read_list_ints())\r\n    keys = sorted(ac.read_list_ints())\r\n\r\n    def check(x):\r\n        lst = []\r\n        for y in keys:\r\n            if abs(y - p) <= x:\r\n                z = x - abs(y - p)\r\n                lst.append([y - z, y + z])\r\n        lst.sort(key=lambda it: [it[1], it[0]])\r\n        m = len(lst)\r\n        i = 0\r\n        for j in range(n):\r\n            y = person[j]\r\n            while i < m and not (lst[i][0] <= y <= lst[i][1]):\r\n                i += 1\r\n            if i == m:\r\n                return False\r\n            i += 1\r\n        return True\r\n\r\n    low = 0\r\n    high = 10**15\r\n    while low < high - 1:\r\n        mid = low + (high - low) // 2\r\n        if check(mid):\r\n            high = mid\r\n        else:\r\n            low = mid\r\n    ans = low if check(low) else high\r\n    ac.st(ans)\r\n    return\r\n\r\n\r\nmain()\r\n",
    "explanation": "To solve this problem you need to understand the fact that all keys which people will take is continuous sequence of length n in sorted array of keys.\nAt first let's sort all keys in increasing order of their positions. Then brute which of the keys will take a leftmost person. Let it will be i-th key. Then the second person from the left will take the key i\u2009+\u20091, third \u2014 (i\u2009+\u20092) and etc. So, we can determine the time after which all people can reach the office with keys if the sequence of keys beginning from i-th key. Now we need to update the answer with this value and move to the next position i\u2009+\u20091."
  },
  {
    "id": "715/A",
    "problem": "Title: Plus and Square Root\n\nZS the Coder is playing a game. There is a number displayed on the screen and there are two buttons, ' + ' (plus) and '$$\\sqrt{}$$' (square root). Initially, the number 2 is displayed on the screen. There are n + 1 levels in the game and ZS the Coder start at the level 1.\n\nWhen ZS the Coder is at level k, he can :\n\n1. Press the '\u2009+\u2009' button. This increases the number on the screen by exactly k. So, if the number on the screen was x, it becomes x\u2009+\u2009k.\n2. Press the '$$\\sqrt{}$$' button. Let the number on the screen be x. After pressing this button, the number becomes $$\\sqrt{x}$$. After that, ZS the Coder levels up, so his current level becomes k\u2009+\u20091. This button can only be pressed when x is a perfect square, i.e. x\u2009=\u2009m2 for some positive integer m.\n\nAdditionally, after each move, if ZS the Coder is at level k, and the number on the screen is m, then m must be a multiple of k. Note that this condition is only checked after performing the press. For example, if ZS the Coder is at level 4 and current number is 100, he presses the '$$\\sqrt{}$$' button and the number turns into 10. Note that at this moment, 10 is not divisible by 4, but this press is still valid, because after it, ZS the Coder is at level 5, and 10 is divisible by 5.\n\nZS the Coder needs your help in beating the game\u00a0\u2014 he wants to reach level n + 1. In other words, he needs to press the '$$\\sqrt{}$$' button n times. Help him determine the number of times he should press the ' + ' button before pressing the '$$\\sqrt{}$$' button at each level.\n\nPlease note that ZS the Coder wants to find just any sequence of presses allowing him to reach level n + 1, but not necessarily a sequence minimizing the number of presses.\n\nInput Format:\nThe first and only line of the input contains a single integer n (1 \u2264 n \u2264 100 000), denoting that ZS the Coder wants to reach level n + 1.\n\nOutput Format:\nPrint n non-negative integers, one per line. i-th of them should be equal to the number of times that ZS the Coder needs to press the ' + ' button before pressing the '$$\\sqrt{}$$' button at level i.\n\nEach number in the output should not exceed 1018. However, the number on the screen can be greater than 1018.\n\nIt is guaranteed that at least one solution exists. If there are multiple solutions, print any of them.\n\nExamples:\nExample 1:\nInput:\n3\nOutput:\n14\n16\n46\n\nExample 2:\nInput:\n2\nOutput:\n999999999999999998\n44500000000\n\nExample 3:\nInput:\n4\nOutput:\n2\n17\n46\n97\n\nNote:\nIn the first sample case:\n\nOn the first level, ZS the Coder pressed the ' + ' button 14 times (and the number on screen is initially 2), so the number became 2 + 14\u00b71 = 16. Then, ZS the Coder pressed the '$$\\sqrt{}$$' button, and the number became $$\\sqrt{16} = 4$$.\n\nAfter that, on the second level, ZS pressed the ' + ' button 16 times, so the number becomes 4 + 16\u00b72 = 36. Then, ZS pressed the '$$\\sqrt{}$$' button, levelling up and changing the number into $$\\sqrt{36} = 6$$.\n\nAfter that, on the third level, ZS pressed the ' + ' button 46 times, so the number becomes 6 + 46\u00b73 = 144. Then, ZS pressed the '$$\\sqrt{}$$' button, levelling up and changing the number into $$\\sqrt{144} = 12$$.\n\nNote that 12 is indeed divisible by 4, so ZS the Coder can reach level 4.\n\nAlso, note that pressing the ' + ' button 10 times on the third level before levelling up does not work, because the number becomes 6 + 10\u00b73 = 36, and when the '$$\\sqrt{}$$' button is pressed, the number becomes $$\\sqrt{36} = 6$$ and ZS the Coder is at Level 4. However, 6 is not divisible by 4 now, so this is not a valid solution.\n\nIn the second sample case:\n\nOn the first level, ZS the Coder pressed the ' + ' button 999999999999999998 times (and the number on screen is initially 2), so the number became 2 + 999999999999999998\u00b71 = 1018. Then, ZS the Coder pressed the '$$\\sqrt{}$$' button, and the number became $$\\sqrt{10^{18}} = 10^9$$.\n\nAfter that, on the second level, ZS pressed the ' + ' button 44500000000 times, so the number becomes 109 + 44500000000\u00b72 = 9\u00b71010. Then, ZS pressed the '$$\\sqrt{}$$' button, levelling up and changing the number into $$\\sqrt { 9 \\cdot 1 0 ^ { 1 0 } } = 3 0 0 0 0 0$$.\n\nNote that 300000 is a multiple of 3, so ZS the Coder can reach level 3.",
    "examples": [
      {
        "input": "3",
        "output": "14\n16\n46"
      },
      {
        "input": "2",
        "output": "999999999999999998\n44500000000"
      },
      {
        "input": "4",
        "output": "2\n17\n46\n97"
      }
    ],
    "solution": "from math import sqrt\r\n\r\nminc=[i for i in range(100010)]\r\nu=[0 for i in range(100010)]\r\n\r\nfor i in range(2,100010):\r\n    if u[i]:\r\n        continue\r\n    for j in range(i,100010,i):\r\n        if j%(i*i):\r\n            minc[j]=minc[j//i]*i*i\r\n        else:\r\n            minc[j]=minc[j//(i*i)]*i*i\r\n\r\nn=int(input().strip())\r\n\r\ncur=2\r\nfor i in range(1,n+1):\r\n    new=minc[i]*(i+1)*(i+1)\r\n    print((new-cur)//i)\r\n    cur=int(sqrt(new))\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "340/A",
    "problem": "Title: The Wall\n\nIahub and his friend Floyd have started painting a wall. Iahub is painting the wall red and Floyd is painting it pink. You can consider the wall being made of a very large number of bricks, numbered 1, 2, 3 and so on.\n\nIahub has the following scheme of painting: he skips x - 1 consecutive bricks, then he paints the x-th one. That is, he'll paint bricks x, 2\u00b7x, 3\u00b7x and so on red. Similarly, Floyd skips y - 1 consecutive bricks, then he paints the y-th one. Hence he'll paint bricks y, 2\u00b7y, 3\u00b7y and so on pink.\n\nAfter painting the wall all day, the boys observed that some bricks are painted both red and pink. Iahub has a lucky number a and Floyd has a lucky number b. Boys wonder how many bricks numbered no less than a and no greater than b are painted both red and pink. This is exactly your task: compute and print the answer to the question.\n\nInput Format:\nThe input will have a single line containing four integers in this order: x, y, a, b. (1 \u2264 x, y \u2264 1000, 1 \u2264 a, b \u2264 2\u00b7109, a \u2264 b).\n\nOutput Format:\nOutput a single integer \u2014 the number of bricks numbered no less than a and no greater than b that are painted both red and pink.\n\nExamples:\nExample 1:\nInput:\n2 3 6 18\nOutput:\n3\n\nNote:\nLet's look at the bricks from a to b (a = 6, b = 18). The bricks colored in red are numbered 6, 8, 10, 12, 14, 16, 18. The bricks colored in pink are numbered 6, 9, 12, 15, 18. The bricks colored in both red and pink are numbered with 6, 12 and 18.",
    "examples": [
      {
        "input": "2 3 6 18",
        "output": "3"
      }
    ],
    "solution": "import sys\r\n\r\n_gcd = lambda s, m, n : m if n==0 else _gcd(s, n, m % n)\r\ngcd = lambda m, n : _gcd(_gcd, m, n)\r\nlcm = lambda m, n : m // gcd(m, n) * n\r\n\r\n\r\n(x, y, a, b) = list(map(int, input().split()))\r\n\r\nz = lcm(x, y)\r\n\r\nprint(b//z-(a-1)//z)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "119/A",
    "problem": "Title: Epic Game\n\nSimon and Antisimon play a game. Initially each player receives one fixed positive integer that doesn't change throughout the game. Simon receives number a and Antisimon receives number b. They also have a heap of n stones. The players take turns to make a move and Simon starts. During a move a player should take from the heap the number of stones equal to the greatest common divisor of the fixed number he has received and the number of stones left in the heap. A player loses when he cannot take the required number of stones (i. e. the heap has strictly less stones left than one needs to take).\n\nYour task is to determine by the given a, b and n who wins the game.\n\nInput Format:\nThe only string contains space-separated integers a, b and n (1 \u2264 a, b, n \u2264 100) \u2014 the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.\n\nOutput Format:\nIf Simon wins, print \"0\" (without the quotes), otherwise print \"1\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n3 5 9\nOutput:\n0\n\nExample 2:\nInput:\n1 1 100\nOutput:\n1\n\nNote:\nThe greatest common divisor of two non-negative integers a and b is such maximum positive integer k, that a is divisible by k without remainder and similarly, b is divisible by k without remainder. Let gcd(a, b) represent the operation of calculating the greatest common divisor of numbers a and b. Specifically, gcd(x, 0) = gcd(0, x) = x.\n\nIn the first sample the game will go like that:\n\n- Simon should take gcd(3,\u20099)\u2009=\u20093 stones from the heap. After his move the heap has 6 stones left.\n- Antisimon should take gcd(5,\u20096)\u2009=\u20091 stone from the heap. After his move the heap has 5 stones left.\n- Simon should take gcd(3,\u20095)\u2009=\u20091 stone from the heap. After his move the heap has 4 stones left.\n- Antisimon should take gcd(5,\u20094)\u2009=\u20091 stone from the heap. After his move the heap has 3 stones left.\n- Simon should take gcd(3,\u20093)\u2009=\u20093 stones from the heap. After his move the heap has 0 stones left.\n- Antisimon should take gcd(5,\u20090)\u2009=\u20095 stones from the heap. As 0\u2009<\u20095, it is impossible and Antisimon loses.\n\nIn the second sample each player during each move takes one stone from the heap. As n is even, Antisimon takes the last stone and Simon can't make a move after that.",
    "examples": [
      {
        "input": "3 5 9",
        "output": "0"
      },
      {
        "input": "1 1 100",
        "output": "1"
      }
    ],
    "solution": "import math\r\na , b, n= [int(i) for i in input().split()]\r\nans = False\r\nwhile True:\r\n    if ans == False:\r\n        g = math.gcd(a,n)\r\n        n -=g\r\n        if n <=0:\r\n            print(int(ans))\r\n            break\r\n        ans = not ans\r\n    else:\r\n        g = math.gcd(b,n)\r\n        n -=g\r\n        if n <=0:\r\n            print(int(ans))\r\n            break\r\n        ans = not ans",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "377/A",
    "problem": "Title: Maze\n\nPavel loves grid mazes. A grid maze is an n \u00d7 m rectangle maze where each cell is either empty, or is a wall. You can go from one cell to another only if both cells are empty and have a common side.\n\nPavel drew a grid maze with all empty cells forming a connected area. That is, you can go from any empty cell to any other one. Pavel doesn't like it when his maze has too little walls. He wants to turn exactly k empty cells into walls so that all the remaining cells still formed a connected area. Help him.\n\nInput Format:\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 500, 0 \u2264 k < s), where n and m are the maze's height and width, correspondingly, k is the number of walls Pavel wants to add and letter s represents the number of empty cells in the original maze.\n\nEach of the next n lines contains m characters. They describe the original maze. If a character on a line equals \".\", then the corresponding cell is empty and if the character equals \"#\", then the cell is a wall.\n\nOutput Format:\nPrint n lines containing m characters each: the new maze that fits Pavel's requirements. Mark the empty cells that you transformed into walls as \"X\", the other cells must be left without changes (that is, \".\" and \"#\").\n\nIt is guaranteed that a solution exists. If there are multiple solutions you can output any of them.\n\nExamples:\nExample 1:\nInput:\n3 4 2\n#..#\n..#.\n#...\nOutput:\n#.X#\nX.#.\n#...\n\nExample 2:\nInput:\n5 4 5\n#...\n#.#.\n.#..\n...#\n.#.#\nOutput:\n#XXX\n#X#.\nX#..\n...#\n.#.#",
    "examples": [
      {
        "input": "3 4 2\n#..#\n..#.\n#...",
        "output": "#.X#\nX.#.\n#..."
      },
      {
        "input": "5 4 5\n#...\n#.#.\n.#..\n...#\n.#.#",
        "output": "#XXX\n#X#.\nX#..\n...#\n.#.#"
      }
    ],
    "solution": "directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]\r\n\r\ndef main():\r\n    height, width, walls_to_add = map(int, input().split())\r\n    total_open_squares = height * width\r\n    maze = []\r\n\r\n    for _ in range(height):\r\n        maze.append(list(input().strip()))\r\n\r\n    total_open_squares -= sum(row.count('#') for row in maze)\r\n    required_open_squares = total_open_squares - walls_to_add\r\n\r\n    def dfs(square):\r\n        stack = [square]\r\n        visited = set()\r\n        visited.add(square)\r\n        count = 1\r\n\r\n        while stack and count < required_open_squares:\r\n            x, y = stack.pop()\r\n            for dx, dy in directions:\r\n                nx, ny = x + dx, y + dy\r\n                if 0 <= nx < height and 0 <= ny < width and maze[nx][ny] == '.' and (nx, ny) not in visited:\r\n                    visited.add((nx, ny))\r\n                    stack.append((nx, ny))\r\n                    count += 1\r\n                    if count == required_open_squares:\r\n                        return visited\r\n        return visited\r\n\r\n    visited = set()\r\n    for i in range(height):\r\n        for j in range(width):\r\n            if maze[i][j] == '.':\r\n                visited = dfs((i, j))\r\n                break\r\n        if visited:\r\n            break\r\n\r\n    for i in range(height):\r\n        for j in range(width):\r\n            if maze[i][j] == '.' and (i, j) not in visited:\r\n                maze[i][j] = 'X'\r\n\r\n    for row in maze:\r\n        print(''.join(row))\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "296/A",
    "problem": "Title: Yaroslav and Permutations\n\nYaroslav has an array that consists of n integers. In one second Yaroslav can swap two neighboring array elements. Now Yaroslav is wondering if he can obtain an array where any two neighboring elements would be distinct in a finite time.\n\nHelp Yaroslav.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 1000) \u2014 the array elements.\n\nOutput Format:\nIn the single line print \"YES\" (without the quotes) if Yaroslav can obtain the array he needs, and \"NO\" (without the quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\n1\n1\nOutput:\nYES\n\nExample 2:\nInput:\n3\n1 1 2\nOutput:\nYES\n\nExample 3:\nInput:\n4\n7 7 7 7\nOutput:\nNO\n\nNote:\nIn the first sample the initial array fits well.\n\nIn the second sample Yaroslav can get array: 1, 2, 1. He can swap the last and the second last elements to obtain it.\n\nIn the third sample Yarosav can't get the array he needs.",
    "examples": [
      {
        "input": "1\n1",
        "output": "YES"
      },
      {
        "input": "3\n1 1 2",
        "output": "YES"
      },
      {
        "input": "4\n7 7 7 7",
        "output": "NO"
      }
    ],
    "solution": "n=int(input())\r\na=[int(x) for x in input().split()]\r\n\r\nfor i in a:\r\n    if a.count(i)*2>n+1:\r\n        print(\"NO\")\r\n        break\r\nelse:\r\n    print(\"YES\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "143/A",
    "problem": "Title: Help Vasilisa the Wise 2\n\nVasilisa the Wise from the Kingdom of Far Far Away got a magic box with a secret as a present from her friend Hellawisa the Wise from the Kingdom of A Little Closer. However, Vasilisa the Wise does not know what the box's secret is, since she cannot open it again. She hopes that you will help her one more time with that.\n\nThe box's lock looks as follows: it contains 4 identical deepenings for gems as a 2 \u00d7 2 square, and some integer numbers are written at the lock's edge near the deepenings. The example of a lock is given on the picture below.\n\nThe box is accompanied with 9 gems. Their shapes match the deepenings' shapes and each gem contains one number from 1 to 9 (each number is written on exactly one gem). The box will only open after it is decorated with gems correctly: that is, each deepening in the lock should be filled with exactly one gem. Also, the sums of numbers in the square's rows, columns and two diagonals of the square should match the numbers written at the lock's edge. For example, the above lock will open if we fill the deepenings with gems with numbers as is shown on the picture below.\n\nNow Vasilisa the Wise wants to define, given the numbers on the box's lock, which gems she should put in the deepenings to open the box. Help Vasilisa to solve this challenging task.\n\nInput Format:\nThe input contains numbers written on the edges of the lock of the box. The first line contains space-separated integers r1 and r2 that define the required sums of numbers in the rows of the square. The second line contains space-separated integers c1 and c2 that define the required sums of numbers in the columns of the square. The third line contains space-separated integers d1 and d2 that define the required sums of numbers on the main and on the side diagonals of the square (1 \u2264 r1, r2, c1, c2, d1, d2 \u2264 20). Correspondence between the above 6 variables and places where they are written is shown on the picture below. For more clarifications please look at the second sample test that demonstrates the example given in the problem statement.\n\nOutput Format:\nPrint the scheme of decorating the box with stones: two lines containing two space-separated integers from 1 to 9. The numbers should be pairwise different. If there is no solution for the given lock, then print the single number \"-1\" (without the quotes).\n\nIf there are several solutions, output any.\n\nExamples:\nExample 1:\nInput:\n3 7\n4 6\n5 5\nOutput:\n1 2\n3 4\n\nExample 2:\nInput:\n11 10\n13 8\n5 16\nOutput:\n4 7\n9 1\n\nExample 3:\nInput:\n1 2\n3 4\n5 6\nOutput:\n-1\n\nExample 4:\nInput:\n10 10\n10 10\n10 10\nOutput:\n-1\n\nNote:\nPay attention to the last test from the statement: it is impossible to open the box because for that Vasilisa the Wise would need 4 identical gems containing number \"5\". However, Vasilisa only has one gem with each number from 1 to 9.",
    "examples": [
      {
        "input": "3 7\n4 6\n5 5",
        "output": "1 2\n3 4"
      },
      {
        "input": "11 10\n13 8\n5 16",
        "output": "4 7\n9 1"
      },
      {
        "input": "1 2\n3 4\n5 6",
        "output": "-1"
      },
      {
        "input": "10 10\n10 10\n10 10",
        "output": "-1"
      }
    ],
    "solution": "row1 , row2 = map(int,input().split())\r\ncol1 , col2 = map(int,input().split())\r\ndia1 , dia2 = map(int,input().split())\r\nmessage=1\r\nb1 , b2 = 0,0\r\nb3 , b4 = 0,0\r\nfor a in range(1,10):\r\n    b1 = a\r\n    for b in range(1,10):\r\n        b2 = b\r\n        for c in range(1,10):\r\n            b3 = c\r\n            for d in range(1,10):\r\n                b4 = d\r\n                if b1!=b2 and b1!=b3 and b1!=b4 and b2!=b3 and b2!=b4 and b3!=b4:\r\n                    if b1+b4==dia1 and b1+b2==row1 and b1+b3==col1 and b2+b4==col2 and b2+b3==dia2 and b3+b4==row2:\r\n                        print(b1,b2)\r\n                        print(b3,b4)\r\n                        message=0\r\nif message==1:\r\n    print(-1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "145/A",
    "problem": "Title: Lucky Conversion\n\nPetya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya has two strings a and b of the same length n. The strings consist only of lucky digits. Petya can perform operations of two types:\n\n- replace any one digit from string a by its opposite (i.e., replace 4 by 7 and 7 by 4);\n- swap any pair of digits in string a.\n\nPetya is interested in the minimum number of operations that are needed to make string a equal to string b. Help him with the task.\n\nInput Format:\nThe first and the second line contains strings a and b, correspondingly. Strings a and b have equal lengths and contain only lucky digits. The strings are not empty, their length does not exceed 105.\n\nOutput Format:\nPrint on the single line the single number \u2014 the minimum number of operations needed to convert string a into string b.\n\nExamples:\nExample 1:\nInput:\n47\n74\nOutput:\n1\n\nExample 2:\nInput:\n774\n744\nOutput:\n1\n\nExample 3:\nInput:\n777\n444\nOutput:\n3\n\nNote:\nIn the first sample it is enough simply to swap the first and the second digit.\n\nIn the second sample we should replace the second digit with its opposite.\n\nIn the third number we should replace all three digits with their opposites.",
    "examples": [
      {
        "input": "47\n74",
        "output": "1"
      },
      {
        "input": "774\n744",
        "output": "1"
      },
      {
        "input": "777\n444",
        "output": "3"
      }
    ],
    "solution": "\r\n\r\na = input()\r\nb = input()\r\na7,a4 = a.count('7'),a.count('4')\r\nb7,b4 = b.count('7'),b.count('4')\r\nc = 0\r\nfor i in range(len(a)):\r\n    if a[i]!=b[i]:\r\n        c += 1\r\nif a7==b7 and a4==b4:\r\n    if c%2:\r\n        print(c//2+1)\r\n    else:\r\n        print(c//2)\r\nelse:\r\n    if b7>a7:\r\n        d = b7-a7\r\n    else:\r\n        d = b4-a4\r\n    tot = d\r\n    c -= d\r\n    if c%2:\r\n        print(tot+c//2+1)\r\n    else:\r\n        print(tot+c//2)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "80/A",
    "problem": "Title: Panoramix's Prediction\n\nA prime number is a number which has exactly two distinct divisors: one and itself. For example, numbers 2, 7, 3 are prime, and 1, 6, 4 are not.\n\nThe next prime number after x is the smallest prime number greater than x. For example, the next prime number after 2 is 3, and the next prime number after 3 is 5. Note that there is exactly one next prime number after each number. So 5 is\u00a0not the next prime number for 2.\n\nOne cold April morning Panoramix predicted that soon Kakofonix will break free from his straitjacket, and this will be a black day for the residents of the Gallic countryside.\n\nPanoramix's prophecy tells that if some day Asterix and Obelix beat exactly x Roman soldiers, where x is a prime number, and next day they beat exactly y Roman soldiers, where y is the next prime number after x, then it's time to wait for Armageddon, for nothing can shut Kakofonix up while he sings his infernal song.\n\nYesterday the Gauls beat n Roman soldiers and it turned out that the number n was prime! Today their victims were a troop of m Romans (m > n). Determine whether the Gauls should wait for the black day after today's victory of Asterix and Obelix?\n\nInput Format:\nThe first and only input line contains two positive integers \u2014 n and m (2 \u2264 n < m \u2264 50). It is guaranteed that n is prime.\n\nPretests contain all the cases with restrictions 2 \u2264 n < m \u2264 4.\n\nOutput Format:\nPrint YES, if m is the next prime number after n, or NO otherwise.\n\nExamples:\nExample 1:\nInput:\n3 5\nOutput:\nYES\n\nExample 2:\nInput:\n7 11\nOutput:\nYES\n\nExample 3:\nInput:\n7 9\nOutput:\nNO",
    "examples": [
      {
        "input": "3 5",
        "output": "YES"
      },
      {
        "input": "7 11",
        "output": "YES"
      },
      {
        "input": "7 9",
        "output": "NO"
      }
    ],
    "solution": "def is_prime(n):\r\n    return n > 1 and all(n % i != 0 for i in range(2, int(n**0.5)+1))\r\n\r\n\r\nn, m = map(int, input().split())\r\nnext_prime = n + 1\r\nwhile not is_prime(next_prime):\r\n    next_prime += 1\r\nprint(\"YES\" if next_prime == m else \"NO\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "763/A",
    "problem": "Title: Timofey and a tree\n\nEach New Year Timofey and his friends cut down a tree of n vertices and bring it home. After that they paint all the n its vertices, so that the i-th vertex gets color ci.\n\nNow it's time for Timofey birthday, and his mother asked him to remove the tree. Timofey removes the tree in the following way: he takes some vertex in hands, while all the other vertices move down so that the tree becomes rooted at the chosen vertex. After that Timofey brings the tree to a trash can.\n\nTimofey doesn't like it when many colors are mixing together. A subtree annoys him if there are vertices of different color in it. Timofey wants to find a vertex which he should take in hands so that there are no subtrees that annoy him. He doesn't consider the whole tree as a subtree since he can't see the color of the root vertex.\n\nA subtree of some vertex is a subgraph containing that vertex and all its descendants.\n\nYour task is to determine if there is a vertex, taking which in hands Timofey wouldn't be annoyed.\n\nInput Format:\nThe first line contains single integer n (2 \u2264 n \u2264 105)\u00a0\u2014 the number of vertices in the tree.\n\nEach of the next n - 1 lines contains two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v), denoting there is an edge between vertices u and v. It is guaranteed that the given graph is a tree.\n\nThe next line contains n integers c1, c2, ..., cn (1 \u2264 ci \u2264 105), denoting the colors of the vertices.\n\nOutput Format:\nPrint \"NO\" in a single line, if Timofey can't take the tree in such a way that it doesn't annoy him.\n\nOtherwise print \"YES\" in the first line. In the second line print the index of the vertex which Timofey should take in hands. If there are multiple answers, print any of them.\n\nExamples:\nExample 1:\nInput:\n4\n1 2\n2 3\n3 4\n1 2 1 1\nOutput:\nYES\n2\n\nExample 2:\nInput:\n3\n1 2\n2 3\n1 2 3\nOutput:\nYES\n2\n\nExample 3:\nInput:\n4\n1 2\n2 3\n3 4\n1 2 1 2\nOutput:\nNO",
    "examples": [
      {
        "input": "4\n1 2\n2 3\n3 4\n1 2 1 1",
        "output": "YES\n2"
      },
      {
        "input": "3\n1 2\n2 3\n1 2 3",
        "output": "YES\n2"
      },
      {
        "input": "4\n1 2\n2 3\n3 4\n1 2 1 2",
        "output": "NO"
      }
    ],
    "solution": "n = int(input())\ng = [[] for _ in range(n)]\nfor _ in range(n-1):\n    u, v = map(int, input().split())\n    u -= 1\n    v -= 1\n    g[u].append(v)\n    g[v].append(u)\nc = list(map(int, input().split()))\ndif = [0 for _ in range(n)]\ncnt = 0\nfor v in range(n):\n    dif[v] = 0\n    for u in g[v]:\n        if c[u] != c[v]:\n            dif[v] += 1\n    cnt += dif[v] > 0\nans = -1\nfor v in range(n):\n    if dif[v] + 1 >= cnt:\n        ans = v+1\nif ans >= 0:\n    print('YES\\n%d' % ans)\nelse:\n    print('NO')",
    "explanation": "Take any edge which vertices are colored in different colors. If such edge doesn't exist you can print any vertex, because all the tree is colored in the same color. Otherwise, try to make a root from each of these vertices. Check if is possible with simple dfs. If it succeedes for one of them, print \"YES\" and this vertex. If it fails for both vertices, the answer is \"NO\". Indeed, if both of them cannot be the root, they lay in the same subtree and they are colored differently. So the condition isn't fulfilled. The asymptotics of this solution is O(n\u2009+\u2009m).\nAuthor's solution: http://pastebin.com/M58NY7C1"
  },
  {
    "id": "588/A",
    "problem": "Title: Duff and Meat\n\nDuff is addicted to meat! Malek wants to keep her happy for n days. In order to be happy in i-th day, she needs to eat exactly ai kilograms of meat.\n\nThere is a big shop uptown and Malek wants to buy meat for her from there. In i-th day, they sell meat for pi dollars per kilogram. Malek knows all numbers a1, ..., an and p1, ..., pn. In each day, he can buy arbitrary amount of meat, also he can keep some meat he has for the future.\n\nMalek is a little tired from cooking meat, so he asked for your help. Help him to minimize the total money he spends to keep Duff happy for n days.\n\nInput Format:\nThe first line of input contains integer n (1 \u2264 n \u2264 105), the number of days.\n\nIn the next n lines, i-th line contains two integers ai and pi (1 \u2264 ai, pi \u2264 100), the amount of meat Duff needs and the cost of meat in that day.\n\nOutput Format:\nPrint the minimum money needed to keep Duff happy for n days, in one line.\n\nExamples:\nExample 1:\nInput:\n3\n1 3\n2 2\n3 1\nOutput:\n10\n\nExample 2:\nInput:\n3\n1 3\n2 1\n3 2\nOutput:\n8\n\nNote:\nIn the first sample case: An optimal way would be to buy 1 kg on the first day, 2 kg on the second day and 3 kg on the third day.\n\nIn the second sample case: An optimal way would be to buy 1 kg on the first day and 5 kg (needed meat for the second and third day) on the second day.",
    "examples": [
      {
        "input": "3\n1 3\n2 2\n3 1",
        "output": "10"
      },
      {
        "input": "3\n1 3\n2 1\n3 2",
        "output": "8"
      }
    ],
    "solution": "n = int(input())\r\na = [0]*(n+3)\r\np = [0]*(n+3)\r\nfor i in range(n):\r\n    t1, t2 = map(int,input().split())\r\n    a[i] = t1\r\n    p[i] = t2\r\npmin = p[0]\r\nkq = p[0]*a[0]\r\nfor i in range(1,n):\r\n    pmin = min(pmin, p[i])\r\n    kq+= pmin*a[i]\r\nprint(kq)\r\n    ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "514/A",
    "problem": "Title: Chewba\u0441ca and Number\n\nLuke Skywalker gave Chewbacca an integer number x. Chewbacca isn't good at numbers but he loves inverting digits in them. Inverting digit t means replacing it with digit 9 - t.\n\nHelp Chewbacca to transform the initial number x to the minimum possible positive number by inverting some (possibly, zero) digits. The decimal representation of the final number shouldn't start with a zero.\n\nInput Format:\nThe first line contains a single integer x (1 \u2264 x \u2264 1018) \u2014 the number that Luke Skywalker gave to Chewbacca.\n\nOutput Format:\nPrint the minimum possible positive number that Chewbacca can obtain after inverting some digits. The number shouldn't contain leading zeroes.\n\nExamples:\nExample 1:\nInput:\n27\nOutput:\n22\n\nExample 2:\nInput:\n4545\nOutput:\n4444",
    "examples": [
      {
        "input": "27",
        "output": "22"
      },
      {
        "input": "4545",
        "output": "4444"
      }
    ],
    "solution": "s=input()\r\nss=\"\"\r\nfor i in range(len(s)):\r\n    if i==0 and s[i]=='9':\r\n        ss+=s[i]\r\n        continue\r\n    if int(s[i])>9-int(s[i]):\r\n        ss+=str(9-int(s[i]))\r\n    else:\r\n        ss+=s[i]\r\nprint(ss)\r\n        ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "65/A",
    "problem": "Title: Harry Potter and Three Spells\n\nA long time ago (probably even in the first book), Nicholas Flamel, a great alchemist and the creator of the Philosopher's Stone, taught Harry Potter three useful spells. The first one allows you to convert a grams of sand into b grams of lead, the second one allows you to convert c grams of lead into d grams of gold and third one allows you to convert e grams of gold into f grams of sand. When Harry told his friends about these spells, Ron Weasley was amazed. After all, if they succeed in turning sand into lead, lead into gold, and then turning part of the gold into sand again and so on, then it will be possible to start with a small amount of sand and get huge amounts of gold! Even an infinite amount of gold! Hermione Granger, by contrast, was skeptical about that idea. She argues that according to the law of conservation of matter getting an infinite amount of matter, even using magic, is impossible. On the contrary, the amount of matter may even decrease during transformation, being converted to magical energy. Though Hermione's theory seems convincing, Ron won't believe her. As far as Ron is concerned, Hermione made up her law of conservation of matter to stop Harry and Ron wasting their time with this nonsense, and to make them go and do homework instead. That's why Ron has already collected a certain amount of sand for the experiments. A quarrel between the friends seems unavoidable...\n\nHelp Harry to determine which one of his friends is right, and avoid the quarrel after all. To do this you have to figure out whether it is possible to get the amount of gold greater than any preassigned number from some finite amount of sand.\n\nInput Format:\nThe first line contains 6 integers a, b, c, d, e, f (0 \u2264 a, b, c, d, e, f \u2264 1000).\n\nOutput Format:\nPrint \"Ron\", if it is possible to get an infinitely large amount of gold having a certain finite amount of sand (and not having any gold and lead at all), i.e., Ron is right. Otherwise, print \"Hermione\".\n\nExamples:\nExample 1:\nInput:\n100 200 250 150 200 250\nOutput:\nRon\n\nExample 2:\nInput:\n100 50 50 200 200 100\nOutput:\nHermione\n\nExample 3:\nInput:\n100 10 200 20 300 30\nOutput:\nHermione\n\nExample 4:\nInput:\n0 0 0 0 0 0\nOutput:\nHermione\n\nExample 5:\nInput:\n1 1 0 1 1 1\nOutput:\nRon\n\nExample 6:\nInput:\n1 0 1 2 1 2\nOutput:\nHermione\n\nExample 7:\nInput:\n100 1 100 1 0 1\nOutput:\nRon\n\nNote:\nConsider the first sample. Let's start with the 500 grams of sand. Apply the first spell 5 times and turn the sand into 1000 grams of lead. Then apply the second spell 4 times to get 600 grams of gold. Let\u2019s take 400 grams from the resulting amount of gold turn them back into sand. We get 500 grams of sand and 200 grams of gold. If we apply the same operations to 500 grams of sand again, we can get extra 200 grams of gold every time. Thus, you can get 200, 400, 600 etc. grams of gold, i.e., starting with a finite amount of sand (500 grams), you can get the amount of gold which is greater than any preassigned number.\n\nIn the forth sample it is impossible to get sand, or lead, or gold, applying the spells.\n\nIn the fifth sample an infinitely large amount of gold can be obtained by using only the second spell, which allows you to receive 1 gram of gold out of nothing. Note that if such a second spell is available, then the first and the third one do not affect the answer at all.\n\nThe seventh sample is more interesting. We can also start with a zero amount of sand there. With the aid of the third spell you can get sand out of nothing. We get 10000 grams of sand in this manner. Let's get 100 grams of lead using the first spell 100 times. Then make 1 gram of gold from them. We managed to receive 1 gram of gold, starting with a zero amount of sand! Clearly, in this manner you can get an infinitely large amount of gold.",
    "examples": [
      {
        "input": "100 200 250 150 200 250",
        "output": "Ron"
      },
      {
        "input": "100 50 50 200 200 100",
        "output": "Hermione"
      },
      {
        "input": "100 10 200 20 300 30",
        "output": "Hermione"
      },
      {
        "input": "0 0 0 0 0 0",
        "output": "Hermione"
      },
      {
        "input": "1 1 0 1 1 1",
        "output": "Ron"
      },
      {
        "input": "1 0 1 2 1 2",
        "output": "Hermione"
      },
      {
        "input": "100 1 100 1 0 1",
        "output": "Ron"
      }
    ],
    "solution": "# LUOGU_RID: 112089745\na, b, c, d, e, f = map(int, input().split());\r\nif a * c * e < b * d * f or a == 0 and b * d > 0 or c == 0 and d > 0:\r\n    print(\"Ron\");\r\nelse:\r\n    print(\"Hermione\");",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "554/A",
    "problem": "Title: Kyoya and Photobooks\n\nKyoya Ootori is selling photobooks of the Ouran High School Host Club. He has 26 photos, labeled \"a\" to \"z\", and he has compiled them into a photo booklet with some photos in some order (possibly with some photos being duplicated). A photo booklet can be described as a string of lowercase letters, consisting of the photos in the booklet in order. He now wants to sell some \"special edition\" photobooks, each with one extra photo inserted anywhere in the book. He wants to make as many distinct photobooks as possible, so he can make more money. He asks Haruhi, how many distinct photobooks can he make by inserting one extra photo into the photobook he already has?\n\nPlease help Haruhi solve this problem.\n\nInput Format:\nThe first line of input will be a single string s (1 \u2264 |s| \u2264 20). String s consists only of lowercase English letters.\n\nOutput Format:\nOutput a single integer equal to the number of distinct photobooks Kyoya Ootori can make.\n\nExamples:\nExample 1:\nInput:\na\nOutput:\n51\n\nExample 2:\nInput:\nhi\nOutput:\n76\n\nNote:\nIn the first case, we can make 'ab','ac',...,'az','ba','ca',...,'za', and 'aa', producing a total of 51 distinct photo booklets.",
    "examples": [
      {
        "input": "a",
        "output": "51"
      },
      {
        "input": "hi",
        "output": "76"
      }
    ],
    "solution": "s=input()\r\nn=len(s)\r\nprint((n+1)*26-n)",
    "explanation": "It's enough to just simulate adding every character at every position at the string, and removing any duplicates. For instance, we can use a HashSet of Strings in Java to do this.\nBonus: Prove that the number of ways is always (length of string + 1) * 25 + 1."
  },
  {
    "id": "139/A",
    "problem": "Title: Petr and Book\n\nOne Sunday Petr went to a bookshop and bought a new book on sports programming. The book had exactly n pages.\n\nPetr decided to start reading it starting from the next day, that is, from Monday. Petr's got a very tight schedule and for each day of the week he knows how many pages he will be able to read on that day. Some days are so busy that Petr will have no time to read whatsoever. However, we know that he will be able to read at least one page a week.\n\nAssuming that Petr will not skip days and will read as much as he can every day, determine on which day of the week he will read the last page of the book.\n\nInput Format:\nThe first input line contains the single integer n (1 \u2264 n \u2264 1000) \u2014 the number of pages in the book.\n\nThe second line contains seven non-negative space-separated integers that do not exceed 1000 \u2014 those integers represent how many pages Petr can read on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday correspondingly. It is guaranteed that at least one of those numbers is larger than zero.\n\nOutput Format:\nPrint a single number \u2014 the number of the day of the week, when Petr will finish reading the book. The days of the week are numbered starting with one in the natural order: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.\n\nExamples:\nExample 1:\nInput:\n100\n15 20 20 15 10 30 45\nOutput:\n6\n\nExample 2:\nInput:\n2\n1 0 0 0 0 0 0\nOutput:\n1\n\nNote:\nNote to the first sample:\n\nBy the end of Monday and therefore, by the beginning of Tuesday Petr has 85 pages left. He has 65 pages left by Wednesday, 45 by Thursday, 30 by Friday, 20 by Saturday and on Saturday Petr finishes reading the book (and he also has time to read 10 pages of something else).\n\nNote to the second sample:\n\nOn Monday of the first week Petr will read the first page. On Monday of the second week Petr will read the second page and will finish reading the book.",
    "examples": [
      {
        "input": "100\n15 20 20 15 10 30 45",
        "output": "6"
      },
      {
        "input": "2\n1 0 0 0 0 0 0",
        "output": "1"
      }
    ],
    "solution": "n = int(input())\r\na = list(map(int, input().split()))\r\ni = 0\r\nwhile n>a[i]:\r\n    n-=a[i]\r\n    i = (i+1)%7\r\nprint(i+1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "723/A",
    "problem": "Title: The New Year: Meeting Friends\n\nThere are three friend living on the straight line Ox in Lineland. The first friend lives at the point x1, the second friend lives at the point x2, and the third friend lives at the point x3. They plan to celebrate the New Year together, so they need to meet at one point. What is the minimum total distance they have to travel in order to meet at some point and celebrate the New Year?\n\nIt's guaranteed that the optimal answer is always integer.\n\nInput Format:\nThe first line of the input contains three distinct integers x1, x2 and x3 (1 \u2264 x1, x2, x3 \u2264 100)\u00a0\u2014 the coordinates of the houses of the first, the second and the third friends respectively.\n\nOutput Format:\nPrint one integer\u00a0\u2014 the minimum total distance the friends need to travel in order to meet together.\n\nExamples:\nExample 1:\nInput:\n7 1 4\nOutput:\n6\n\nExample 2:\nInput:\n30 20 10\nOutput:\n20\n\nNote:\nIn the first sample, friends should meet at the point 4. Thus, the first friend has to travel the distance of 3 (from the point 7 to the point 4), the second friend also has to travel the distance of 3 (from the point 1 to the point 4), while the third friend should not go anywhere because he lives at the point 4.",
    "examples": [
      {
        "input": "7 1 4",
        "output": "6"
      },
      {
        "input": "30 20 10",
        "output": "20"
      }
    ],
    "solution": "result=list(map(int,input().split()))\r\nresult.sort()\r\nprint(result[-1]-result[0])",
    "explanation": "To solve this problem you need to understand that friends must meet in the middle point of the given points, so friends who live in the leftmost and in the rightmost points must go to the middle point. Because of that the answer equals to max(x1,\u2009x2,\u2009x3)\u2009-\u2009min(x1,\u2009x2,\u2009x3)."
  },
  {
    "id": "996/A",
    "problem": "Title: Hit the Lottery\n\nAllen has a LOT of money. He has $$$n$$$ dollars in the bank. For security reasons, he wants to withdraw it in cash (we will not disclose the reasons here). The denominations for dollar bills are $$$1$$$, $$$5$$$, $$$10$$$, $$$20$$$, $$$100$$$. What is the minimum number of bills Allen could receive after withdrawing his entire balance?\n\nInput Format:\nThe first and only line of input contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^9$$$).\n\nOutput Format:\nOutput the minimum number of bills that Allen could receive.\n\nExamples:\nExample 1:\nInput:\n125\nOutput:\n3\n\nExample 2:\nInput:\n43\nOutput:\n5\n\nExample 3:\nInput:\n1000000000\nOutput:\n10000000\n\nNote:\nIn the first sample case, Allen can withdraw this with a $$$100$$$ dollar bill, a $$$20$$$ dollar bill, and a $$$5$$$ dollar bill. There is no way for Allen to receive $$$125$$$ dollars in one or two bills.\n\nIn the second sample case, Allen can withdraw two $$$20$$$ dollar bills and three $$$1$$$ dollar bills.\n\nIn the third sample case, Allen can withdraw $$$100000000$$$ (ten million!) $$$100$$$ dollar bills.",
    "examples": [
      {
        "input": "125",
        "output": "3"
      },
      {
        "input": "43",
        "output": "5"
      },
      {
        "input": "1000000000",
        "output": "10000000"
      }
    ],
    "solution": "t=int(input())\r\nx=[100,20,10,5,1]\r\ncount=0\r\nfor i in x:\r\n    count+=t//i\r\n    t%=i\r\nprint(count)",
    "explanation": "The problem is to minimize $$$x_1 + x_2 + x_3 + x_4 + x_5$$$ given that $$$x_1 + 5x_2 + 10x_3 + 20x_4 + 100x_5 = n.$$$ It is pretty simple to see that we can operate greedily: take as many $$$100$$$ as we can, then $$$20$$$, then $$$10$$$, etc.\nThe solutions works because each number in the sequence $$$1, 5, 10, 20, 100$$$ is a divisor of the number after it."
  },
  {
    "id": "946/A",
    "problem": "Title: Partition\n\nYou are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences.\n\nLet B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?\n\nInput Format:\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an ( - 100 \u2264 ai \u2264 100) \u2014 the elements of sequence a.\n\nOutput Format:\nPrint the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.\n\nExamples:\nExample 1:\nInput:\n3\n1 -2 0\nOutput:\n3\n\nExample 2:\nInput:\n6\n16 23 16 15 42 8\nOutput:\n120\n\nNote:\nIn the first example we may choose b = {1, 0}, c = { - 2}. Then B = 1, C =  - 2, B - C = 3.\n\nIn the second example we choose b = {16, 23, 16, 15, 42, 8}, c = {} (an empty sequence). Then B = 120, C = 0, B - C = 120.",
    "examples": [
      {
        "input": "3\n1 -2 0",
        "output": "3"
      },
      {
        "input": "6\n16 23 16 15 42 8",
        "output": "120"
      }
    ],
    "solution": "n = int(input())\nb, c = 0, 0\nfor i in map(int, input().split()):\n    if i < 0:\n        c += i\n    else:\n        b += i\n\nprint(b - c)\n\n \t   \t\t   \t \t  \t   \t   \t\t \t \t \t",
    "explanation": "The answer for this problem can be calculated by the next simple formula: $$\\sum_{i=1}^{n}|a_i|$$, where |ai| is the absolute value of ai."
  },
  {
    "id": "199/A",
    "problem": "Title: Hexadecimal's theorem\n\nRecently, a chaotic virus Hexadecimal advanced a new theorem which will shake the Universe. She thinks that each Fibonacci number can be represented as sum of three not necessary different Fibonacci numbers.\n\nLet's remember how Fibonacci numbers can be calculated. F0 = 0, F1 = 1, and all the next numbers are Fi = Fi - 2 + Fi - 1.\n\nSo, Fibonacci numbers make a sequence of numbers: 0, 1, 1, 2, 3, 5, 8, 13, ...\n\nIf you haven't run away from the PC in fear, you have to help the virus. Your task is to divide given Fibonacci number n by three not necessary different Fibonacci numbers or say that it is impossible.\n\nInput Format:\nThe input contains of a single integer n (0 \u2264 n < 109) \u2014 the number that should be represented by the rules described above. It is guaranteed that n is a Fibonacci number.\n\nOutput Format:\nOutput three required numbers: a, b and c. If there is no answer for the test you have to print \"I'm too stupid to solve this problem\" without the quotes.\n\nIf there are multiple answers, print any of them.\n\nExamples:\nExample 1:\nInput:\n3\nOutput:\n1 1 1\n\nExample 2:\nInput:\n13\nOutput:\n2 3 8",
    "examples": [
      {
        "input": "3",
        "output": "1 1 1"
      },
      {
        "input": "13",
        "output": "2 3 8"
      }
    ],
    "solution": "n = int(input())\nif n == 0:\n    print(0, 0, 0)\nelif n == 1:\n    print(0, 0, 1)\nelif n == 2:\n    print(0, 1, 1)\nelse:\n    arr = [0, 1]\n    i = 1\n    while True:\n        m = arr[i]+arr[i-1]\n        if m <= n:\n            arr.append(m)\n            i += 1\n        else:\n            break\n\n\n    print(arr[-2], arr[-4], arr[-5])\n\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "614/A",
    "problem": "Title: Link/Cut Tree\n\nProgrammer Rostislav got seriously interested in the Link/Cut Tree data structure, which is based on Splay trees. Specifically, he is now studying the expose procedure.\n\nUnfortunately, Rostislav is unable to understand the definition of this procedure, so he decided to ask programmer Serezha to help him. Serezha agreed to help if Rostislav solves a simple task (and if he doesn't, then why would he need Splay trees anyway?)\n\nGiven integers l, r and k, you need to print all powers of number k within range from l to r inclusive. However, Rostislav doesn't want to spent time doing this, as he got interested in playing a network game called Agar with Gleb. Help him!\n\nInput Format:\nThe first line of the input contains three space-separated integers l, r and k (1 \u2264 l \u2264 r \u2264 1018, 2 \u2264 k \u2264 109).\n\nOutput Format:\nPrint all powers of number k, that lie within range from l to r in the increasing order. If there are no such numbers, print \"-1\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n1 10 2\nOutput:\n1 2 4 8\n\nExample 2:\nInput:\n2 4 5\nOutput:\n-1\n\nNote:\nNote to the first sample: numbers 20 = 1, 21 = 2, 22 = 4, 23 = 8 lie within the specified range. The number 24 = 16 is greater then 10, thus it shouldn't be printed.",
    "examples": [
      {
        "input": "1 10 2",
        "output": "1 2 4 8"
      },
      {
        "input": "2 4 5",
        "output": "-1"
      }
    ],
    "solution": "l,r,k=map(int,input().split())\r\nf=0\r\nt=1\r\nwhile (t<=r):\r\n     if(t>=l):\r\n          f=1\r\n          print(t)\r\n     t*=k;\r\nif (not(f)):\r\n     print(-1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "401/A",
    "problem": "Title: Vanya and Cards\n\nVanya loves playing. He even has a special set of cards to play with. Each card has a single integer. The number on the card can be positive, negative and can even be equal to zero. The only limit is, the number on each card doesn't exceed x in the absolute value.\n\nNatasha doesn't like when Vanya spends a long time playing, so she hid all of his cards. Vanya became sad and started looking for the cards but he only found n of them. Vanya loves the balance, so he wants the sum of all numbers on found cards equal to zero. On the other hand, he got very tired of looking for cards. Help the boy and say what is the minimum number of cards does he need to find to make the sum equal to zero?\n\nYou can assume that initially Vanya had infinitely many cards with each integer number from  - x to x.\n\nInput Format:\nThe first line contains two integers: n (1 \u2264 n \u2264 1000) \u2014 the number of found cards and x (1 \u2264 x \u2264 1000) \u2014 the maximum absolute value of the number on a card. The second line contains n space-separated integers \u2014 the numbers on found cards. It is guaranteed that the numbers do not exceed x in their absolute value.\n\nOutput Format:\nPrint a single number \u2014 the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n3 2\n-1 1 2\nOutput:\n1\n\nExample 2:\nInput:\n2 3\n-2 -2\nOutput:\n2\n\nNote:\nIn the first sample, Vanya needs to find a single card with number -2.\n\nIn the second sample, Vanya needs to find two cards with number 2. He can't find a single card with the required number as the numbers on the lost cards do not exceed 3 in their absolute value.",
    "examples": [
      {
        "input": "3 2\n-1 1 2",
        "output": "1"
      },
      {
        "input": "2 3\n-2 -2",
        "output": "2"
      }
    ],
    "solution": "n,x=map(int,input().split())\r\nl=list(map(int,input().split()))\r\nimport math as m\r\nprint(m.ceil(abs(sum(l))/x))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "20/A",
    "problem": "Title: BerOS file system\n\nThe new operating system BerOS has a nice feature. It is possible to use any number of characters '/' as a delimiter in path instead of one traditional '/'. For example, strings //usr///local//nginx/sbin// and /usr/local/nginx///sbin are equivalent. The character '/' (or some sequence of such characters) at the end of the path is required only in case of the path to the root directory, which can be represented as single character '/'.\n\nA path called normalized if it contains the smallest possible number of characters '/'.\n\nYour task is to transform a given path to the normalized form.\n\nInput Format:\nThe first line of the input contains only lowercase Latin letters and character '/'\u00a0\u2014 the path to some directory. All paths start with at least one character '/'. The length of the given line is no more than 100 characters, it is not empty.\n\nOutput Format:\nThe path in normalized form.\n\nExamples:\nExample 1:\nInput:\n//usr///local//nginx/sbin\nOutput:\n/usr/local/nginx/sbin",
    "examples": [
      {
        "input": "//usr///local//nginx/sbin",
        "output": "/usr/local/nginx/sbin"
      }
    ],
    "solution": "#***************20A - BerOS file system***************#\r\n#author - @Divyesh Chhabra\r\n\r\nfrom math import *\r\nimport os\r\nimport random\r\nimport re\r\nimport sys\r\nfrom itertools import *\r\n\r\npath = input()\r\nnew = re.split(\"/\",path)\r\nnew_path = \"\"\r\nfor i in new:\r\n    if i == \"\":\r\n        continue\r\n    new_path += (i+\"/\")\r\nnew_path = new_path[:-1]\r\nprint(\"/\"+new_path)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "817/A",
    "problem": "Title: Treasure Hunt\n\nCaptain Bill the Hummingbird and his crew recieved an interesting challenge offer. Some stranger gave them a map, potion of teleportation and said that only this potion might help them to reach the treasure.\n\nBottle with potion has two values x and y written on it. These values define four moves which can be performed using the potion:\n\n- $$(a,b)\\rightarrow(a+x,b+y)$$\n- $$(a,b)\\rightarrow(a+x,b-y)$$\n- $$(a,b)\\rightarrow(a-x,b+y)$$\n- $$(a,b)\\rightarrow(a-x,b-y)$$\n\nMap shows that the position of Captain Bill the Hummingbird is (x1, y1) and the position of the treasure is (x2, y2).\n\nYou task is to tell Captain Bill the Hummingbird whether he should accept this challenge or decline. If it is possible for Captain to reach the treasure using the potion then output \"YES\", otherwise \"NO\" (without quotes).\n\nThe potion can be used infinite amount of times.\n\nInput Format:\nThe first line contains four integer numbers x1, y1, x2, y2 ( - 105 \u2264 x1, y1, x2, y2 \u2264 105) \u2014 positions of Captain Bill the Hummingbird and treasure respectively.\n\nThe second line contains two integer numbers x, y (1 \u2264 x, y \u2264 105) \u2014 values on the potion bottle.\n\nOutput Format:\nPrint \"YES\" if it is possible for Captain to reach the treasure using the potion, otherwise print \"NO\" (without quotes).\n\nExamples:\nExample 1:\nInput:\n0 0 0 6\n2 3\nOutput:\nYES\n\nExample 2:\nInput:\n1 1 3 6\n1 5\nOutput:\nNO\n\nNote:\nIn the first example there exists such sequence of moves:\n\n1. $$(0,0)\\rightarrow(2,3)$$ \u2014 the first type of move\n2. $$(2,3)\\rightarrow(0,6)$$ \u2014 the third type of move",
    "examples": [
      {
        "input": "0 0 0 6\n2 3",
        "output": "YES"
      },
      {
        "input": "1 1 3 6\n1 5",
        "output": "NO"
      }
    ],
    "solution": "x1, y1, x2, y2 = map(int, input().split())\r\nx, y = map(int, input().split())\r\nif abs(x1-x2)%x == abs(y1-y2)%y == 0 and abs(y2-y1+y*abs(x1-x2)/x)%(2*y) == 0:\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n",
    "explanation": "Firstly, let's approach this problem as if the steps were $$(a,b)\\to(a\\pm x,0)$$ and $$(a,b)\\to(0,b\\pm y)$$. Then the answer is \"YES\" if |x1\u2009-\u2009x2| mod x\u2009=\u20090 and |y1\u2009-\u2009y2| mod y\u2009=\u20090.\nIt's easy to see that if the answer to this problem is \"NO\" then the answer to the original one is also \"NO\".\nLet's return to the original problem and take a look at some sequence of steps. It ends in some point (xe,\u2009ye). Define cntx as $$\\frac{|x_{e}-x_{1}|}{x}$$ and cnty as $$\\frac{|y_{e}-y_{1}|}{y}$$. The parity of cntx is the same as the parity of cnty. It is like this because every type of move changes parity of both cntx and cnty.\nSo the answer is \"YES\" if |x1\u2009-\u2009x2| mod x\u2009=\u20090, |y1\u2009-\u2009y2| mod y\u2009=\u20090 and $$\\frac{|x_{1}-x_{2}|}{x}$$ mod $$2 = \\frac{|y_1 - y_2|}{y}$$ mod 2.\nOverall complexity: O(1)."
  },
  {
    "id": "285/A",
    "problem": "Title: Slightly Decreasing Permutations\n\nPermutation p is an ordered set of integers p1,  p2,  ...,  pn, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as pi. We'll call number n the size or the length of permutation p1,  p2,  ...,  pn.\n\nThe decreasing coefficient of permutation p1, p2, ..., pn is the number of such i (1 \u2264 i < n), that pi > pi + 1.\n\nYou have numbers n and k. Your task is to print the permutation of length n with decreasing coefficient k.\n\nInput Format:\nThe single line contains two space-separated integers: n, k (1 \u2264 n \u2264 105, 0 \u2264 k < n) \u2014 the permutation length and the decreasing coefficient.\n\nOutput Format:\nIn a single line print n space-separated integers: p1, p2, ..., pn \u2014 the permutation of length n with decreasing coefficient k.\n\nIf there are several permutations that meet this condition, print any of them. It is guaranteed that the permutation with the sought parameters exists.\n\nExamples:\nExample 1:\nInput:\n5 2\nOutput:\n1 5 2 4 3\n\nExample 2:\nInput:\n3 0\nOutput:\n1 2 3\n\nExample 3:\nInput:\n3 2\nOutput:\n3 2 1",
    "examples": [
      {
        "input": "5 2",
        "output": "1 5 2 4 3"
      },
      {
        "input": "3 0",
        "output": "1 2 3"
      },
      {
        "input": "3 2",
        "output": "3 2 1"
      }
    ],
    "solution": "(n, k) = map(int, input().split(' '))\n\nnums = []\nfor i in range(0, k):\n    nums.append(n - i)\n\nfor i in range(1, n - k + 1):\n    nums.append(i)\n\nprint(' '.join(map(str, nums)))\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "875/A",
    "problem": "Title: Classroom Watch\n\nEighth-grader Vova is on duty today in the class. After classes, he went into the office to wash the board, and found on it the number n. He asked what is this number and the teacher of mathematics Inna Petrovna answered Vova that n is the answer to the arithmetic task for first-graders. In the textbook, a certain positive integer x was given. The task was to add x to the sum of the digits of the number x written in decimal numeral system.\n\nSince the number n on the board was small, Vova quickly guessed which x could be in the textbook. Now he wants to get a program which will search for arbitrary values of the number n for all suitable values of x or determine that such x does not exist. Write such a program for Vova.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 109).\n\nOutput Format:\nIn the first line print one integer k\u00a0\u2014 number of different values of x satisfying the condition.\n\nIn next k lines print these values in ascending order.\n\nExamples:\nExample 1:\nInput:\n21\nOutput:\n1\n15\n\nExample 2:\nInput:\n20\nOutput:\n0\n\nNote:\nIn the first test case x = 15 there is only one variant: 15 + 1 + 5 = 21.\n\nIn the second test case there are no such x.",
    "examples": [
      {
        "input": "21",
        "output": "1\n15"
      },
      {
        "input": "20",
        "output": "0"
      }
    ],
    "solution": "# Author: lizi\r\n# Email: [email\u00a0protected]\r\n\r\nimport sys\r\nimport math\r\n\r\nn = int(input())\r\nans = []\r\nfor i in range(min(n,100)):\r\n    p = n - i\r\n    s = p\r\n    while p > 0:\r\n        s += p % 10\r\n        p = p // 10\r\n    #print(s,' ',p)\r\n    if s == n:\r\n        ans.append( n - i );\r\nprint(len(ans))\r\nans.sort()\r\nfor x in ans:\r\n    print(x)\r\n\r\n",
    "explanation": "For numbers that doesn't exceed 109 sum of digits doesn't exceed 100, so we can just iterate over all possible sums of digits x and check if sum of digits of n\u2009-\u2009x equals x."
  },
  {
    "id": "553/A",
    "problem": "Title: Kyoya and Colored Balls\n\nKyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen.\n\nInput Format:\nThe first line of input will have one integer k (1 \u2264 k \u2264 1000) the number of colors.\n\nThen, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 \u2264 ci \u2264 1000).\n\nThe total number of balls doesn't exceed 1000.\n\nOutput Format:\nA single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007.\n\nExamples:\nExample 1:\nInput:\n3\n2\n2\n1\nOutput:\n3\n\nExample 2:\nInput:\n4\n1\n2\n3\n4\nOutput:\n1680\n\nNote:\nIn the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are:",
    "examples": [
      {
        "input": "3\n2\n2\n1",
        "output": "3"
      },
      {
        "input": "4\n1\n2\n3\n4",
        "output": "1680"
      }
    ],
    "solution": "from math import comb\r\ndec=10**9 + 7\r\n\r\nk =int(input())\r\n\r\ncolor_counts = [0] * k\r\n\r\nfor i in range(0, k):\r\n    color_counts[i] = int(input())\r\n\r\nresult = 1\r\ncurr = color_counts[0]\r\n\r\nfor i in range(1,k):\r\n    result = result * comb(curr + color_counts[i] - 1 , color_counts[i] - 1) % dec\r\n    curr = curr + color_counts[i]\r\n\r\nprint(result)",
    "explanation": "Let fi be the number of ways to solve the problem using only the first i colors. We want to compute fn.\nInitially, we have f1\u2009=\u20091, since we only have a single color. Now, to go from fi to fi\u2009+\u20091, we note that we need to put a ball of color i\u2009+\u20091 at the very end, but the other balls of color i\u2009+\u20091 can go anywhere in the sequence. Thus, we can just multiply by the correct binomial coefficient. Thus, $$f_{i+1} = f_i \\cdot \\binom{c_1 + \\ldots + c_{i+1} - 1}{c_{i+1} - 1}$$. So, we just need to precompute binomial coefficients, and then evaluate the product."
  },
  {
    "id": "342/A",
    "problem": "Title: Xenia and Divisors\n\nXenia the mathematician has a sequence consisting of n (n is divisible by 3) positive integers, each of them is at most 7. She wants to split the sequence into groups of three so that for each group of three a, b, c the following conditions held:\n\n- a\u2009<\u2009b\u2009<\u2009c;\n- a divides b, b divides c.\n\nNaturally, Xenia wants each element of the sequence to belong to exactly one group of three. Thus, if the required partition exists, then it has $$\\frac{\\pi}{3}$$ groups of three.\n\nHelp Xenia, find the required partition or else say that it doesn't exist.\n\nInput Format:\nThe first line contains integer n (3 \u2264 n \u2264 99999) \u2014 the number of elements in the sequence. The next line contains n positive integers, each of them is at most 7.\n\nIt is guaranteed that n is divisible by 3.\n\nOutput Format:\nIf the required partition exists, print $$\\frac{\\pi}{3}$$ groups of three. Print each group as values of the elements it contains. You should print values in increasing order. Separate the groups and integers in groups by whitespaces. If there are multiple solutions, you can print any of them.\n\nIf there is no solution, print -1.\n\nExamples:\nExample 1:\nInput:\n6\n1 1 1 2 2 2\nOutput:\n-1\n\nExample 2:\nInput:\n6\n2 2 1 1 4 6\nOutput:\n1 2 4\n1 2 6",
    "examples": [
      {
        "input": "6\n1 1 1 2 2 2",
        "output": "-1"
      },
      {
        "input": "6\n2 2 1 1 4 6",
        "output": "1 2 4\n1 2 6"
      }
    ],
    "solution": "# 1 2 4\n# 1 2 6\n# 1 3 6\n\nn = int(input())\narr = list(map(int, input().split()))\n\nfrom collections import Counter\n\nc = Counter(arr)\n\nif 5 in arr or 7 in arr or arr.count(1) != n//3 or arr.count(2)+arr.count(3) != n//3 or (3 in arr and arr.count(3) > arr.count(6)):\n    print(-1)\nelse:\n    for i in range(n//3):\n        print(1, end=' ')\n        if c[2] > 0:\n            print(2, end=' ')\n            c[2] -= 1\n            if c[4] > 0:\n                print(4)\n                c[4] -= 1\n            else:\n                print(6)\n        else:\n            print(3, end=' ')\n            print(6)\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "469/A",
    "problem": "Title: I Wanna Be the Guy\n\nThere is a game called \"I Wanna Be the Guy\", consisting of n levels. Little X and his friend Little Y are addicted to the game. Each of them wants to pass the whole game.\n\nLittle X can pass only p levels of the game. And Little Y can pass only q levels of the game. You are given the indices of levels Little X can pass and the indices of levels Little Y can pass. Will Little X and Little Y pass the whole game, if they cooperate each other?\n\nInput Format:\nThe first line contains a single integer n (1 \u2264  n \u2264 100).\n\nThe next line contains an integer p (0 \u2264 p \u2264 n) at first, then follows p distinct integers a1, a2, ..., ap (1 \u2264 ai \u2264 n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.\n\nOutput Format:\nIf they can pass all the levels, print \"I become the guy.\". If it's impossible, print \"Oh, my keyboard!\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n4\n3 1 2 3\n2 2 4\nOutput:\nI become the guy.\n\nExample 2:\nInput:\n4\n3 1 2 3\n2 2 3\nOutput:\nOh, my keyboard!\n\nNote:\nIn the first sample, Little X can pass levels [1 2 3], and Little Y can pass level [2 4], so they can pass all the levels both.\n\nIn the second sample, no one can pass level 4.",
    "examples": [
      {
        "input": "4\n3 1 2 3\n2 2 4",
        "output": "I become the guy."
      },
      {
        "input": "4\n3 1 2 3\n2 2 3",
        "output": "Oh, my keyboard!"
      }
    ],
    "solution": "# Read input\r\nn = int(input())\r\np_info = list(map(int, input().split()))\r\nq_info = list(map(int, input().split()))\r\n\r\n# Create sets to store the levels Little X and Little Y can pass\r\np_levels = set(p_info[1:])\r\nq_levels = set(q_info[1:])\r\n\r\n# Create a set of all levels from 1 to n\r\nall_levels = set(range(1, n + 1))\r\n\r\n# Check if the union of the levels Little X and Little Y can pass is equal to all levels\r\nif p_levels.union(q_levels) == all_levels:\r\n    print(\"I become the guy.\")\r\nelse:\r\n    print(\"Oh, my keyboard!\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "442/A",
    "problem": "Title: Borya and Hanabi\n\nHave you ever played Hanabi? If not, then you've got to try it out! This problem deals with a simplified version of the game.\n\nOverall, the game has 25 types of cards (5 distinct colors and 5 distinct values). Borya is holding n cards. The game is somewhat complicated by the fact that everybody sees Borya's cards except for Borya himself. Borya knows which cards he has but he knows nothing about the order they lie in. Note that Borya can have multiple identical cards (and for each of the 25 types of cards he knows exactly how many cards of this type he has).\n\nThe aim of the other players is to achieve the state when Borya knows the color and number value of each of his cards. For that, other players can give him hints. The hints can be of two types: color hints and value hints.\n\nA color hint goes like that: a player names some color and points at all the cards of this color.\n\nSimilarly goes the value hint. A player names some value and points at all the cards that contain the value.\n\nDetermine what minimum number of hints the other players should make for Borya to be certain about each card's color and value.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of Borya's cards. The next line contains the descriptions of n cards. The description of each card consists of exactly two characters. The first character shows the color (overall this position can contain five distinct letters \u2014 R, G, B, Y, W). The second character shows the card's value (a digit from 1 to 5). Borya doesn't know exact order of the cards they lie in.\n\nOutput Format:\nPrint a single integer \u2014 the minimum number of hints that the other players should make.\n\nExamples:\nExample 1:\nInput:\n2\nG3 G3\nOutput:\n0\n\nExample 2:\nInput:\n4\nG4 R4 R3 B3\nOutput:\n2\n\nExample 3:\nInput:\n5\nB1 Y1 W1 G1 R1\nOutput:\n4\n\nNote:\nIn the first sample Borya already knows for each card that it is a green three.\n\nIn the second sample we can show all fours and all red cards.\n\nIn the third sample you need to make hints about any four colors.",
    "examples": [
      {
        "input": "2\nG3 G3",
        "output": "0"
      },
      {
        "input": "4\nG4 R4 R3 B3",
        "output": "2"
      },
      {
        "input": "5\nB1 Y1 W1 G1 R1",
        "output": "4"
      }
    ],
    "solution": "input()\r\np={ (1<< 'RGBYW'.index(c)) + (1<<int(k)+4) for c, k in input().split()}\r\nmn=20\r\nres=90\r\nfor i in range(1024):\r\n    if len(p)==len(set(i&j for j in p)):\r\n        mn=min(mn,bin(i).count('1'))\r\nprint(mn)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "426/A",
    "problem": "Title: Sereja and Mugs\n\nSereja showed an interesting game to his friends. The game goes like that. Initially, there is a table with an empty cup and n water mugs on it. Then all players take turns to move. During a move, a player takes a non-empty mug of water and pours all water from it into the cup. If the cup overfills, then we assume that this player lost.\n\nAs soon as Sereja's friends heard of the game, they wanted to play it. Sereja, on the other hand, wanted to find out whether his friends can play the game in such a way that there are no losers. You are given the volumes of all mugs and the cup. Also, you know that Sereja has (n - 1) friends. Determine if Sereja's friends can play the game so that nobody loses.\n\nInput Format:\nThe first line contains integers n and s (2 \u2264 n \u2264 100;\u00a01 \u2264 s \u2264 1000) \u2014 the number of mugs and the volume of the cup. The next line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10). Number ai means the volume of the i-th mug.\n\nOutput Format:\nIn a single line, print \"YES\" (without the quotes) if his friends can play in the described manner, and \"NO\" (without the quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\n3 4\n1 1 1\nOutput:\nYES\n\nExample 2:\nInput:\n3 4\n3 1 3\nOutput:\nYES\n\nExample 3:\nInput:\n3 4\n4 4 4\nOutput:\nNO",
    "examples": [
      {
        "input": "3 4\n1 1 1",
        "output": "YES"
      },
      {
        "input": "3 4\n3 1 3",
        "output": "YES"
      },
      {
        "input": "3 4\n4 4 4",
        "output": "NO"
      }
    ],
    "solution": "k = int(input().split()[1])\r\nif sum(sorted(list(map(int,input().split())))[:-1]) > k:\r\n    print('NO')\r\nelse:\r\n    print('YES')",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1007/A",
    "problem": "Title: Reorder the Array\n\nYou are given an array of integers. Vasya can permute (change order) its integers. He wants to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Help Vasya find the maximal number of such integers.\n\nFor instance, if we are given an array $$$[10, 20, 30, 40]$$$, we can permute it so that it becomes $$$[20, 40, 10, 30]$$$. Then on the first and the second positions the integers became larger ($$$20>10$$$, $$$40>20$$$) and did not on the third and the fourth, so for this permutation, the number that Vasya wants to maximize equals $$$2$$$. Read the note for the first example, there is one more demonstrative test case.\n\nHelp Vasya to permute integers in such way that the number of positions in a new array, where integers are greater than in the original one, is maximal.\n\nInput Format:\nThe first line contains a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$)\u00a0\u2014 the length of the array.\n\nThe second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\leq a_i \\leq 10^9$$$)\u00a0\u2014 the elements of the array.\n\nOutput Format:\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\nExamples:\nExample 1:\nInput:\n7\n10 1 1 1 5 5 3\nOutput:\n4\n\nExample 2:\nInput:\n5\n1 1 1 1 1\nOutput:\n0\n\nNote:\nIn the first sample, one of the best permutations is $$$[1, 5, 5, 3, 10, 1, 1]$$$. On the positions from second to fifth the elements became larger, so the answer for this permutation is 4.\n\nIn the second sample, there is no way to increase any element with a permutation, so the answer is 0.",
    "examples": [
      {
        "input": "7\n10 1 1 1 5 5 3",
        "output": "4"
      },
      {
        "input": "5\n1 1 1 1 1",
        "output": "0"
      }
    ],
    "solution": "from collections import Counter\r\nn=int(input())\r\np=list(map(int, input().split(' ')))\r\ns=Counter(p)\r\ny=[s[i] for i in s]\r\ny.sort()\r\ny=[0]+y\r\nm=len(y)\r\nans=0\r\ntem=0\r\nfor i in range (0,m):\r\n    if y[i]>tem:\r\n        ans=ans+(m-i-1)*(y[i]-tem)\r\n        tem=y[i]\r\nprint(ans)\r\n",
    "explanation": "The answer is $$$n$$$ minus maximal number of equal elements.\nLet the maximal number of equals be $$$x$$$. Let's proove that $$$n-x$$$ is reachable. It's clear that for every permutation of the array the answer will be the same, so let's sort the array in non-decreasing order. Now we should just make a left shift on $$$x$$$. After it the $$$n-x$$$ right elements will move to a position of a smaller element.\nNow let's proove that the answer is no more than $$$n-x$$$. Let's consider some permutation. It's known that every permutation breaks into cycles. Let's look at two occurences of the same number in the same cycle. Then there is at least one number between them which will move on a postion of a non-smaller element. Even if it the same occurence and even if the length of the cycle is $$$1$$$, we can say that for every occurence of this number there is at least one number which moves on a postion of a non-smaller one. So if some number occurs $$$x$$$ times, there are at least $$$x$$$ bad positions and therefore no more than $$$n-x$$$ good positions.\nTo count the number of equals you can, for instance, use std::map."
  },
  {
    "id": "416/A",
    "problem": "Title: Guess a number!\n\nA TV show called \"Guess a number!\" is gathering popularity. The whole Berland, the old and the young, are watching the show.\n\nThe rules are simple. The host thinks of an integer y and the participants guess it by asking questions to the host. There are four types of acceptable questions:\n\n- Is it true that y is strictly larger than number x?\n- Is it true that y is strictly smaller than number x?\n- Is it true that y is larger than or equal to number x?\n- Is it true that y is smaller than or equal to number x?\n\nOn each question the host answers truthfully, \"yes\" or \"no\".\n\nGiven the sequence of questions and answers, find any integer value of y that meets the criteria of all answers. If there isn't such value, print \"Impossible\".\n\nInput Format:\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10000) \u2014 the number of questions (and answers). Next n lines each contain one question and one answer to it. The format of each line is like that: \"sign x answer\", where the sign is:\n\n- \">\" (for the first type queries),\n- \"<\" (for the second type queries),\n- \">=\" (for the third type queries),\n- \"<=\" (for the fourth type queries).\n\nAll values of x are integer and meet the inequation  - 109 \u2264 x \u2264 109. The answer is an English letter \"Y\" (for \"yes\") or \"N\" (for \"no\").\n\nConsequtive elements in lines are separated by a single space.\n\nOutput Format:\nPrint any of such integers y, that the answers to all the queries are correct. The printed number y must meet the inequation  - 2\u00b7109 \u2264 y \u2264 2\u00b7109. If there are many answers, print any of them. If such value doesn't exist, print word \"Impossible\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n4\n>= 1 Y\n< 3 N\n<= -3 N\n> 55 N\nOutput:\n17\n\nExample 2:\nInput:\n2\n> 100 Y\n< -100 Y\nOutput:\nImpossible",
    "examples": [
      {
        "input": "4\n>= 1 Y\n< 3 N\n<= -3 N\n> 55 N",
        "output": "17"
      },
      {
        "input": "2\n> 100 Y\n< -100 Y",
        "output": "Impossible"
      }
    ],
    "solution": "\"\"\"\n\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557\n\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551\u255a\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2551\n\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551    \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u2588\u2588\u2551 \u255a\u2550\u2550\u2550\u2588\u2588\u2551\n\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2554\u255d\n\u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u255d\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551     \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\n\"\"\"\nm, M = -2000000000, 2000000000\nn = int(input())\nfor i in range(n):\n\ta, b, c = map(str, input().split())\n\tb = int(b)\n\tif c == \"Y\":\n\t\tif a == \">\":\n\t\t\tm = max(b + 1, m)\n\t\telif a == \">=\":\n\t\t\tm = max(b, m)\n\t\telif a == \"<\":\n\t\t\tM = min(b - 1, M)\n\t\telif a == \"<=\":\n\t\t\tM = min(M, b)\n\telse:\n\t\tif a == \">\":\n\t\t\tM = min(b, M)\n\t\telif a == \">=\":\n\t\t\tM = min(b - 1, M)\n\t\telif a == \"<\":\n\t\t\tm = max(m, b)\n\t\telse:\n\t\t\tm = max(b + 1, m)\nif m > M:print(\"Impossible\")\nelse:print(m)\n\n\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "49/A",
    "problem": "Title: Sleuth\n\nVasya plays the sleuth with his friends. The rules of the game are as follows: those who play for the first time, that is Vasya is the sleuth, he should investigate a \"crime\" and find out what is happening. He can ask any questions whatsoever that can be answered with \"Yes\" or \"No\". All the rest agree beforehand to answer the questions like that: if the question\u2019s last letter is a vowel, they answer \"Yes\" and if the last letter is a consonant, they answer \"No\". Of course, the sleuth knows nothing about it and his task is to understand that.\n\nUnfortunately, Vasya is not very smart. After 5 hours of endless stupid questions everybody except Vasya got bored. That\u2019s why Vasya\u2019s friends ask you to write a program that would give answers instead of them.\n\nThe English alphabet vowels are: A, E, I, O, U, Y\n\nThe English alphabet consonants are: B, C, D, F, G, H, J, K, L, M, N, P, Q, R, S, T, V, W, X, Z\n\nInput Format:\nThe single line contains a question represented by a non-empty line consisting of large and small Latin letters, spaces and a question mark. The line length does not exceed 100. It is guaranteed that the question mark occurs exactly once in the line \u2014 as the last symbol and that the line contains at least one letter.\n\nOutput Format:\nPrint answer for the question in a single line: YES if the answer is \"Yes\", NO if the answer is \"No\".\n\nRemember that in the reply to the question the last letter, not the last character counts. I. e. the spaces and the question mark do not count as letters.\n\nExamples:\nExample 1:\nInput:\nIs it a melon?\nOutput:\nNO\n\nExample 2:\nInput:\nIs it an apple?\nOutput:\nYES\n\nExample 3:\nInput:\nIs     it a banana ?\nOutput:\nYES\n\nExample 4:\nInput:\nIs   it an apple  and a  banana   simultaneouSLY?\nOutput:\nYES",
    "examples": [
      {
        "input": "Is it a melon?",
        "output": "NO"
      },
      {
        "input": "Is it an apple?",
        "output": "YES"
      },
      {
        "input": "Is     it a banana ?",
        "output": "YES"
      },
      {
        "input": "Is   it an apple  and a  banana   simultaneouSLY?",
        "output": "YES"
      }
    ],
    "solution": "n = input().lower()\r\nx = [97, 101, 105, 111, 117, 121]\r\ni = len(n) - 1\r\n\r\nwhile i+1:\r\n    on = ord(n[i])\r\n    if on in range(97, 123):\r\n        if on in x:\r\n            print('YES')\r\n        else:\r\n            print('NO')\r\n        break\r\n    i -= 1\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "408/A",
    "problem": "Title: Line to Cashier\n\nLittle Vasya went to the supermarket to get some groceries. He walked about the supermarket for a long time and got a basket full of products. Now he needs to choose the cashier to pay for the products.\n\nThere are n cashiers at the exit from the supermarket. At the moment the queue for the i-th cashier already has ki people. The j-th person standing in the queue to the i-th cashier has mi, j items in the basket. Vasya knows that:\n\n- the cashier needs 5 seconds to scan one item;\n- after the cashier scans each item of some customer, he needs 15 seconds to take the customer's money and give him the change.\n\nOf course, Vasya wants to select a queue so that he can leave the supermarket as soon as possible. Help him write a program that displays the minimum number of seconds after which Vasya can get to one of the cashiers.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of cashes in the shop. The second line contains n space-separated integers: k1, k2, ..., kn (1 \u2264 ki \u2264 100), where ki is the number of people in the queue to the i-th cashier.\n\nThe i-th of the next n lines contains ki space-separated integers: mi, 1, mi, 2, ..., mi, ki (1 \u2264 mi, j \u2264 100)\u00a0\u2014 the number of products the j-th person in the queue for the i-th cash has.\n\nOutput Format:\nPrint a single integer \u2014 the minimum number of seconds Vasya needs to get to the cashier.\n\nExamples:\nExample 1:\nInput:\n1\n1\n1\nOutput:\n20\n\nExample 2:\nInput:\n4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8\nOutput:\n100\n\nNote:\nIn the second test sample, if Vasya goes to the first queue, he gets to the cashier in 100\u00b75 + 15 = 515 seconds. But if he chooses the second queue, he will need 1\u00b75 + 2\u00b75 + 2\u00b75 + 3\u00b75 + 4\u00b715 = 100 seconds. He will need 1\u00b75 + 9\u00b75 + 1\u00b75 + 3\u00b715 = 100 seconds for the third one and 7\u00b75 + 8\u00b75 + 2\u00b715 = 105 seconds for the fourth one. Thus, Vasya gets to the cashier quicker if he chooses the second or the third queue.",
    "examples": [
      {
        "input": "1\n1\n1",
        "output": "20"
      },
      {
        "input": "4\n1 4 3 2\n100\n1 2 2 3\n1 9 1\n7 8",
        "output": "100"
      }
    ],
    "solution": "n = int(input())\nbest_answer = 999999999\nrandom_numbers = input()\n\nfor i in range(n):\n\tqueue = [int(x) for x in input().split(' ')]\n\tbest_answer = min(best_answer, sum(queue)*5 + len(queue)*15)\n\nprint(best_answer)\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1009/A",
    "problem": "Title: Game Shopping\n\nMaxim wants to buy some games at the local game shop. There are $$$n$$$ games in the shop, the $$$i$$$-th game costs $$$c_i$$$.\n\nMaxim has a wallet which can be represented as an array of integers. His wallet contains $$$m$$$ bills, the $$$j$$$-th bill has value $$$a_j$$$.\n\nGames in the shop are ordered from left to right, Maxim tries to buy every game in that order.\n\nWhen Maxim stands at the position $$$i$$$ in the shop, he takes the first bill from his wallet (if his wallet is empty then he proceeds to the next position immediately) and tries to buy the $$$i$$$-th game using this bill. After Maxim tried to buy the $$$n$$$-th game, he leaves the shop.\n\nMaxim buys the $$$i$$$-th game if and only if the value of the first bill (which he takes) from his wallet is greater or equal to the cost of the $$$i$$$-th game. If he successfully buys the $$$i$$$-th game, the first bill from his wallet disappears and the next bill becomes first. Otherwise Maxim leaves the first bill in his wallet (this bill still remains the first one) and proceeds to the next game.\n\nFor example, for array $$$c = [2, 4, 5, 2, 4]$$$ and array $$$a = [5, 3, 4, 6]$$$ the following process takes place: Maxim buys the first game using the first bill (its value is $$$5$$$), the bill disappears, after that the second bill (with value $$$3$$$) becomes the first one in Maxim's wallet, then Maxim doesn't buy the second game because $$$c_2 > a_2$$$, the same with the third game, then he buys the fourth game using the bill of value $$$a_2$$$ (the third bill becomes the first one in Maxim's wallet) and buys the fifth game using the bill of value $$$a_3$$$.\n\nYour task is to get the number of games Maxim will buy.\n\nInput Format:\nThe first line of the input contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 1000$$$) \u2014 the number of games and the number of bills in Maxim's wallet.\n\nThe second line of the input contains $$$n$$$ integers $$$c_1, c_2, \\dots, c_n$$$ ($$$1 \\le c_i \\le 1000$$$), where $$$c_i$$$ is the cost of the $$$i$$$-th game.\n\nThe third line of the input contains $$$m$$$ integers $$$a_1, a_2, \\dots, a_m$$$ ($$$1 \\le a_j \\le 1000$$$), where $$$a_j$$$ is the value of the $$$j$$$-th bill from the Maxim's wallet.\n\nOutput Format:\nPrint a single integer \u2014 the number of games Maxim will buy.\n\nExamples:\nExample 1:\nInput:\n5 4\n2 4 5 2 4\n5 3 4 6\nOutput:\n3\n\nExample 2:\nInput:\n5 2\n20 40 50 20 40\n19 20\nOutput:\n0\n\nExample 3:\nInput:\n6 4\n4 8 15 16 23 42\n1000 1000 1000 1000\nOutput:\n4\n\nNote:\nThe first example is described in the problem statement.\n\nIn the second example Maxim cannot buy any game because the value of the first bill in his wallet is smaller than the cost of any game in the shop.\n\nIn the third example the values of the bills in Maxim's wallet are large enough to buy any game he encounter until he runs out of bills in his wallet.",
    "examples": [
      {
        "input": "5 4\n2 4 5 2 4\n5 3 4 6",
        "output": "3"
      },
      {
        "input": "5 2\n20 40 50 20 40\n19 20",
        "output": "0"
      },
      {
        "input": "6 4\n4 8 15 16 23 42\n1000 1000 1000 1000",
        "output": "4"
      }
    ],
    "solution": "def main():\n    [n_games, n_bills] = [int(_) for _ in input().split()]\n    game_prices = [0] + [int(_) for _ in input().split()]\n    bills = [0] + [int(_) for _ in input().split()]\n\n    last_game = 0\n    last_bill = 0\n    count_games_bought = 0\n\n    while last_game < n_games and last_bill < n_bills:\n        last_bill += 1\n        bill = bills[last_bill]\n        try:\n            last_game = next(g for g in range(last_game + 1, n_games + 1) if game_prices[g] <= bill)\n            count_games_bought += 1\n        except StopIteration:\n            last_game = n_games\n\n    print(count_games_bought)\n\n\nif __name__ == '__main__':\n    main()\n",
    "explanation": "Let's keep the variable $$$pos$$$ which will represent the number of games Maxim buy. Initially $$$pos = 0$$$. Assume that arrays $$$a$$$ and $$$c$$$ are 0-indexed. Then let's iterate over all $$$i = 0 \\dots n - 1$$$ and if $$$pos < m$$$ and $$$a[pos] \\ge c[i]$$$ make $$$pos := pos + 1$$$. So $$$pos$$$ will be the answer after this cycle."
  },
  {
    "id": "468/A",
    "problem": "Title: 24 Game\n\nLittle X used to play a card game called \"24 Game\", but recently he has found it too easy. So he invented a new game.\n\nInitially you have a sequence of n integers: 1, 2, ..., n. In a single step, you can pick two of them, let's denote them a and b, erase them from the sequence, and append to the sequence either a + b, or a - b, or a \u00d7 b.\n\nAfter n - 1 steps there is only one number left. Can you make this number equal to 24?\n\nInput Format:\nThe first line contains a single integer n (1 \u2264 n \u2264 105).\n\nOutput Format:\nIf it's possible, print \"YES\" in the first line. Otherwise, print \"NO\" (without the quotes).\n\nIf there is a way to obtain 24 as the result number, in the following n - 1 lines print the required operations an operation per line. Each operation should be in form: \"a op b = c\". Where a and b are the numbers you've picked at this operation; op is either \"+\", or \"-\", or \"*\"; c is the result of corresponding operation. Note, that the absolute value of c mustn't be greater than 1018. The result of the last operation must be equal to 24. Separate operator sign and equality sign from numbers with spaces.\n\nIf there are multiple valid answers, you may print any of them.\n\nExamples:\nExample 1:\nInput:\n1\nOutput:\nNO\n\nExample 2:\nInput:\n8\nOutput:\nYES\n8 * 7 = 56\n6 * 5 = 30\n3 - 4 = -1\n1 - 2 = -1\n30 - -1 = 31\n56 - 31 = 25\n25 + -1 = 24",
    "examples": [
      {
        "input": "1",
        "output": "NO"
      },
      {
        "input": "8",
        "output": "YES\n8 * 7 = 56\n6 * 5 = 30\n3 - 4 = -1\n1 - 2 = -1\n30 - -1 = 31\n56 - 31 = 25\n25 + -1 = 24"
      }
    ],
    "solution": "n = int(input())\n \nif n < 4:\n    print( 'NO')\nelif n % 2 == 0:\n    print ('YES')\n    print ('1 + 2 = 3')\n    print ('3 + 3 = 6')\n    print ('6 * 4 = 24')\n    for i in range(5, n + 1, 2):\n        a, b = i, i + 1\n        print( '%d - %d = 1' % (b, a))\n        print ('24 * 1 = 24')\nelse:\n    print ('YES')\n    print ('2 + 5 = 7')\n    print ('7 * 3 = 21')\n    print ('21 + 4 = 25')\n    print ('25 - 1 = 24')\n    for i in range(6, n + 1, 2):\n        a, b = i, i + 1\n        print( '%d - %d = 1' % (b, a))\n        print ('24 * 1 = 24')\n\n  \t  \t\t\t   \t   \t\t\t  \t  \t  \t\t  \t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "712/A",
    "problem": "Title: Memory and Crow\n\nThere are n integers b1, b2, ..., bn written in a row. For all i from 1 to n, values ai are defined by the crows performing the following procedure:\n\n- The crow sets ai initially 0.\n- The crow then adds bi to ai, subtracts bi\u2009+\u20091, adds the bi\u2009+\u20092 number, and so on until the n'th number. Thus, ai\u2009=\u2009bi\u2009-\u2009bi\u2009+\u20091\u2009+\u2009bi\u2009+\u20092\u2009-\u2009bi\u2009+\u20093....\n\nMemory gives you the values a1, a2, ..., an, and he now wants you to find the initial numbers b1, b2, ..., bn written in the row? Can you do it?\n\nInput Format:\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 the number of integers written in the row.\n\nThe next line contains n, the i'th of which is ai ( - 109 \u2264 ai \u2264 109)\u00a0\u2014 the value of the i'th number.\n\nOutput Format:\nPrint n integers corresponding to the sequence b1, b2, ..., bn. It's guaranteed that the answer is unique and fits in 32-bit integer type.\n\nExamples:\nExample 1:\nInput:\n5\n6 -4 8 -2 3\nOutput:\n2 4 6 1 3\n\nExample 2:\nInput:\n5\n3 -2 -1 5 6\nOutput:\n1 -3 4 11 6\n\nNote:\nIn the first sample test, the crows report the numbers 6, - 4, 8, - 2, and 3 when he starts at indices 1, 2, 3, 4 and 5 respectively. It is easy to check that the sequence 2 4 6 1 3 satisfies the reports. For example, 6 = 2 - 4 + 6 - 1 + 3, and  - 4 = 4 - 6 + 1 - 3.\n\nIn the second sample test, the sequence 1,  - 3, 4, 11, 6 satisfies the reports. For example, 5 = 11 - 6 and 6 = 6.",
    "examples": [
      {
        "input": "5\n6 -4 8 -2 3",
        "output": "2 4 6 1 3"
      },
      {
        "input": "5\n3 -2 -1 5 6",
        "output": "1 -3 4 11 6"
      }
    ],
    "solution": "n=int(input())\r\nv=[int(i) for i in input().split()]\r\nb=[v[i]+v[i+1] for i in range(n-1)]\r\nb.append(v[-1])\r\nfor i in range(n):\r\n    print(b[i],end=\" \")\r\n",
    "explanation": "Note that b[i]\u2009+\u2009b[i\u2009+\u20091]\u2009=\u2009a[i]. Use the initial condition b[n]\u2009=\u2009a[n] and we can figure out the entire array a."
  },
  {
    "id": "534/A",
    "problem": "Title: Exam\n\nAn exam for n students will take place in a long and narrow room, so the students will sit in a line in some order. The teacher suspects that students with adjacent numbers (i and i + 1) always studied side by side and became friends and if they take an exam sitting next to each other, they will help each other for sure.\n\nYour task is to choose the maximum number of students and make such an arrangement of students in the room that no two students with adjacent numbers sit side by side.\n\nInput Format:\nA single line contains integer n (1 \u2264 n \u2264 5000) \u2014 the number of students at an exam.\n\nOutput Format:\nIn the first line print integer k \u2014 the maximum number of students who can be seated so that no two students with adjacent numbers sit next to each other.\n\nIn the second line print k distinct integers a1, a2, ..., ak (1 \u2264 ai \u2264 n), where ai is the number of the student on the i-th position. The students on adjacent positions mustn't have adjacent numbers. Formally, the following should be true: |ai - ai + 1| \u2260 1 for all i from 1 to k - 1.\n\nIf there are several possible answers, output any of them.\n\nExamples:\nExample 1:\nInput:\n6\nOutput:\n6\n1 5 3 6 2 4\n\nExample 2:\nInput:\n3\nOutput:\n2\n1 3",
    "examples": [
      {
        "input": "6",
        "output": "6\n1 5 3 6 2 4"
      },
      {
        "input": "3",
        "output": "2\n1 3"
      }
    ],
    "solution": "def odd(lst,n):\r\n    for i in range(1,n+1,2):\r\n        lst.append(i)\r\n    \r\ndef even(lst,n):\r\n        start=2\r\n        if len(lst)==1 or n==3:\r\n            start=4\r\n        for j in range(start,n+1,2):\r\n            lst.append(j)    \r\n\r\nn=int(input())\r\nlst=[]\r\n\r\nif n%2==0 and n>2:\r\n    even(lst, n)\r\n    odd(lst, n)  \r\n   \r\nelse:\r\n    \r\n    odd(lst, n)\r\n    even(lst, n)\r\nprint(len(lst))\r\nprint(*lst)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "455/A",
    "problem": "Title: Boredom\n\nAlex doesn't like boredom. That's why whenever he gets bored, he comes up with games. One long winter evening he came up with a game and decided to play it.\n\nGiven a sequence a consisting of n integers. The player can make several steps. In a single step he can choose an element of the sequence (let's denote it ak) and delete it, at that all elements equal to ak + 1 and ak - 1 also must be deleted from the sequence. That step brings ak points to the player.\n\nAlex is a perfectionist, so he decided to get as many points as possible. Help him.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 105) that shows how many numbers are in Alex's sequence.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 105).\n\nOutput Format:\nPrint a single integer \u2014 the maximum number of points that Alex can earn.\n\nExamples:\nExample 1:\nInput:\n2\n1 2\nOutput:\n2\n\nExample 2:\nInput:\n3\n1 2 3\nOutput:\n4\n\nExample 3:\nInput:\n9\n1 2 1 3 2 2 2 2 3\nOutput:\n10\n\nNote:\nConsider the third test example. At first step we need to choose any element equal to 2. After that step our sequence looks like this [2, 2, 2, 2]. Then we do 4 steps, on each step we choose any element equals to 2. In total we earn 10 points.",
    "examples": [
      {
        "input": "2\n1 2",
        "output": "2"
      },
      {
        "input": "3\n1 2 3",
        "output": "4"
      },
      {
        "input": "9\n1 2 1 3 2 2 2 2 3",
        "output": "10"
      }
    ],
    "solution": "n = int(input())\r\nread = list(map(int, input().split()))\r\nread.sort()\r\ncount = {}\r\nexist = set()\r\npoints = [[0] * 100001 for i in range(0, 2)]\r\nfor i in range(0, n):\r\n    if not read[i] in count:\r\n        count[read[i]] = 1\r\n        exist.add(read[i])\r\n    else:\r\n        count[read[i]] += 1\r\nfor i in range(0, read[n-1] + 1):\r\n    if not (i in exist):\r\n        points[0][i] = max(points[0][i-1], points[1][i-1])\r\n        points[1][i] = points[0][i]\r\n        continue\r\n    points[0][i] = max(points[0][i-1], points[1][i-1])\r\n    points[1][i] = points[0][i-1] + i*count[i]\r\nprint(max(points[0][read[n-1]], points[1][read[n-1]]))\r\n# \u8346\u5c79\u7136 \u5316\u5b66\u4e0e\u5206\u5b50\u5de5\u7a0b\u5b66\u9662 2300011884\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "950/A",
    "problem": "Title: Left-handers, Right-handers and Ambidexters\n\nYou are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\nInput Format:\nThe only line contains three integers l, r and a (0 \u2264 l, r, a \u2264 100) \u2014 the number of left-handers, the number of right-handers and the number of ambidexters at the training.\n\nOutput Format:\nPrint a single even integer\u00a0\u2014 the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\nExamples:\nExample 1:\nInput:\n1 4 2\nOutput:\n6\n\nExample 2:\nInput:\n5 5 5\nOutput:\n14\n\nExample 3:\nInput:\n0 2 0\nOutput:\n0\n\nNote:\nIn the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.\n\nIn the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.",
    "examples": [
      {
        "input": "1 4 2",
        "output": "6"
      },
      {
        "input": "5 5 5",
        "output": "14"
      },
      {
        "input": "0 2 0",
        "output": "0"
      }
    ],
    "solution": "def li():\r\n    return list(map(int,input().split()))\r\ndef gi(n):\r\n    return [list(map(int,input().split())) for _ in range(n)]\r\n\r\n# File input\r\n\r\n# import sys\r\n# sys.stdin = open('user.txt','r')\r\n\r\nl,r,a = li()\r\n\r\nif max(l,r) - min(l,r) > a:\r\n    print((min(l,r)+a) * 2)\r\nelse:\r\n    print((max(l,r) + (a - (max(l,r) - min(l,r))) // 2) * 2)",
    "explanation": "Iterate over size of the team. Now you know how many players should play with left hand, but are not left-handed (because there are no so much left-handed players). The same with right hand. Just check if sum of these values is not more than number of ambidexters.\nBONUS (easy): Solve this problem in O(1) time.\nBONUS (easy): Now you have many millipedes with n hands. Each millipede can either play with one hand or is ambidexter and can play with any hand. For each number of hand you know number of millipedes can play with it and number of ambidexters. Find out maximum number of team of millipedes in which there is equal amount of millipedes which play with some hand."
  },
  {
    "id": "911/A",
    "problem": "Title: Nearest Minimums\n\nYou are given an array of n integer numbers a0, a1, ..., an - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\nInput Format:\nThe first line contains positive integer n (2 \u2264 n \u2264 105) \u2014 size of the given array. The second line contains n integers a0, a1, ..., an - 1 (1 \u2264 ai \u2264 109) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\nOutput Format:\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\nExamples:\nExample 1:\nInput:\n2\n3 3\nOutput:\n1\n\nExample 2:\nInput:\n3\n5 6 5\nOutput:\n2\n\nExample 3:\nInput:\n9\n2 1 3 5 4 1 2 3 1\nOutput:\n3",
    "examples": [
      {
        "input": "2\n3 3",
        "output": "1"
      },
      {
        "input": "3\n5 6 5",
        "output": "2"
      },
      {
        "input": "9\n2 1 3 5 4 1 2 3 1",
        "output": "3"
      }
    ],
    "solution": "\n\nn = int(input())\n\nA = [int(x) for x in input().split()]\n\nm = min(A)\n\nA = [i for i, x in enumerate(A) if x == m]\n\nprint(min([A[i + 1] - A[i] for i in range(len(A) - 1)]))\n",
    "explanation": "This task can be done by one array traversal. Maintain cur \u2014 current minimum value, pos \u2014 position of the last occurrence of cur, ans \u2014 current minumum distance between two occurrences of cur. Now for each i if ai\u2009<\u2009cur then do cur:\u2009\u2009=\u2009ai, pos:\u2009\u2009=\u2009i, ans:\u2009\u2009=\u2009\u221e. For ai\u2009=\u2009cur do ans\u2009=\u2009min(ans,\u2009i\u2009-\u2009pos), pos:\u2009\u2009=\u2009i. In the end cur will be the global minimum of array and ans will keep the closest its occurrences.\nOverall complexity: O(n)."
  },
  {
    "id": "713/A",
    "problem": "Title: Sonya and Queries\n\nToday Sonya learned about long integers and invited all her friends to share the fun. Sonya has an initially empty multiset with integers. Friends give her t queries, each of one of the following type:\n\n1. +\u2009 ai\u00a0\u2014 add non-negative integer ai to the multiset. Note, that she has a multiset, thus there may be many occurrences of the same integer.\n2. -\u2009 ai\u00a0\u2014 delete a single occurrence of non-negative integer ai from the multiset. It's guaranteed, that there is at least one ai in the multiset.\n3. ? s\u00a0\u2014 count the number of integers in the multiset (with repetitions) that match some pattern s consisting of 0 and 1. In the pattern, 0 stands for the even digits, while 1 stands for the odd. Integer x matches the pattern s, if the parity of the i-th from the right digit in decimal notation matches the i-th from the right digit of the pattern. If the pattern is shorter than this integer, it's supplemented with 0-s from the left. Similarly, if the integer is shorter than the pattern its decimal notation is supplemented with the 0-s from the left.\n\nFor example, if the pattern is s = 010, than integers 92, 2212, 50 and 414 match the pattern, while integers 3, 110, 25 and 1030 do not.\n\nInput Format:\nThe first line of the input contains an integer t (1 \u2264 t \u2264 100 000)\u00a0\u2014 the number of operation Sonya has to perform.\n\nNext t lines provide the descriptions of the queries in order they appear in the input file. The i-th row starts with a character ci\u00a0\u2014 the type of the corresponding operation. If ci is equal to '+' or '-' then it's followed by a space and an integer ai (0 \u2264 ai < 1018) given without leading zeroes (unless it's 0). If ci equals '?' then it's followed by a space and a sequence of zeroes and onse, giving the pattern of length no more than 18.\n\nIt's guaranteed that there will be at least one query of type '?'.\n\nIt's guaranteed that any time some integer is removed from the multiset, there will be at least one occurrence of this integer in it.\n\nOutput Format:\nFor each query of the third type print the number of integers matching the given pattern. Each integer is counted as many times, as it appears in the multiset at this moment of time.\n\nExamples:\nExample 1:\nInput:\n12\n+ 1\n+ 241\n? 1\n+ 361\n- 241\n? 0101\n+ 101\n? 101\n- 101\n? 101\n+ 4000\n? 0\nOutput:\n2\n1\n2\n1\n1\n\nExample 2:\nInput:\n4\n+ 200\n+ 200\n- 200\n? 0\nOutput:\n1\n\nNote:\nConsider the integers matching the patterns from the queries of the third type. Queries are numbered in the order they appear in the input.\n\n1. 1 and 241.\n2. 361.\n3. 101 and 361.\n4. 361.\n5. 4000.",
    "examples": [
      {
        "input": "12\n+ 1\n+ 241\n? 1\n+ 361\n- 241\n? 0101\n+ 101\n? 101\n- 101\n? 101\n+ 4000\n? 0",
        "output": "2\n1\n2\n1\n1"
      },
      {
        "input": "4\n+ 200\n+ 200\n- 200\n? 0",
        "output": "1"
      }
    ],
    "solution": "n = int(input())\r\na = []\r\nwk1 = \"0\" * 18\r\nrules = str.maketrans(\"0123456789\", \"0101010101\")\r\ntrans = lambda x : str.translate(x, rules)\r\nd = {}\r\nfor _ in range(n):\r\n    x, y = input().split()\r\n    y = int(trans(y), 2)\r\n    if x == \"+\":\r\n        d[y] = d.get(y, 0) + 1\r\n    elif x == \"-\":\r\n        d[y] -= 1\r\n    elif x == \"?\":\r\n        print(d.get(y, 0))\r\n\r\n\r\n",
    "explanation": "Lets exchange every digit by value of digit modulo 2 and receive binary string. We will convert it to binary form in number r. G \u2014 array for counts. If we have '+' query we increase G[r]. If we have '-' query we decrease G[r]. Otherwise we output G[r]."
  },
  {
    "id": "895/A",
    "problem": "Title: Pizza Separation\n\nStudents Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to ai. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.\n\nInput Format:\nThe first line contains one integer n (1 \u2264 n \u2264 360) \u00a0\u2014 the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 360) \u00a0\u2014 the angles of the sectors into which the pizza was cut. The sum of all ai is 360.\n\nOutput Format:\nPrint one integer \u00a0\u2014 the minimal difference between angles of sectors that will go to Vasya and Petya.\n\nExamples:\nExample 1:\nInput:\n4\n90 90 90 90\nOutput:\n0\n\nExample 2:\nInput:\n3\n100 100 160\nOutput:\n40\n\nExample 3:\nInput:\n1\n360\nOutput:\n360\n\nExample 4:\nInput:\n4\n170 30 150 10\nOutput:\n0\n\nNote:\nIn first sample Vasya can take 1 and 2 pieces, Petya can take 3 and 4 pieces. Then the answer is |(90 + 90) - (90 + 90)| = 0.\n\nIn third sample there is only one piece of pizza that can be taken by only one from Vasya and Petya. So the answer is |360 - 0| = 360.\n\nIn fourth sample Vasya can take 1 and 4 pieces, then Petya will take 2 and 3 pieces. So the answer is |(170 + 10) - (30 + 150)| = 0.\n\nPicture explaning fourth sample:\n\nBoth red and green sectors consist of two adjacent pieces of pizza. So Vasya can take green sector, then Petya will take red sector.",
    "examples": [
      {
        "input": "4\n90 90 90 90",
        "output": "0"
      },
      {
        "input": "3\n100 100 160",
        "output": "40"
      },
      {
        "input": "1\n360",
        "output": "360"
      },
      {
        "input": "4\n170 30 150 10",
        "output": "0"
      }
    ],
    "solution": "n=int(input())\r\na=[int (i) for i in input().split()]\r\n\r\nmin=361\r\nfor i in range(n):\r\n  for j in range(i, n):\r\n    if -min<sum(a[0:i])+sum(a[j:])-sum(a[i:j])<min:\r\n      min=sum(a[0:i])+sum(a[j:])-sum(a[i:j])\r\n      if min<0:\r\n        min*=-1\r\n        \r\nprint(min)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "8/A",
    "problem": "Title: Train and Peter\n\nPeter likes to travel by train. He likes it so much that on the train he falls asleep.\n\nOnce in summer Peter was going by train from city A to city B, and as usual, was sleeping. Then he woke up, started to look through the window and noticed that every railway station has a flag of a particular colour.\n\nThe boy started to memorize the order of the flags' colours that he had seen. But soon he fell asleep again. Unfortunately, he didn't sleep long, he woke up and went on memorizing the colours. Then he fell asleep again, and that time he slept till the end of the journey.\n\nAt the station he told his parents about what he was doing, and wrote two sequences of the colours that he had seen before and after his sleep, respectively.\n\nPeter's parents know that their son likes to fantasize. They give you the list of the flags' colours at the stations that the train passes sequentially on the way from A to B, and ask you to find out if Peter could see those sequences on the way from A to B, or from B to A. Remember, please, that Peter had two periods of wakefulness.\n\nPeter's parents put lowercase Latin letters for colours. The same letter stands for the same colour, different letters \u2014 for different colours.\n\nInput Format:\nThe input data contains three lines. The first line contains a non-empty string, whose length does not exceed 105, the string consists of lowercase Latin letters \u2014 the flags' colours at the stations on the way from A to B. On the way from B to A the train passes the same stations, but in reverse order.\n\nThe second line contains the sequence, written by Peter during the first period of wakefulness. The third line contains the sequence, written during the second period of wakefulness. Both sequences are non-empty, consist of lowercase Latin letters, and the length of each does not exceed 100 letters. Each of the sequences is written in chronological order.\n\nOutput Format:\nOutput one of the four words without inverted commas:\n\n- \u00abforward\u00bb \u2014 if Peter could see such sequences only on the way from A to B;\n- \u00abbackward\u00bb \u2014 if Peter could see such sequences on the way from B to A;\n- \u00abboth\u00bb \u2014 if Peter could see such sequences both on the way from A to B, and on the way from B to A;\n- \u00abfantasy\u00bb \u2014 if Peter could not see such sequences.\n\nExamples:\nExample 1:\nInput:\natob\na\nb\nOutput:\nforward\n\nExample 2:\nInput:\naaacaaa\naca\naa\nOutput:\nboth\n\nNote:\nIt is assumed that the train moves all the time, so one flag cannot be seen twice. There are no flags at stations A and B.",
    "examples": [
      {
        "input": "atob\na\nb",
        "output": "forward"
      },
      {
        "input": "aaacaaa\naca\naa",
        "output": "both"
      }
    ],
    "solution": "import string\r\ns = input()\r\nx = input()\r\ny = input()\r\na = False\r\nb = False\r\nif x in s:\r\n    if y in s[s.find(x) + len(x):]:\r\n        a = True\r\ns = s[::-1]\r\nif x in s:\r\n    if y in s[s.find(x) + len(x):]:\r\n        b = True\r\nif a and b:\r\n    print(\"both\")\r\nelif a:\r\n    print(\"forward\")\r\nelif b:\r\n    print(\"backward\")\r\nelse:\r\n    print(\"fantasy\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "769/A",
    "problem": "Title: Year of University Entrance\n\nThere is the faculty of Computer Science in Berland. In the social net \"TheContact!\" for each course of this faculty there is the special group whose name equals the year of university entrance of corresponding course of students at the university.\n\nEach of students joins the group of his course and joins all groups for which the year of student's university entrance differs by no more than x from the year of university entrance of this student, where x \u2014 some non-negative integer. A value x is not given, but it can be uniquely determined from the available data. Note that students don't join other groups.\n\nYou are given the list of groups which the student Igor joined. According to this information you need to determine the year of Igor's university entrance.\n\nInput Format:\nThe first line contains the positive odd integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a1, a2, ..., an (2010 \u2264 ai \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\nOutput Format:\nPrint the year of Igor's university entrance.\n\nExamples:\nExample 1:\nInput:\n3\n2014 2016 2015\nOutput:\n2015\n\nExample 2:\nInput:\n1\n2050\nOutput:\n2050\n\nNote:\nIn the first test the value x = 1. Igor entered the university in 2015. So he joined groups members of which are students who entered the university in 2014, 2015 and 2016.\n\nIn the second test the value x = 0. Igor entered only the group which corresponds to the year of his university entrance.",
    "examples": [
      {
        "input": "3\n2014 2016 2015",
        "output": "2015"
      },
      {
        "input": "1\n2050",
        "output": "2050"
      }
    ],
    "solution": "n = int(input())\r\ng = list(map(int, input().split()))\r\nprint(sum(g) // n)\r\n",
    "explanation": "This task can be solved in several ways. The simplest of them is \u2014 to put all given integers to an array, sort out it and print the median of the resulting array (it means that the element which is in the middle of it)."
  },
  {
    "id": "804/A",
    "problem": "Title: Find Amir\n\nA few years ago Sajjad left his school and register to another one due to security reasons. Now he wishes to find Amir, one of his schoolmates and good friends.\n\nThere are n schools numerated from 1 to n. One can travel between each pair of them, to do so, he needs to buy a ticket. The ticker between schools i and j costs $$(i+j) \\bmod (n+1)$$ and can be used multiple times. Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school.\n\nInput Format:\nThe first line contains a single integer n (1 \u2264 n \u2264 105)\u00a0\u2014 the number of schools.\n\nOutput Format:\nPrint single integer: the minimum cost of tickets needed to visit all schools.\n\nExamples:\nExample 1:\nInput:\n2\nOutput:\n0\n\nExample 2:\nInput:\n10\nOutput:\n4\n\nNote:\nIn the first example we can buy a ticket between the schools that costs $$( 1 + 2 ) \\bmod ( 2 + 1 ) = 0$$.",
    "examples": [
      {
        "input": "2",
        "output": "0"
      },
      {
        "input": "10",
        "output": "4"
      }
    ],
    "solution": "from math import ceil\r\nn = int(input())\r\nprint(ceil(max(0, n/2-1)))",
    "explanation": "Consider pairs of schools cost of their traverse is 0:\n$${ \\{ 1, n \\} }, { \\{ 2, n - 1 \\} }, { \\{ 3, n - 2 \\} } \\ldots, { \\left\\{ \\left\\lfloor { \\frac { x } { 2 } } \\right\\rfloor, \\left\\lceil { \\frac { x } { 2 } } \\right\\rceil + 1 \\right\\} }$$.\nConnect this pairs with traversing from the second of each pair to the first of the next pair.\nSo if n\u2009=\u20092\u00b7k the answer is k\u2009-\u20091 and if n\u2009=\u20092\u00b7k\u2009+\u20091 the answer is k.\nThe minimum number of direct paths should be n\u2009-\u20091, so because of using all of 0s and make the other direct paths with 1s the path is minimum possible spanning tree."
  },
  {
    "id": "242/A",
    "problem": "Title: Heads or Tails\n\nPetya and Vasya are tossing a coin. Their friend Valera is appointed as a judge. The game is very simple. First Vasya tosses a coin x times, then Petya tosses a coin y times. If the tossing player gets head, he scores one point. If he gets tail, nobody gets any points. The winner is the player with most points by the end of the game. If boys have the same number of points, the game finishes with a draw.\n\nAt some point, Valera lost his count, and so he can not say exactly what the score is at the end of the game. But there are things he remembers for sure. He remembers that the entire game Vasya got heads at least a times, and Petya got heads at least b times. Moreover, he knows that the winner of the game was Vasya. Valera wants to use this information to know every possible outcome of the game, which do not contradict his memories.\n\nInput Format:\nThe single line contains four integers x, y, a, b (1 \u2264 a \u2264 x \u2264 100, 1 \u2264 b \u2264 y \u2264 100). The numbers on the line are separated by a space.\n\nOutput Format:\nIn the first line print integer n \u2014 the number of possible outcomes of the game. Then on n lines print the outcomes. On the i-th line print a space-separated pair of integers ci, di \u2014 the number of heads Vasya and Petya got in the i-th outcome of the game, correspondingly. Print pairs of integers (ci, di) in the strictly increasing order.\n\nLet us remind you that the pair of numbers (p1, q1) is less than the pair of numbers (p2, q2), if p1 < p2, or p1 = p2 and also q1 < q2.\n\nExamples:\nExample 1:\nInput:\n3 2 1 1\nOutput:\n3\n2 1\n3 1\n3 2\n\nExample 2:\nInput:\n2 4 2 2\nOutput:\n0",
    "examples": [
      {
        "input": "3 2 1 1",
        "output": "3\n2 1\n3 1\n3 2"
      },
      {
        "input": "2 4 2 2",
        "output": "0"
      }
    ],
    "solution": "x,y,a,b=map(int,input().split())\r\nd=list()\r\nfor i in range(a,x+1):\r\n    for j in range(b,y+1):\r\n        if j<i:\r\n            d.append((i,j))\r\nprint(len(d))\r\nfor el in d:\r\n    print(*el)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "133/A",
    "problem": "Title: HQ9+\n\nHQ9+ is a joke programming language which has only four one-character instructions:\n\n- \"H\" prints \"Hello, World!\",\n- \"Q\" prints the source code of the program itself,\n- \"9\" prints the lyrics of \"99 Bottles of Beer\" song,\n- \"+\" increments the value stored in the internal accumulator.\n\nInstructions \"H\" and \"Q\" are case-sensitive and must be uppercase. The characters of the program which are not instructions are ignored.\n\nYou are given a program written in HQ9+. You have to figure out whether executing this program will produce any output.\n\nInput Format:\nThe input will consist of a single line p which will give a program in HQ9+. String p will contain between 1 and 100 characters, inclusive. ASCII-code of each character of p will be between 33 (exclamation mark) and 126 (tilde), inclusive.\n\nOutput Format:\nOutput \"YES\", if executing the program will produce any output, and \"NO\" otherwise.\n\nExamples:\nExample 1:\nInput:\nHi!\nOutput:\nYES\n\nExample 2:\nInput:\nCodeforces\nOutput:\nNO\n\nNote:\nIn the first case the program contains only one instruction \u2014 \"H\", which prints \"Hello, World!\".\n\nIn the second case none of the program characters are language instructions.",
    "examples": [
      {
        "input": "Hi!",
        "output": "YES"
      },
      {
        "input": "Codeforces",
        "output": "NO"
      }
    ],
    "solution": "s=input()\r\nl=['H','Q','9']\r\nflag=0\r\nfor i in l:\r\n    if i in s:\r\n        flag=1\r\nif flag:\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "560/A",
    "problem": "Title: Currency System in Geraldion\n\nA magic island Geraldion, where Gerald lives, has its own currency system. It uses banknotes of several values. But the problem is, the system is not perfect and sometimes it happens that Geraldionians cannot express a certain sum of money with any set of banknotes. Of course, they can use any number of banknotes of each value. Such sum is called unfortunate. Gerald wondered: what is the minimum unfortunate sum?\n\nInput Format:\nThe first line contains number n (1 \u2264 n \u2264 1000) \u2014 the number of values of the banknotes that used in Geraldion.\n\nThe second line contains n distinct space-separated numbers a1, a2, ..., an (1 \u2264 ai \u2264 106) \u2014 the values of the banknotes.\n\nOutput Format:\nPrint a single line \u2014 the minimum unfortunate sum. If there are no unfortunate sums, print  - 1.\n\nExamples:\nExample 1:\nInput:\n5\n1 2 3 4 5\nOutput:\n-1",
    "examples": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "-1"
      }
    ],
    "solution": "n = int(input())\r\nnum = map(int, input().rstrip().split())\r\nif 1 in num:\r\n\tprint(-1)\r\nelse:\r\n\tprint(1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "485/A",
    "problem": "Title: Factory\n\nOne industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce $$x \\mod m$$ (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory.\n\nThe board of directors are worried that the production by the given plan may eventually stop (that means that there will be \u0430 moment when the current number of details on the factory is divisible by m).\n\nGiven the number of details a on the first day and number m check if the production stops at some moment.\n\nInput Format:\nThe first line contains two integers a and m (1 \u2264 a, m \u2264 105).\n\nOutput Format:\nPrint \"Yes\" (without quotes) if the production will eventually stop, otherwise print \"No\".\n\nExamples:\nExample 1:\nInput:\n1 5\nOutput:\nNo\n\nExample 2:\nInput:\n3 6\nOutput:\nYes",
    "examples": [
      {
        "input": "1 5",
        "output": "No"
      },
      {
        "input": "3 6",
        "output": "Yes"
      }
    ],
    "solution": "a, m = map(int, input().split())\r\ns = set()\r\nwhile True:\r\n    a %= m\r\n    if a in s:\r\n        print('Yes' if 0 in s else 'No')\r\n        break\r\n    s.add(a)\r\n    a *= 2\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "884/A",
    "problem": "Title: Book Reading\n\nRecently Luba bought a very interesting book. She knows that it will take t seconds to read the book. Luba wants to finish reading as fast as she can.\n\nBut she has some work to do in each of n next days. The number of seconds that Luba has to spend working during i-th day is ai. If some free time remains, she can spend it on reading.\n\nHelp Luba to determine the minimum number of day when she finishes reading.\n\nIt is guaranteed that the answer doesn't exceed n.\n\nRemember that there are 86400 seconds in a day.\n\nInput Format:\nThe first line contains two integers n and t (1 \u2264 n \u2264 100, 1 \u2264 t \u2264 106) \u2014 the number of days and the time required to read the book.\n\nThe second line contains n integers ai (0 \u2264 ai \u2264 86400) \u2014 the time Luba has to spend on her work during i-th day.\n\nOutput Format:\nPrint the minimum day Luba can finish reading the book.\n\nIt is guaranteed that answer doesn't exceed n.\n\nExamples:\nExample 1:\nInput:\n2 2\n86400 86398\nOutput:\n2\n\nExample 2:\nInput:\n2 86400\n0 86400\nOutput:\n1",
    "examples": [
      {
        "input": "2 2\n86400 86398",
        "output": "2"
      },
      {
        "input": "2 86400\n0 86400",
        "output": "1"
      }
    ],
    "solution": "n, t = map(int, input().split())\ndaftar_waktu_kerja = list(map(int, input().split()))\nhari = 1\n\nfor waktu_kerja in daftar_waktu_kerja:\n  waktu_kosong = 86400 - waktu_kerja\n  t -= waktu_kosong\n\n  if t <= 0:\n    print(hari)\n    break\n  \n  hari += 1\n\t \t\t  \t\t\t\t\t     \t   \t \t\t    \t",
    "explanation": "Let's read the book greedily. On i-th day Luba will read for 86400\u2009-\u2009ai seconds. Subtract value for each day from t until t becomes less or equal to zero. That will be the day Luba finishes the book.\nOverall complexity: O(n)."
  },
  {
    "id": "991/A",
    "problem": "Title: If at first you don't succeed...\n\nEach student eagerly awaits the day he would pass the exams successfully. Thus, Vasya was ready to celebrate, but, alas, he didn't pass it. However, many of Vasya's fellow students from the same group were more successful and celebrated after the exam.\n\nSome of them celebrated in the BugDonalds restaurant, some of them\u00a0\u2014 in the BeaverKing restaurant, the most successful ones were fast enough to celebrate in both of restaurants. Students which didn't pass the exam didn't celebrate in any of those restaurants and elected to stay home to prepare for their reexamination. However, this quickly bored Vasya and he started checking celebration photos on the Kilogramm. He found out that, in total, BugDonalds was visited by $$$A$$$ students, BeaverKing\u00a0\u2014 by $$$B$$$ students and $$$C$$$ students visited both restaurants. Vasya also knows that there are $$$N$$$ students in his group.\n\nBased on this info, Vasya wants to determine either if his data contradicts itself or, if it doesn't, how many students in his group didn't pass the exam. Can you help him so he won't waste his valuable preparation time?\n\nInput Format:\nThe first line contains four integers\u00a0\u2014 $$$A$$$, $$$B$$$, $$$C$$$ and $$$N$$$ ($$$0 \\leq A, B, C, N \\leq 100$$$).\n\nOutput Format:\nIf a distribution of $$$N$$$ students exists in which $$$A$$$ students visited BugDonalds, $$$B$$$ \u2014 BeaverKing, $$$C$$$ \u2014 both of the restaurants and at least one student is left home (it is known that Vasya didn't pass the exam and stayed at home), output one integer\u00a0\u2014 amount of students (including Vasya) who did not pass the exam.\n\nIf such a distribution does not exist and Vasya made a mistake while determining the numbers $$$A$$$, $$$B$$$, $$$C$$$ or $$$N$$$ (as in samples 2 and 3), output $$$-1$$$.\n\nExamples:\nExample 1:\nInput:\n10 10 5 20\nOutput:\n5\n\nExample 2:\nInput:\n2 2 0 4\nOutput:\n-1\n\nExample 3:\nInput:\n2 2 2 1\nOutput:\n-1\n\nNote:\nThe first sample describes following situation: $$$5$$$ only visited BugDonalds, $$$5$$$ students only visited BeaverKing, $$$5$$$ visited both of them and $$$5$$$ students (including Vasya) didn't pass the exam.\n\nIn the second sample $$$2$$$ students only visited BugDonalds and $$$2$$$ only visited BeaverKing, but that means all $$$4$$$ students in group passed the exam which contradicts the fact that Vasya didn't pass meaning that this situation is impossible.\n\nThe third sample describes a situation where $$$2$$$ students visited BugDonalds but the group has only $$$1$$$ which makes it clearly impossible.",
    "examples": [
      {
        "input": "10 10 5 20",
        "output": "5"
      },
      {
        "input": "2 2 0 4",
        "output": "-1"
      },
      {
        "input": "2 2 2 1",
        "output": "-1"
      }
    ],
    "solution": "a, b, c, n = map(int, input().split())\r\na -= c\r\nb -= c\r\nif a + b + c + 1 > n or a < 0 or b < 0:\r\n    print(-1)\r\nelse:\r\n    print(n - a - b - c)\r\n",
    "explanation": "\u0412\u0441\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u043b\u0438\u0441\u044c \u043d\u0430 4 \u0433\u0440\u0443\u043f\u043f\u044b \u2014 \u0442\u0435 \u043a\u0442\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u043b \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d, \u043a\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0442\u043e\u0440\u043e\u0439, \u043a\u0442\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u043b \u043e\u0431\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0438 \u043a\u0442\u043e \u043d\u0435 \u0441\u0434\u0430\u043b \u044d\u043a\u0437\u0430\u043c\u0435\u043d. \u041e\u0434\u0438\u043d \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u0442\u0441\u0435\u0447\u044c \u0432\u0441\u0435 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u2014 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435. \u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e $$$A-C$$$, \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439: $$$B-C$$$, \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0439: $$$C$$$, \u0434\u043b\u044f \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439: $$$N-A-B+C$$$. \u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0432 \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u0433\u0440\u0443\u043f\u043f\u0430\u0445 \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u2014 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435. \u0415\u0441\u043b\u0438 \u044d\u0442\u043e \u0442\u0430\u043a, \u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0438 \u0435\u0441\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443. \u0421\u043c. \u0440\u0435\u0448\u0435\u043d\u0438\u0435 A_1.cpp.\n\u0412 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439-\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439: https://en.wikipedia.org/wiki/Inclusion\n\u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0434\u0430\u0447\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u0435\u0440\u0435\u0431\u0440\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u0437\u0430 $$$O(N^{4})$$$ \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044e. \u0415\u0441\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0434\u043e\u0448\u043b\u043e \u2014 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 $$$-1$$$."
  },
  {
    "id": "584/A",
    "problem": "Title: Olesya and Rodion\n\nOlesya loves numbers consisting of n digits, and Rodion only likes numbers that are divisible by t. Find some number that satisfies both of them.\n\nYour task is: given the n and t print an integer strictly larger than zero consisting of n digits that is divisible by t. If such number doesn't exist, print  - 1.\n\nInput Format:\nThe single line contains two numbers, n and t (1 \u2264 n \u2264 100, 2 \u2264 t \u2264 10) \u2014 the length of the number and the number it should be divisible by.\n\nOutput Format:\nPrint one such positive number without leading zeroes, \u2014 the answer to the problem, or  - 1, if such number doesn't exist. If there are multiple possible answers, you are allowed to print any of them.\n\nExamples:\nExample 1:\nInput:\n3 2\nOutput:\n712",
    "examples": [
      {
        "input": "3 2",
        "output": "712"
      }
    ],
    "solution": "n, t=(map(int,input().split()))\r\nif n==1 and t==10:\r\n    print(-1)\r\nelif n>=2 and t ==10:\r\n    for i in range((n-1)):\r\n        print('1',end=\"\")\r\n    print(0)\r\nelse:\r\n    for i in range((n)):\r\n        print(t,end=\"\")\r\n        ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "753/A",
    "problem": "Title: Santa Claus and Candies\n\nSanta Claus has n candies, he dreams to give them as gifts to children.\n\nWhat is the maximal number of children for whose he can give candies if Santa Claus want each kid should get distinct positive integer number of candies. Santa Class wants to give all n candies he has.\n\nInput Format:\nThe only line contains positive integer number n (1 \u2264 n \u2264 1000) \u2014 number of candies Santa Claus has.\n\nOutput Format:\nPrint to the first line integer number k \u2014 maximal number of kids which can get candies.\n\nPrint to the second line k distinct integer numbers: number of candies for each of k kid. The sum of k printed numbers should be exactly n.\n\nIf there are many solutions, print any of them.\n\nExamples:\nExample 1:\nInput:\n5\nOutput:\n2\n2 3\n\nExample 2:\nInput:\n9\nOutput:\n3\n3 5 1\n\nExample 3:\nInput:\n2\nOutput:\n1\n2",
    "examples": [
      {
        "input": "5",
        "output": "2\n2 3"
      },
      {
        "input": "9",
        "output": "3\n3 5 1"
      },
      {
        "input": "2",
        "output": "1\n2"
      }
    ],
    "solution": "n=int(input())\r\nt=1\r\na=[]\r\nwhile n>=t:\r\n    a.append(t)\r\n    n-=t\r\n    t=t+1\r\na[-1]+=n\r\nprint(len(a))\r\nfor i in range(len(a)):\r\n    print(a[i],end=' ')\r\n    \r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "41/A",
    "problem": "Title: Translation\n\nThe translation from the Berland language into the Birland language is not an easy task. Those languages are very similar: a Berlandish word differs from a Birlandish word with the same meaning a little: it is spelled (and pronounced) reversely. For example, a Berlandish word code corresponds to a Birlandish word edoc. However, making a mistake during the \"translation\" is easy. Vasya translated the word s from Berlandish into Birlandish as t. Help him: find out if he translated the word correctly.\n\nInput Format:\nThe first line contains word s, the second line contains word t. The words consist of lowercase Latin letters. The input data do not contain unnecessary spaces. The words are not empty and their lengths do not exceed 100 symbols.\n\nOutput Format:\nIf the word t is a word s, written reversely, print YES, otherwise print NO.\n\nExamples:\nExample 1:\nInput:\ncode\nedoc\nOutput:\nYES\n\nExample 2:\nInput:\nabb\naba\nOutput:\nNO\n\nExample 3:\nInput:\ncode\ncode\nOutput:\nNO",
    "examples": [
      {
        "input": "code\nedoc",
        "output": "YES"
      },
      {
        "input": "abb\naba",
        "output": "NO"
      },
      {
        "input": "code\ncode",
        "output": "NO"
      }
    ],
    "solution": "s=input()\r\nt=input()\r\nn=len(s)\r\nm=len(t)\r\nif(n==m):\r\n    c=0\r\n    for i in range(m):\r\n        if(s[i]!=t[m-1-i]):\r\n            c=1 \r\n    if(c==1):\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n            ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "114/A",
    "problem": "Title: Cifera\n\nWhen Petya went to school, he got interested in large numbers and what they were called in ancient times. For instance, he learned that the Russian word \"tma\" (which now means \"too much to be counted\") used to stand for a thousand and \"tma tmyschaya\" (which literally means \"the tma of tmas\") used to stand for a million.\n\nPetya wanted to modernize the words we use for numbers and invented a word petricium that represents number k. Moreover, petricium la petricium stands for number k2, petricium la petricium la petricium stands for k3 and so on. All numbers of this form are called petriciumus cifera, and the number's importance is the number of articles la in its title.\n\nPetya's invention brought on a challenge that needed to be solved quickly: does some number l belong to the set petriciumus cifera? As Petya is a very busy schoolboy he needs to automate the process, he asked you to solve it.\n\nInput Format:\nThe first input line contains integer number k, the second line contains integer number l (2 \u2264 k, l \u2264 231 - 1).\n\nOutput Format:\nYou should print in the first line of the output \"YES\", if the number belongs to the set petriciumus cifera and otherwise print \"NO\". If the number belongs to the set, then print on the seconds line the only number \u2014 the importance of number l.\n\nExamples:\nExample 1:\nInput:\n5\n25\nOutput:\nYES\n1\n\nExample 2:\nInput:\n3\n8\nOutput:\nNO",
    "examples": [
      {
        "input": "5\n25",
        "output": "YES\n1"
      },
      {
        "input": "3\n8",
        "output": "NO"
      }
    ],
    "solution": "import math\r\nk=int(input())\r\nl=int(input())\r\nn=0\r\ntmp=k\r\nwhile(l>tmp and l!=tmp):\r\n\ttmp=tmp*k\r\n\tn+=1\r\nif(l==tmp):\r\n\tprint(\"YES\")\r\n\tprint(n)\r\nelse:\r\n\tprint(\"NO\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "372/A",
    "problem": "Title: Counting Kangaroos is Fun\n\nThere are n kangaroos with pockets. Each kangaroo has a size (integer number). A kangaroo can go into another kangaroo's pocket if and only if the size of kangaroo who hold the kangaroo is at least twice as large as the size of kangaroo who is held.\n\nEach kangaroo can hold at most one kangaroo, and the kangaroo who is held by another kangaroo cannot hold any kangaroos.\n\nThe kangaroo who is held by another kangaroo cannot be visible from outside. Please, find a plan of holding kangaroos with the minimal number of kangaroos who is visible.\n\nInput Format:\nThe first line contains a single integer \u2014 n (1 \u2264 n \u2264 5\u00b7105). Each of the next n lines contains an integer si \u2014 the size of the i-th kangaroo (1 \u2264 si \u2264 105).\n\nOutput Format:\nOutput a single integer \u2014 the optimal number of visible kangaroos.\n\nExamples:\nExample 1:\nInput:\n8\n2\n5\n7\n6\n9\n8\n4\n2\nOutput:\n5\n\nExample 2:\nInput:\n8\n9\n1\n6\n2\n6\n5\n8\n3\nOutput:\n5",
    "examples": [
      {
        "input": "8\n2\n5\n7\n6\n9\n8\n4\n2",
        "output": "5"
      },
      {
        "input": "8\n9\n1\n6\n2\n6\n5\n8\n3",
        "output": "5"
      }
    ],
    "solution": "import sys, math\nn=int(input())\na=sorted(int(x) for x in sys.stdin)\ni=(n//2)-1\nj=n-1\nk=0\nwhile j>((n//2)-1) and i>=0:\n    if 2*a[i]<=a[j]:\n        j-=1\n        k+=1\n    i-=1\n#print(a)\nprint(n-k)\n \t\t \t \t \t  \t\t\t \t\t  \t  \t\t\t\t   \t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "908/A",
    "problem": "Title: New Year and Counting Cards\n\nYour friend has n cards.\n\nYou know that each card has a lowercase English letter on one side and a digit on the other.\n\nCurrently, your friend has laid out the cards on a table so only one side of each card is visible.\n\nYou would like to know if the following statement is true for cards that your friend owns: \"If a card has a vowel on one side, then it has an even digit on the other side.\" More specifically, a vowel is one of 'a', 'e', 'i', 'o' or 'u', and even digit is one of '0', '2', '4', '6' or '8'.\n\nFor example, if a card has 'a' on one side, and '6' on the other side, then this statement is true for it. Also, the statement is true, for example, for a card with 'b' and '4', and for a card with 'b' and '3' (since the letter is not a vowel). The statement is false, for example, for card with 'e' and '5'. You are interested if the statement is true for all cards. In particular, if no card has a vowel, the statement is true.\n\nTo determine this, you can flip over some cards to reveal the other side. You would like to know what is the minimum number of cards you need to flip in the worst case in order to verify that the statement is true.\n\nInput Format:\nThe first and only line of input will contain a string s (1 \u2264 |s| \u2264 50), denoting the sides of the cards that you can see on the table currently. Each character of s is either a lowercase English letter or a digit.\n\nOutput Format:\nPrint a single integer, the minimum number of cards you must turn over to verify your claim.\n\nExamples:\nExample 1:\nInput:\nee\nOutput:\n2\n\nExample 2:\nInput:\nz\nOutput:\n0\n\nExample 3:\nInput:\n0ay1\nOutput:\n2\n\nNote:\nIn the first sample, we must turn over both cards. Note that even though both cards have the same letter, they could possibly have different numbers on the other side.\n\nIn the second sample, we don't need to turn over any cards. The statement is vacuously true, since you know your friend has no cards with a vowel on them.\n\nIn the third sample, we need to flip the second and fourth cards.",
    "examples": [
      {
        "input": "ee",
        "output": "2"
      },
      {
        "input": "z",
        "output": "0"
      },
      {
        "input": "0ay1",
        "output": "2"
      }
    ],
    "solution": "from sys import stdin, stdout\n\ndef need_to_check(card, vowels=['a','e','i','o','u']):\n    return (ord(card) >= ord('0') and ord(card) <= ord('9') and int(card) % 2 == 1) or (card in vowels)\n\ndef number_of_reveals(cards):\n    count = 0\n    for card in cards:\n        count = count+1 if need_to_check(card) else count\n    return count\n\nstdout.write( str(number_of_reveals(stdin.readline())) +'\\n')\n \t   \t\t\t        \t\t   \t \t",
    "explanation": "Let's start off a bit more abstractly. We would like to know if the statement \"if P then Q\" is true, where P and Q are some statements (in this case, P is \"card has vowel\", and Q is \"card has even number\"). To do determine this, we need to flip over any cards which could be counter-examples (i.e. could make the statement false).\nLet's look at the truth table for if P then Q (see here: http://www.math.hawaii.edu/\u00a0ramsey/Logic/IfThen.html). The statement is only false when Q is false and P is true. Thus, it suffices to flip cards when P is true or Q is false.\nTo solve this problem, we need to print the count of vowels and odd digits in the string."
  },
  {
    "id": "204/A",
    "problem": "Title: Little Elephant and Interval\n\nThe Little Elephant very much loves sums on intervals.\n\nThis time he has a pair of integers l and r (l \u2264 r). The Little Elephant has to find the number of such integers x (l \u2264 x \u2264 r), that the first digit of integer x equals the last one (in decimal notation). For example, such numbers as 101, 477474 or 9 will be included in the answer and 47, 253 or 1020 will not.\n\nHelp him and count the number of described numbers x for a given pair l and r.\n\nInput Format:\nThe single line contains a pair of integers l and r (1 \u2264 l \u2264 r \u2264 1018) \u2014 the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\nOutput Format:\nOn a single line print a single integer \u2014 the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n2 47\nOutput:\n12\n\nExample 2:\nInput:\n47 1024\nOutput:\n98\n\nNote:\nIn the first sample the answer includes integers 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44.",
    "examples": [
      {
        "input": "2 47",
        "output": "12"
      },
      {
        "input": "47 1024",
        "output": "98"
      }
    ],
    "solution": "def digit(x):\r\n    return x if x<10 else x//10+9-(0 if str(x)[0]<=str(x)[-1] else 1)\r\nl,r = map(int,input().split())\r\nprint(digit(r) - digit(l-1))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "314/A",
    "problem": "Title: Sereja and Contest\n\nDuring the last Sereja's Codesecrof round the server crashed many times, so the round was decided to be made unrated for some participants.\n\nLet's assume that n people took part in the contest. Let's assume that the participant who got the first place has rating a1, the second place participant has rating a2, ..., the n-th place participant has rating an. Then changing the rating on the Codesecrof site is calculated by the formula $$d_i = \\sum_{j=1}^{i-1}(a_j \\cdot (j - 1) - (n - i) \\cdot a_i)$$.\n\nAfter the round was over, the Codesecrof management published the participants' results table. They decided that if for a participant di < k, then the round can be considered unrated for him. But imagine the management's surprise when they found out that the participants' rating table is dynamic. In other words, when some participant is removed from the rating, he is removed from the results' table and the rating is recalculated according to the new table. And of course, all applications for exclusion from the rating are considered in view of the current table.\n\nWe know that among all the applications for exclusion from the rating the first application to consider is from the participant with the best rank (the rank with the minimum number), for who di < k. We also know that the applications for exclusion from rating were submitted by all participants.\n\nNow Sereja wonders, what is the number of participants to be excluded from the contest rating, and the numbers of the participants in the original table in the order of their exclusion from the rating. Pay attention to the analysis of the first test case for a better understanding of the statement.\n\nInput Format:\nThe first line contains two integers n, k (1 \u2264 n \u2264 2\u00b7105,  - 109 \u2264 k \u2264 0). The second line contains n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 ratings of the participants in the initial table.\n\nOutput Format:\nPrint the numbers of participants in the order in which they were removed from the table. Print the initial numbers of the participants, that is, the numbers that the participants had in the initial table.\n\nExamples:\nExample 1:\nInput:\n5 0\n5 3 4 1 2\nOutput:\n2\n3\n4\n\nExample 2:\nInput:\n10 -10\n5 5 1 7 5 1 2 4 9 2\nOutput:\n2\n4\n5\n7\n8\n9\n\nNote:\nConsider the first test sample.\n\n1. Initially the sequence of the contest participants' ratings equals [5, 3, 4, 1, 2]. You can use this sequence to calculate the sequence of rating changes: [0, -9, -13, 8, 14]. According to the problem statement, the application of the participant who won the second place will be considered first.\n2. As soon as the second place winner is out from the ratings, the participants' rating sequence will equal [5, 4, 1, 2]. By this sequence you can count the new sequence of rating changes: [0, -8, 2, 6]. According to the problem statement, the application of the participant who won the second place will be considered. Initially this participant won third place.\n3. The new rating sequence equals [5, 1, 2], the new sequence of rating changes equals [0, -1, 1]. The second place participant's application is taken into consideration, initially this participant won the fourth place.\n4. The new rating sequence equals [5, 2], the new sequence of rating changes equals [0, 0]. No more applications will be considered.\n\nThus, you should print 2, 3, 4.",
    "examples": [
      {
        "input": "5 0\n5 3 4 1 2",
        "output": "2\n3\n4"
      },
      {
        "input": "10 -10\n5 5 1 7 5 1 2 4 9 2",
        "output": "2\n4\n5\n7\n8\n9"
      }
    ],
    "solution": "n, k = map(int, input().split())\nc, m, l, r = 0, 0, [], 0\nfor e in [int(i) for i in input().split()]:\n    d = m - c * (n - c - 1) * e\n    r+= 1\n    if d < k:\n        n -= 1\n        l += [r]\n    else:\n        m += c * e\n        c += 1\nl.sort()\nfor e in l: print(e)\n        \n        \n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "115/A",
    "problem": "Title: Party\n\nA company has n employees numbered from 1 to n. Each employee either has no immediate manager or exactly one immediate manager, who is another employee with a different number. An employee A is said to be the superior of another employee B if at least one of the following is true:\n\n- Employee A is the immediate manager of employee B\n- Employee B has an immediate manager employee C such that employee A is the superior of employee C.\n\nThe company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/her own immediate manager.\n\nToday the company is going to arrange a party. This involves dividing all n employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees A and B such that A is the superior of B.\n\nWhat is the minimum number of groups that must be formed?\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of employees.\n\nThe next n lines contain the integers pi (1 \u2264 pi \u2264 n or pi = -1). Every pi denotes the immediate manager for the i-th employee. If pi is -1, that means that the i-th employee does not have an immediate manager.\n\nIt is guaranteed, that no employee will be the immediate manager of him/herself (pi \u2260 i). Also, there will be no managerial cycles.\n\nOutput Format:\nPrint a single integer denoting the minimum number of groups that will be formed in the party.\n\nExamples:\nExample 1:\nInput:\n5\n-1\n1\n2\n1\n-1\nOutput:\n3\n\nNote:\nFor the first example, three groups are sufficient, for example:\n\n- Employee 1\n- Employees 2 and 4\n- Employees 3 and 5",
    "examples": [
      {
        "input": "5\n-1\n1\n2\n1\n-1",
        "output": "3"
      }
    ],
    "solution": "#bfs solution\r\n\r\nfrom collections import defaultdict,deque\r\n\r\nn = int(input())\r\nadj_list = defaultdict(list)\r\n\r\nfor i in range(1,n+1):\r\n    adj_list[int(input())].append(i)\r\n\r\ndef bfs(queue):\r\n    depth = 0\r\n\r\n    while queue:\r\n        depth += 1\r\n        k = len(queue)\r\n\r\n        for j in range(k):\r\n            temp = queue.popleft()\r\n\r\n            for child in adj_list[temp]:\r\n                queue.append(child)\r\n\r\n    return depth\r\n\r\nprint(bfs(deque(adj_list[-1])))\r\n\r\n\r\n\r\n\r\n#dfs solution\r\n\r\n# import sys\r\n# from collections import defaultdict\r\n\r\n# sys.setrecursionlimit(3000)\r\n# n = int(input())\r\n# adj_list = defaultdict(list)\r\n\r\n# for i in range(1,n+1):\r\n#     adj_list[int(input())].append(i)\r\n\r\n# def dfs(employ, depth):\r\n#     if not adj_list[employ]:\r\n#         return depth\r\n#     _max = 0\r\n#     for e in adj_list[employ]:\r\n#         _max = max(_max, dfs(e,depth + 1))\r\n#     return _max\r\n\r\n# depth = 0\r\n# ans = 0\r\n\r\n# for employ in adj_list[-1]:\r\n#     ans = max(ans,dfs(employ,depth + 1))\r\n\r\n# print(ans)\r\n        ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "994/A",
    "problem": "Title: Fingerprints\n\nYou are locked in a room with a door that has a keypad with 10 keys corresponding to digits from 0 to 9. To escape from the room, you need to enter a correct code. You also have a sequence of digits.\n\nSome keys on the keypad have fingerprints. You believe the correct code is the longest not necessarily contiguous subsequence of the sequence you have that only contains digits with fingerprints on the corresponding keys. Find such code.\n\nInput Format:\nThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le n, m \\le 10$$$) representing the number of digits in the sequence you have and the number of keys on the keypad that have fingerprints.\n\nThe next line contains $$$n$$$ distinct space-separated integers $$$x_1, x_2, \\ldots, x_n$$$ ($$$0 \\le x_i \\le 9$$$) representing the sequence.\n\nThe next line contains $$$m$$$ distinct space-separated integers $$$y_1, y_2, \\ldots, y_m$$$ ($$$0 \\le y_i \\le 9$$$) \u2014 the keys with fingerprints.\n\nOutput Format:\nIn a single line print a space-separated sequence of integers representing the code. If the resulting sequence is empty, both printing nothing and printing a single line break is acceptable.\n\nExamples:\nExample 1:\nInput:\n7 3\n3 5 7 1 6 2 8\n1 2 7\nOutput:\n7 1 2\n\nExample 2:\nInput:\n4 4\n3 4 1 0\n0 1 7 9\nOutput:\n1 0\n\nNote:\nIn the first example, the only digits with fingerprints are $$$1$$$, $$$2$$$ and $$$7$$$. All three of them appear in the sequence you know, $$$7$$$ first, then $$$1$$$ and then $$$2$$$. Therefore the output is 7 1 2. Note that the order is important, and shall be the same as the order in the original sequence.\n\nIn the second example digits $$$0$$$, $$$1$$$, $$$7$$$ and $$$9$$$ have fingerprints, however only $$$0$$$ and $$$1$$$ appear in the original sequence. $$$1$$$ appears earlier, so the output is 1 0. Again, the order is important.",
    "examples": [
      {
        "input": "7 3\n3 5 7 1 6 2 8\n1 2 7",
        "output": "7 1 2"
      },
      {
        "input": "4 4\n3 4 1 0\n0 1 7 9",
        "output": "1 0"
      }
    ],
    "solution": "n,m=[int(x) for x in input().split()]\r\nnum=[int(x) for x in input().split()]\r\nop=[int(x) for x in input().split()]\r\nfin=[]\r\nfor x in num:\r\n\tif x in op:\r\n\t\tfin.append(str(x))\r\nprint(' '.join(fin))",
    "explanation": "The problem can be solved by iterating over every number of the sequence, then iterating over the sequence of fingerprints to check if the number corresponds to a key with a fingerprint, resulting in an $$$O(n \\times m)$$$ solution."
  },
  {
    "id": "750/A",
    "problem": "Title: New Year and Hurry\n\nLimak is going to participate in a contest on the last day of the 2016. The contest will start at 20:00 and will last four hours, exactly until midnight. There will be n problems, sorted by difficulty, i.e. problem 1 is the easiest and problem n is the hardest. Limak knows it will take him 5\u00b7i minutes to solve the i-th problem.\n\nLimak's friends organize a New Year's Eve party and Limak wants to be there at midnight or earlier. He needs k minutes to get there from his house, where he will participate in the contest first.\n\nHow many problems can Limak solve if he wants to make it to the party?\n\nInput Format:\nThe only line of the input contains two integers n and k (1 \u2264 n \u2264 10, 1 \u2264 k \u2264 240)\u00a0\u2014 the number of the problems in the contest and the number of minutes Limak needs to get to the party from his house.\n\nOutput Format:\nPrint one integer, denoting the maximum possible number of problems Limak can solve so that he could get to the party at midnight or earlier.\n\nExamples:\nExample 1:\nInput:\n3 222\nOutput:\n2\n\nExample 2:\nInput:\n4 190\nOutput:\n4\n\nExample 3:\nInput:\n7 1\nOutput:\n7\n\nNote:\nIn the first sample, there are 3 problems and Limak needs 222 minutes to get to the party. The three problems require 5, 10 and 15 minutes respectively. Limak can spend 5 + 10 = 15 minutes to solve first two problems. Then, at 20:15 he can leave his house to get to the party at 23:57 (after 222 minutes). In this scenario Limak would solve 2 problems. He doesn't have enough time to solve 3 problems so the answer is 2.\n\nIn the second sample, Limak can solve all 4 problems in 5 + 10 + 15 + 20 = 50 minutes. At 20:50 he will leave the house and go to the party. He will get there exactly at midnight.\n\nIn the third sample, Limak needs only 1 minute to get to the party. He has enough time to solve all 7 problems.",
    "examples": [
      {
        "input": "3 222",
        "output": "2"
      },
      {
        "input": "4 190",
        "output": "4"
      },
      {
        "input": "7 1",
        "output": "7"
      }
    ],
    "solution": "def solve(n, k):\r\n    l = 240 - k\r\n    for i in range(1, n+1):\r\n        if l >= 5*i:\r\n            l -= 5*i\r\n        else:\r\n            return i-1\r\n    return n\r\n\r\n\r\nn, k = list(map(int, input().split()))\r\nprint(solve(n, k))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "312/A",
    "problem": "Title: Whose sentence is it?\n\nOne day, liouzhou_101 got a chat record of Freda and Rainbow. Out of curiosity, he wanted to know which sentences were said by Freda, and which were said by Rainbow. According to his experience, he thought that Freda always said \"lala.\" at the end of her sentences, while Rainbow always said \"miao.\" at the beginning of his sentences. For each sentence in the chat record, help liouzhou_101 find whose sentence it is.\n\nInput Format:\nThe first line of the input contains an integer n (1 \u2264 n \u2264 10), number of sentences in the chat record. Each of the next n lines contains a sentence. A sentence is a string that contains only Latin letters (A-Z, a-z), underline (_), comma (,), point (.) and space ( ). Its length doesn\u2019t exceed 100.\n\nOutput Format:\nFor each sentence, output \"Freda's\" if the sentence was said by Freda, \"Rainbow's\" if the sentence was said by Rainbow, or \"OMG>.< I don't know!\" if liouzhou_101 can\u2019t recognize whose sentence it is. He can\u2019t recognize a sentence if it begins with \"miao.\" and ends with \"lala.\", or satisfies neither of the conditions.\n\nExamples:\nExample 1:\nInput:\n5\nI will go to play with you lala.\nwow, welcome.\nmiao.lala.\nmiao.\nmiao .\nOutput:\nFreda's\nOMG>.< I don't know!\nOMG>.< I don't know!\nRainbow's\nOMG>.< I don't know!",
    "examples": [
      {
        "input": "5\nI will go to play with you lala.\nwow, welcome.\nmiao.lala.\nmiao.\nmiao .",
        "output": "Freda's\nOMG>.< I don't know!\nOMG>.< I don't know!\nRainbow's\nOMG>.< I don't know!"
      }
    ],
    "solution": "n = int(input())\r\na = []\r\n\r\nfor x in range(n) : a.append(str(input()))\r\nfor x in range(n):\r\n    if (a[x][-5:] == 'lala.' and a[x][:5] == 'miao.'): print('OMG>.< I don\\'t know!')\r\n    elif (a[x][-5:] == 'lala.'): print('Freda\\'s')\r\n    elif (a[x][:5] == 'miao.'): print('Rainbow\\'s')\r\n    else: print('OMG>.< I don\\'t know!')",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "727/A",
    "problem": "Title: Transformation: from A to B\n\nVasily has a number a, which he wants to turn into a number b. For this purpose, he can do two types of operations:\n\n- multiply the current number by 2 (that is, replace the number x by 2\u00b7x);\n- append the digit 1 to the right of current number (that is, replace the number x by 10\u00b7x\u2009+\u20091).\n\nYou need to help Vasily to transform the number a into the number b using only the operations described above, or find that it is impossible.\n\nNote that in this task you are not required to minimize the number of operations. It suffices to find any way to transform a into b.\n\nInput Format:\nThe first line contains two positive integers a and b (1 \u2264 a < b \u2264 109)\u00a0\u2014 the number which Vasily has and the number he wants to have.\n\nOutput Format:\nIf there is no way to get b from a, print \"NO\" (without quotes).\n\nOtherwise print three lines. On the first line print \"YES\" (without quotes). The second line should contain single integer k\u00a0\u2014 the length of the transformation sequence. On the third line print the sequence of transformations x1, x2, ..., xk, where:\n\n- x1 should be equal to a,\n- xk should be equal to b,\n- xi should be obtained from xi\u2009-\u20091 using any of two described operations (1\u2009<\u2009i\u2009\u2264\u2009k).\n\nIf there are multiple answers, print any of them.\n\nExamples:\nExample 1:\nInput:\n2 162\nOutput:\nYES\n5\n2 4 8 81 162\n\nExample 2:\nInput:\n4 42\nOutput:\nNO\n\nExample 3:\nInput:\n100 40021\nOutput:\nYES\n5\n100 200 2001 4002 40021",
    "examples": [
      {
        "input": "2 162",
        "output": "YES\n5\n2 4 8 81 162"
      },
      {
        "input": "4 42",
        "output": "NO"
      },
      {
        "input": "100 40021",
        "output": "YES\n5\n100 200 2001 4002 40021"
      }
    ],
    "solution": "a, b = list(map(int, input().split()))\n\nlista = []\nlista.append(b)\nflag = False\n\nwhile a <= b:\n    # print(\"~~\", a, b)\n    if a == b:\n        flag = True\n        break\n    elif b % 2 == 0:\n        b = b // 2\n        lista.append(b)\n    elif b % 10 == 1:\n        b = (b - 1) // 10\n        lista.append(b)\n    else:\n        break\n\nif not (flag):\n    print(\"NO\")\nelse:\n    rev = reversed(lista)\n    print(\"YES\")\n    print(len(lista))\n    print(*rev)\n\n \t   \t\t\t \t    \t\t  \t\t \t\t\t  \t\t\t",
    "explanation": "Let's solve this problem in reverse way \u2014 try to get the number A from B.\nNote, that if B ends with 1 the last operation was to append the digit 1 to the right of current number. Because of that let delete last digit of B and move to the new number.\nIf the last digit is even the last operation was to multiply the current number by 2. Because of that let's divide B on 2 and move to the new number.\nIn the other cases (if B ends with odd digit except 1) the answer is \u00abNO\u00bb.\nWe need to repeat described algorithm after we got the new number. If on some step we got the number equals to A we find the answer, and if the new number is less than A the answer is \u00abNO\u00bb."
  },
  {
    "id": "627/A",
    "problem": "Title: XOR Equation\n\nTwo positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?\n\nInput Format:\nThe first line of the input contains two integers s and x (2 \u2264 s \u2264 1012, 0 \u2264 x \u2264 1012), the sum and bitwise xor of the pair of positive integers, respectively.\n\nOutput Format:\nPrint a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.\n\nExamples:\nExample 1:\nInput:\n9 5\nOutput:\n4\n\nExample 2:\nInput:\n3 3\nOutput:\n2\n\nExample 3:\nInput:\n5 2\nOutput:\n0\n\nNote:\nIn the first sample, we have the following solutions: (2, 7), (3, 6), (6, 3), (7, 2).\n\nIn the second sample, the only solutions are (1, 2) and (2, 1).",
    "examples": [
      {
        "input": "9 5",
        "output": "4"
      },
      {
        "input": "3 3",
        "output": "2"
      },
      {
        "input": "5 2",
        "output": "0"
      }
    ],
    "solution": "def func(S,X):\r\n\r\n    if S - X < 0 :\r\n        return 0\r\n\r\n    elif (S - X) % 2:\r\n        return 0\r\n\r\n    nd = (S - X) // 2\r\n    c = 0\r\n\r\n    while X:\r\n\r\n        if X & 1:\r\n\r\n            if nd & 1:\r\n                return 0\r\n\r\n            c += 1\r\n\r\n        X >>= 1\r\n        nd >>= 1\r\n\r\n    return 2 ** c\r\n\r\n\r\nS,X = map(int,input().split())\r\n\r\nprint(func(S,X) - 2*(S == X))\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "625/A",
    "problem": "Title: Guest From the Past\n\nKolya Gerasimov loves kefir very much. He lives in year 1984 and knows all the details of buying this delicious drink. One day, as you probably know, he found himself in year 2084, and buying kefir there is much more complicated.\n\nKolya is hungry, so he went to the nearest milk shop. In 2084 you may buy kefir in a plastic liter bottle, that costs a rubles, or in glass liter bottle, that costs b rubles. Also, you may return empty glass bottle and get c (c < b) rubles back, but you cannot return plastic bottles.\n\nKolya has n rubles and he is really hungry, so he wants to drink as much kefir as possible. There were no plastic bottles in his 1984, so Kolya doesn't know how to act optimally and asks for your help.\n\nInput Format:\nFirst line of the input contains a single integer n (1 \u2264 n \u2264 1018)\u00a0\u2014 the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 \u2264 a \u2264 1018, 1 \u2264 c < b \u2264 1018)\u00a0\u2014 the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.\n\nOutput Format:\nPrint the only integer\u00a0\u2014 maximum number of liters of kefir, that Kolya can drink.\n\nExamples:\nExample 1:\nInput:\n10\n11\n9\n8\nOutput:\n2\n\nExample 2:\nInput:\n10\n5\n6\n1\nOutput:\n2\n\nNote:\nIn the first sample, Kolya can buy one glass bottle, then return it and buy one more glass bottle. Thus he will drink 2 liters of kefir.\n\nIn the second sample, Kolya can buy two plastic bottle and get two liters of kefir, or he can buy one liter glass bottle, then return it and buy one plastic bottle. In both cases he will drink two liters of kefir.",
    "examples": [
      {
        "input": "10\n11\n9\n8",
        "output": "2"
      },
      {
        "input": "10\n5\n6\n1",
        "output": "2"
      }
    ],
    "solution": "n = int(input())\na = int(input())\nb = int(input())\nc = int(input())\n\nl = 0\nwhile n >= a or n >= b:\n    if n >= b and b - c < a:\n        nl1 = (n - b) // (b - c)\n        nl2 = n // b\n        nl = max(nl1, nl2)\n        l += nl\n        n -= (b - c) * nl\n    else:\n        nl = n // a\n        l += nl\n        n -= a * nl\n\nprint(l)\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "984/A",
    "problem": "Title: Game\n\nTwo players play a game.\n\nInitially there are $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ written on the board. Each turn a player selects one number and erases it from the board. This continues until there is only one number left on the board, i.\u00a0e. $$$n - 1$$$ turns are made. The first player makes the first move, then players alternate turns.\n\nThe first player wants to minimize the last number that would be left on the board, while the second player wants to maximize it.\n\nYou want to know what number will be left on the board after $$$n - 1$$$ turns if both players make optimal moves.\n\nInput Format:\nThe first line contains one integer $$$n$$$ ($$$1 \\le n \\le 1000$$$)\u00a0\u2014 the number of numbers on the board.\n\nThe second line contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 10^6$$$).\n\nOutput Format:\nPrint one number that will be left on the board.\n\nExamples:\nExample 1:\nInput:\n3\n2 1 3\nOutput:\n2\n\nExample 2:\nInput:\n3\n2 2 2\nOutput:\n2\n\nNote:\nIn the first sample, the first player erases $$$3$$$ and the second erases $$$1$$$. $$$2$$$ is left on the board.\n\nIn the second sample, $$$2$$$ is left on the board regardless of the actions of the players.",
    "examples": [
      {
        "input": "3\n2 1 3",
        "output": "2"
      },
      {
        "input": "3\n2 2 2",
        "output": "2"
      }
    ],
    "solution": "\r\nn = int(input())\r\nl = list(map(int,input().split()))\r\n\r\nl.sort()\r\nfor i in range(n-1):\r\n\tif i % 2 == 0:\r\n\t\tl.pop()\r\n\telse:\r\n\t\tl.pop(0)\r\n\r\nfor i in l:\r\n\tprint(i)",
    "explanation": "First let's notice that the first player makes $$$\\lceil \\frac{n - 1}{2} \\rceil$$$ turns and the second one makes $$$\\lfloor \\frac{n - 1}{2} \\rfloor$$$.\nSo, if numbers are $$$1$$$-indexed and sorted, first player can make the answer not more than $$$(n - \\lceil \\frac{n - 1}{2} \\rceil)$$$-th by deleting maximal number every time. The second can make it not less than $$$(\\lfloor \\frac{n - 1}{2} \\rfloor + 1)$$$-th.\nBut $$$n - \\lceil \\frac{n - 1}{2} \\rceil = \\lfloor \\frac{n - 1}{2} \\rfloor + 1$$$, because $$$n - 1 = \\lceil \\frac{n - 1}{2} \\rceil + \\lfloor \\frac{n - 1}{2} \\rfloor$$$.\nSo the answer has minimal and maximal values, which are the same. So the answer is $$$(\\lfloor \\frac{n - 1}{2} \\rfloor + 1)$$$-th number ascending.\nAsymptotics is $$$O(n \\cdot log(n)$$$ or $$$O(n^2)$$$\nSolution"
  },
  {
    "id": "887/A",
    "problem": "Title: Div. 64\n\nTop-model Izabella participates in the competition. She wants to impress judges and show her mathematical skills.\n\nHer problem is following: for given string, consisting of only 0 and 1, tell if it's possible to remove some digits in such a way, that remaining number is a representation of some positive integer, divisible by 64, in the binary numerical system.\n\nInput Format:\nIn the only line given a non-empty binary string s with length up to 100.\n\nOutput Format:\nPrint \u00abyes\u00bb (without quotes) if it's possible to remove digits required way and \u00abno\u00bb otherwise.\n\nExamples:\nExample 1:\nInput:\n100010001\nOutput:\nyes\n\nExample 2:\nInput:\n100\nOutput:\nno\n\nNote:\nIn the first test case, you can get string 1 000 000 after removing two ones which is a representation of number 64 in the binary numerical system.\n\nYou can read more about binary numeral system representation here: https://en.wikipedia.org/wiki/Binary_system",
    "examples": [
      {
        "input": "100010001",
        "output": "yes"
      },
      {
        "input": "100",
        "output": "no"
      }
    ],
    "solution": "\r\na = input()\r\nsz = len(a)\r\n\r\nflg = 0\r\ncnt = 0\r\nfor i in range (0,sz):\r\n    k = a[i]\r\n    if(int(k)==1) :\r\n        flg = 1\r\n        continue\r\n    if(flg==1 and int(k)==0) :\r\n        cnt+=1\r\n\r\nif(cnt>=6) :\r\n    print(\"yes\")\r\nelse :\r\n    print(\"no\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "676/A",
    "problem": "Title: Nicholas and Permutation\n\nNicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.\n\nNicholas want the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.\n\nInput Format:\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100)\u00a0\u2014 the size of the permutation.\n\nThe second line of the input contains n distinct integers a1, a2, ..., an (1 \u2264 ai \u2264 n), where ai is equal to the element at the i-th position.\n\nOutput Format:\nPrint a single integer\u00a0\u2014 the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.\n\nExamples:\nExample 1:\nInput:\n5\n4 5 1 3 2\nOutput:\n3\n\nExample 2:\nInput:\n7\n1 6 5 3 4 7 2\nOutput:\n6\n\nExample 3:\nInput:\n6\n6 5 4 3 2 1\nOutput:\n5\n\nNote:\nIn the first sample, one may obtain the optimal answer by swapping elements 1 and 2.\n\nIn the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.\n\nIn the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.",
    "examples": [
      {
        "input": "5\n4 5 1 3 2",
        "output": "3"
      },
      {
        "input": "7\n1 6 5 3 4 7 2",
        "output": "6"
      },
      {
        "input": "6\n6 5 4 3 2 1",
        "output": "5"
      }
    ],
    "solution": "def max_dist(n,a):\r\n    minpos = a.index(min(a))\r\n    maxpos = a.index(max(a))\r\n    if minpos<maxpos:\r\n        ldist=minpos\r\n        rdist = n-maxpos-1\r\n        if ldist>rdist:\r\n            dist=maxpos\r\n        else:\r\n            dist=n-minpos-1\r\n    else:\r\n        ldist=maxpos\r\n        rdist=n-minpos-1\r\n        if ldist>rdist:\r\n            dist=minpos\r\n        else:\r\n            dist=n-maxpos-1\r\n    return dist\r\n\r\nn=int(input())\r\na=[int(x) for x in input().split()]\r\nresult=max_dist(n,a)\r\nprint(result)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "171/A",
    "problem": "Title: Mysterious numbers - 1\n\nInput Format:\nThe input contains two integers a1, a2 (0 \u2264 ai \u2264 109), separated by a single space.\n\nOutput Format:\nOutput a single integer.\n\nExamples:\nExample 1:\nInput:\n3 14\nOutput:\n44\n\nExample 2:\nInput:\n27 12\nOutput:\n48\n\nExample 3:\nInput:\n100 200\nOutput:\n102",
    "examples": [
      {
        "input": "3 14",
        "output": "44"
      },
      {
        "input": "27 12",
        "output": "48"
      },
      {
        "input": "100 200",
        "output": "102"
      }
    ],
    "solution": "# LUOGU_RID: 101709040\na=input().split()\r\na[1]=a[1][-1::-1]\r\nprint(int(a[0])+int(a[1]))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "337/A",
    "problem": "Title: Puzzles\n\nThe end of the school year is near and Ms. Manana, the teacher, will soon have to say goodbye to a yet another class. She decided to prepare a goodbye present for her n students and give each of them a jigsaw puzzle (which, as wikipedia states, is a tiling puzzle that requires the assembly of numerous small, often oddly shaped, interlocking and tessellating pieces).\n\nThe shop assistant told the teacher that there are m puzzles in the shop, but they might differ in difficulty and size. Specifically, the first jigsaw puzzle consists of f1 pieces, the second one consists of f2 pieces and so on.\n\nMs. Manana doesn't want to upset the children, so she decided that the difference between the numbers of pieces in her presents must be as small as possible. Let A be the number of pieces in the largest puzzle that the teacher buys and B be the number of pieces in the smallest such puzzle. She wants to choose such n puzzles that A - B is minimum possible. Help the teacher and find the least possible value of A - B.\n\nInput Format:\nThe first line contains space-separated integers n and m (2 \u2264 n \u2264 m \u2264 50). The second line contains m space-separated integers f1, f2, ..., fm (4 \u2264 fi \u2264 1000) \u2014 the quantities of pieces in the puzzles sold in the shop.\n\nOutput Format:\nPrint a single integer \u2014 the least possible difference the teacher can obtain.\n\nExamples:\nExample 1:\nInput:\n4 6\n10 12 10 7 5 22\nOutput:\n5\n\nNote:\nSample 1. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.",
    "examples": [
      {
        "input": "4 6\n10 12 10 7 5 22",
        "output": "5"
      }
    ],
    "solution": "n,m = map(int, input().split())\nlst = list(map(int, input().split()))\nlst.sort()\ni = 0\nj = n-1\nmn = 1000000000\nwhile j<m:\n    mn = min(mn, lst[j]-lst[i])\n    i += 1\n    j += 1\nprint(mn)\n    \t\t  \t\t\t   \t \t\t\t\t\t \t \t\t  \t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "863/A",
    "problem": "Title: Quasi-palindrome\n\nLet quasi-palindromic number be such number that adding some leading zeros (possible none) to it produces a palindromic string.\n\nString t is called a palindrome, if it reads the same from left to right and from right to left.\n\nFor example, numbers 131 and 2010200 are quasi-palindromic, they can be transformed to strings \"131\" and \"002010200\", respectively, which are palindromes.\n\nYou are given some integer number x. Check if it's a quasi-palindromic number.\n\nInput Format:\nThe first line contains one integer number x (1 \u2264 x \u2264 109). This number is given without any leading zeroes.\n\nOutput Format:\nPrint \"YES\" if number x is quasi-palindromic. Otherwise, print \"NO\" (without quotes).\n\nExamples:\nExample 1:\nInput:\n131\nOutput:\nYES\n\nExample 2:\nInput:\n320\nOutput:\nNO\n\nExample 3:\nInput:\n2010200\nOutput:\nYES",
    "examples": [
      {
        "input": "131",
        "output": "YES"
      },
      {
        "input": "320",
        "output": "NO"
      },
      {
        "input": "2010200",
        "output": "YES"
      }
    ],
    "solution": "s=input()\r\ns=s[::-1]\r\ns=str(int(s))\r\nif s==s[::-1]:\r\n    print('YES')\r\nelse:\r\n    print('NO')",
    "explanation": "You can check if the given is quasi-palindromic by removing all the trailing zeros and checking if resulting string is a palindrome."
  },
  {
    "id": "301/A",
    "problem": "Title: Yaroslav and Sequence\n\nYaroslav has an array, consisting of (2\u00b7n - 1) integers. In a single operation Yaroslav can change the sign of exactly n elements in the array. In other words, in one operation Yaroslav can select exactly n array elements, and multiply each of them by -1.\n\nYaroslav is now wondering: what maximum sum of array elements can be obtained if it is allowed to perform any number of described operations?\n\nHelp Yaroslav.\n\nInput Format:\nThe first line contains an integer n (2 \u2264 n \u2264 100). The second line contains (2\u00b7n - 1) integers \u2014 the array elements. The array elements do not exceed 1000 in their absolute value.\n\nOutput Format:\nIn a single line print the answer to the problem \u2014 the maximum sum that Yaroslav can get.\n\nExamples:\nExample 1:\nInput:\n2\n50 50 50\nOutput:\n150\n\nExample 2:\nInput:\n2\n-1 -100 -1\nOutput:\n100\n\nNote:\nIn the first sample you do not need to change anything. The sum of elements equals 150.\n\nIn the second sample you need to change the sign of the first two elements. Then we get the sum of the elements equal to 100.",
    "examples": [
      {
        "input": "2\n50 50 50",
        "output": "150"
      },
      {
        "input": "2\n-1 -100 -1",
        "output": "100"
      }
    ],
    "solution": "n, t = int(input()), list(map(int, input().split()))\r\np = list(map(abs, t))\r\ns = sum(p)\r\nif n & 1 == 0 and len([0 for i in t if i < 0]) & 1: s -= 2 * min(p)\r\nprint(s)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "69/A",
    "problem": "Title: Young Physicist\n\nA guy named Vasya attends the final grade of a high school. One day Vasya decided to watch a match of his favorite hockey team. And, as the boy loves hockey very much, even more than physics, he forgot to do the homework. Specifically, he forgot to complete his physics tasks. Next day the teacher got very angry at Vasya and decided to teach him a lesson. He gave the lazy student a seemingly easy task: You are given an idle body in space and the forces that affect it. The body can be considered as a material point with coordinates (0; 0; 0). Vasya had only to answer whether it is in equilibrium. \"Piece of cake\" \u2014 thought Vasya, we need only to check if the sum of all vectors is equal to 0. So, Vasya began to solve the problem. But later it turned out that there can be lots and lots of these forces, and Vasya can not cope without your help. Help him. Write a program that determines whether a body is idle or is moving by the given vectors of forces.\n\nInput Format:\nThe first line contains a positive integer n (1 \u2264 n \u2264 100), then follow n lines containing three integers each: the xi coordinate, the yi coordinate and the zi coordinate of the force vector, applied to the body ( - 100 \u2264 xi, yi, zi \u2264 100).\n\nOutput Format:\nPrint the word \"YES\" if the body is in equilibrium, or the word \"NO\" if it is not.\n\nExamples:\nExample 1:\nInput:\n3\n4 1 7\n-2 4 -1\n1 -5 -3\nOutput:\nNO\n\nExample 2:\nInput:\n3\n3 -1 7\n-5 2 -4\n2 -1 -3\nOutput:\nYES",
    "examples": [
      {
        "input": "3\n4 1 7\n-2 4 -1\n1 -5 -3",
        "output": "NO"
      },
      {
        "input": "3\n3 -1 7\n-5 2 -4\n2 -1 -3",
        "output": "YES"
      }
    ],
    "solution": "n=int(input())\na_1=[]\nb_1=[]\nc_1=[]\nfor i in range(n):\n    a,b,c=map(int,input().split())\n    a_1.append(a)\n    b_1.append(b)\n    c_1.append(c)\n\n\nif sum(a_1)==0 and sum(b_1)==0 and sum(c_1)==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    \n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "421/A",
    "problem": "Title: Pasha and Hamsters\n\nPasha has two hamsters: Arthur and Alexander. Pasha put n apples in front of them. Pasha knows which apples Arthur likes. Similarly, Pasha knows which apples Alexander likes. Pasha doesn't want any conflict between the hamsters (as they may like the same apple), so he decided to distribute the apples between the hamsters on his own. He is going to give some apples to Arthur and some apples to Alexander. It doesn't matter how many apples each hamster gets but it is important that each hamster gets only the apples he likes. It is possible that somebody doesn't get any apples.\n\nHelp Pasha distribute all the apples between the hamsters. Note that Pasha wants to distribute all the apples, not just some of them.\n\nInput Format:\nThe first line contains integers n, a, b (1 \u2264 n \u2264 100;\u00a01 \u2264 a, b \u2264 n) \u2014 the number of apples Pasha has, the number of apples Arthur likes and the number of apples Alexander likes, correspondingly.\n\nThe next line contains a distinct integers \u2014 the numbers of the apples Arthur likes. The next line contains b distinct integers \u2014 the numbers of the apples Alexander likes.\n\nAssume that the apples are numbered from 1 to n. The input is such that the answer exists.\n\nOutput Format:\nPrint n characters, each of them equals either 1 or 2. If the i-h character equals 1, then the i-th apple should be given to Arthur, otherwise it should be given to Alexander. If there are multiple correct answers, you are allowed to print any of them.\n\nExamples:\nExample 1:\nInput:\n4 2 3\n1 2\n2 3 4\nOutput:\n1 1 2 2\n\nExample 2:\nInput:\n5 5 2\n3 4 1 2 5\n2 3\nOutput:\n1 1 1 1 1",
    "examples": [
      {
        "input": "4 2 3\n1 2\n2 3 4",
        "output": "1 1 2 2"
      },
      {
        "input": "5 5 2\n3 4 1 2 5\n2 3",
        "output": "1 1 1 1 1"
      }
    ],
    "solution": "n, a, b = list(map(int, input().split()))\naa = list(map(int, input().split()))\nab = list(map(int, input().split()))\nans = [0] * n\nfor a in aa:\n    ans[a - 1] = '1'\nfor a in ab:\n    ans[a - 1] = '2'\nprint(' '.join(ans))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "818/A",
    "problem": "Title: Diplomas and Certificates\n\nThere are n students who have taken part in an olympiad. Now it's time to award the students.\n\nSome of them will receive diplomas, some wiil get certificates, and others won't receive anything. Students with diplomas and certificates are called winners. But there are some rules of counting the number of diplomas and certificates. The number of certificates must be exactly k times greater than the number of diplomas. The number of winners must not be greater than half of the number of all students (i.e. not be greater than half of n). It's possible that there are no winners.\n\nYou have to identify the maximum possible number of winners, according to these rules. Also for this case you have to calculate the number of students with diplomas, the number of students with certificates and the number of students who are not winners.\n\nInput Format:\nThe first (and the only) line of input contains two integers n and k (1 \u2264 n, k \u2264 1012), where n is the number of students and k is the ratio between the number of certificates and the number of diplomas.\n\nOutput Format:\nOutput three numbers: the number of students with diplomas, the number of students with certificates and the number of students who are not winners in case when the number of winners is maximum possible.\n\nIt's possible that there are no winners.\n\nExamples:\nExample 1:\nInput:\n18 2\nOutput:\n3 6 9\n\nExample 2:\nInput:\n9 10\nOutput:\n0 0 9\n\nExample 3:\nInput:\n1000000000000 5\nOutput:\n83333333333 416666666665 500000000002\n\nExample 4:\nInput:\n1000000000000 499999999999\nOutput:\n1 499999999999 500000000000",
    "examples": [
      {
        "input": "18 2",
        "output": "3 6 9"
      },
      {
        "input": "9 10",
        "output": "0 0 9"
      },
      {
        "input": "1000000000000 5",
        "output": "83333333333 416666666665 500000000002"
      },
      {
        "input": "1000000000000 499999999999",
        "output": "1 499999999999 500000000000"
      }
    ],
    "solution": "s=input()\r\nl=s.split()\r\nn=int(l[0])\r\nk=int(l[1])\r\na=n//2\r\np1=a//(k+1)\r\np2=k*p1\r\np3=n-p2-p1\r\nif p3>=n/2 :\r\n    print(int(p1),int(p2),int(p3))\r\nelse :\r\n    print(0,0,n)",
    "explanation": "Let a be the number of students with diplomas and b \u2014 students with certificates. b is always a\u00b7k. So the total number of winners is a\u2009+\u2009a\u00b7k\u2009=\u2009a\u00b7(k\u2009+\u20091). It should not exceed $$\\left\\lfloor \\frac{n}{2} \\right\\rfloor$$, so the maximum value for a will be hit in (n div 2) div (k\u2009+\u20091), where a div b is $$\\left[\\frac{a}{b}\\right]$$.\nOverall complexity: O(1)."
  },
  {
    "id": "697/A",
    "problem": "Title: Pineapple Incident\n\nTed has a pineapple. This pineapple is able to bark like a bulldog! At time t (in seconds) it barks for the first time. Then every s seconds after it, it barks twice with 1 second interval. Thus it barks at times t, t + s, t + s + 1, t + 2s, t + 2s + 1, etc.\n\nBarney woke up in the morning and wants to eat the pineapple, but he can't eat it when it's barking. Barney plans to eat it at time x (in seconds), so he asked you to tell him if it's gonna bark at that time.\n\nInput Format:\nThe first and only line of input contains three integers t, s and x (0 \u2264 t, x \u2264 109, 2 \u2264 s \u2264 109)\u00a0\u2014 the time the pineapple barks for the first time, the pineapple barking interval, and the time Barney wants to eat the pineapple respectively.\n\nOutput Format:\nPrint a single \"YES\" (without quotes) if the pineapple will bark at time x or a single \"NO\" (without quotes) otherwise in the only line of output.\n\nExamples:\nExample 1:\nInput:\n3 10 4\nOutput:\nNO\n\nExample 2:\nInput:\n3 10 3\nOutput:\nYES\n\nExample 3:\nInput:\n3 8 51\nOutput:\nYES\n\nExample 4:\nInput:\n3 8 52\nOutput:\nYES\n\nNote:\nIn the first and the second sample cases pineapple will bark at moments 3, 13, 14, ..., so it won't bark at the moment 4 and will bark at the moment 3.\n\nIn the third and fourth sample cases pineapple will bark at moments 3, 11, 12, 19, 20, 27, 28, 35, 36, 43, 44, 51, 52, 59, ..., so it will bark at both moments 51 and 52.",
    "examples": [
      {
        "input": "3 10 4",
        "output": "NO"
      },
      {
        "input": "3 10 3",
        "output": "YES"
      },
      {
        "input": "3 8 51",
        "output": "YES"
      },
      {
        "input": "3 8 52",
        "output": "YES"
      }
    ],
    "solution": "t,s,x=map(int,input().split())\r\na=x-t\r\nb=x-t-1\r\nif(t==x):\r\n      print(\"YES\")\r\nelse:\r\n      if(a>=s)or(b>=s):\r\n            if(a>=s)and(a%s==0):\r\n                  print(\"YES\")\r\n            elif((b%s==0)and(b>=s)):\r\n                  print(\"YES\")\r\n            else:\r\n                 print(\"NO\") \r\n      else:\r\n            print(\"NO\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "158/A",
    "problem": "Title: Next Round\n\n\"Contestant who earns a score equal to or greater than the k-th place finisher's score will advance to the next round, as long as the contestant earns a positive score...\" \u2014 an excerpt from contest rules.\n\nA total of n participants took part in the contest (n \u2265 k), and you already know their scores. Calculate how many participants will advance to the next round.\n\nInput Format:\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 50) separated by a single space.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 100), where ai is the score earned by the participant who got the i-th place. The given sequence is non-increasing (that is, for all i from 1 to n - 1 the following condition is fulfilled: ai \u2265 ai + 1).\n\nOutput Format:\nOutput the number of participants who advance to the next round.\n\nExamples:\nExample 1:\nInput:\n8 5\n10 9 8 7 7 7 5 5\nOutput:\n6\n\nExample 2:\nInput:\n4 2\n0 0 0 0\nOutput:\n0\n\nNote:\nIn the first example the participant on the 5th place earned 7 points. As the participant on the 6th place also earned 7 points, there are 6 advancers.\n\nIn the second example nobody got a positive score.",
    "examples": [
      {
        "input": "8 5\n10 9 8 7 7 7 5 5",
        "output": "6"
      },
      {
        "input": "4 2\n0 0 0 0",
        "output": "0"
      }
    ],
    "solution": "n, k = map(int, input().split())\r\nscores = list(map(int, input().split()))\r\n\r\nt = 0\r\nmin_score = scores[k-1]\r\nfor s in scores:\r\n    if s >= min_score and s > 0:\r\n        t += 1\r\nprint(t)\r\n        ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "16/A",
    "problem": "Title: Flag\n\nAccording to a new ISO standard, a flag of every country should have a chequered field n \u00d7 m, each square should be of one of 10 colours, and the flag should be \u00abstriped\u00bb: each horizontal row of the flag should contain squares of the same colour, and the colours of adjacent horizontal rows should be different. Berland's government asked you to find out whether their flag meets the new ISO standard.\n\nInput Format:\nThe first line of the input contains numbers n and m (1 \u2264 n, m \u2264 100), n \u2014 the amount of rows, m \u2014 the amount of columns on the flag of Berland. Then there follows the description of the flag: each of the following n lines contain m characters. Each character is a digit between 0 and 9, and stands for the colour of the corresponding square.\n\nOutput Format:\nOutput YES, if the flag meets the new ISO standard, and NO otherwise.\n\nExamples:\nExample 1:\nInput:\n3 3\n000\n111\n222\nOutput:\nYES\n\nExample 2:\nInput:\n3 3\n000\n000\n111\nOutput:\nNO\n\nExample 3:\nInput:\n3 3\n000\n111\n002\nOutput:\nNO",
    "examples": [
      {
        "input": "3 3\n000\n111\n222",
        "output": "YES"
      },
      {
        "input": "3 3\n000\n000\n111",
        "output": "NO"
      },
      {
        "input": "3 3\n000\n111\n002",
        "output": "NO"
      }
    ],
    "solution": "i = input().split(\" \")\r\nn = int(i[0])\r\nm = int(i[1])\r\nflag = [input() for x in range(n)]\r\nprevious = \"\"\r\nresult = True\r\nfor row in flag:\r\n    if not row == row[0]*m:\r\n        result = False\r\n    if row == previous:\r\n        result = False\r\n    previous = row\r\nif result:\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "361/A",
    "problem": "Title: Levko and Table\n\nLevko loves tables that consist of n rows and n columns very much. He especially loves beautiful tables. A table is beautiful to Levko if the sum of elements in each row and column of the table equals k.\n\nUnfortunately, he doesn't know any such table. Your task is to help him to find at least one of them.\n\nInput Format:\nThe single line contains two integers, n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 1000).\n\nOutput Format:\nPrint any beautiful table. Levko doesn't like too big numbers, so all elements of the table mustn't exceed 1000 in their absolute value.\n\nIf there are multiple suitable tables, you are allowed to print any of them.\n\nExamples:\nExample 1:\nInput:\n2 4\nOutput:\n1 3\n3 1\n\nExample 2:\nInput:\n4 7\nOutput:\n2 1 0 4\n4 0 2 1\n1 3 3 0\n0 3 2 2\n\nNote:\nIn the first sample the sum in the first row is 1 + 3 = 4, in the second row \u2014 3 + 1 = 4, in the first column \u2014 1 + 3 = 4 and in the second column \u2014 3 + 1 = 4. There are other beautiful tables for this sample.\n\nIn the second sample the sum of elements in each row and each column equals 7. Besides, there are other tables that meet the statement requirements.",
    "examples": [
      {
        "input": "2 4",
        "output": "1 3\n3 1"
      },
      {
        "input": "4 7",
        "output": "2 1 0 4\n4 0 2 1\n1 3 3 0\n0 3 2 2"
      }
    ],
    "solution": "n, k = map(int, input().split());\r\na = list(range(n));\r\nfor i in range (0, n):\r\n    a[i] = list(range(n));\r\n    for j in range (0, n):\r\n        if j == i:\r\n            a[i][j] = k;\r\n        else: a[i][j] = 0;\r\n    print(*a[i], sep=\" \")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "962/A",
    "problem": "Title: Equator\n\nPolycarp has created his own training plan to prepare for the programming contests. He will train for $$$n$$$ days, all days are numbered from $$$1$$$ to $$$n$$$, beginning from the first.\n\nOn the $$$i$$$-th day Polycarp will necessarily solve $$$a_i$$$ problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\nInput Format:\nThe first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 200\\,000$$$) \u2014 the number of days to prepare for the programming contests.\n\nThe second line contains a sequence $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10\\,000$$$), where $$$a_i$$$ equals to the number of problems, which Polycarp will solve on the $$$i$$$-th day.\n\nOutput Format:\nPrint the index of the day when Polycarp will celebrate the equator.\n\nExamples:\nExample 1:\nInput:\n4\n1 3 2 1\nOutput:\n2\n\nExample 2:\nInput:\n6\n2 2 2 2 2 2\nOutput:\n3\n\nNote:\nIn the first example Polycarp will celebrate the equator on the evening of the second day, because up to this day (inclusive) he will solve $$$4$$$ out of $$$7$$$ scheduled problems on four days of the training.\n\nIn the second example Polycarp will celebrate the equator on the evening of the third day, because up to this day (inclusive) he will solve $$$6$$$ out of $$$12$$$ scheduled problems on six days of the training.",
    "examples": [
      {
        "input": "4\n1 3 2 1",
        "output": "2"
      },
      {
        "input": "6\n2 2 2 2 2 2",
        "output": "3"
      }
    ],
    "solution": "\r\n#k=int(input())\r\n#n,m=map(int,input().split())\r\nimport sys\r\n\r\n\r\n#a=list(map(int,input().split()))\r\n\r\n#b=list(map(int,input().split()))\r\nimport math\r\n\r\n\r\nn=int(input())\r\n\r\na=list(map(int,input().split()))\r\nss=sum(a);\r\n\r\ns=0\r\nfor i in range(n):\r\n    s+=a[i]\r\n\r\n    if(2*s>=ss):\r\n        print(i+1)\r\n        sys.exit()\r\n",
    "explanation": "To solve the problem we need to know the total number of problems which Polycarp planned to solve. We count it in one iteration through the given array and save the total number of problems in the variable $$$sum$$$.\nAfter that, we will again iterate through the array and count the number of problems that Polycarp will solve on the first $$$i$$$ days. Let this sum is equal to $$$l$$$. We need to find the smallest $$$i$$$ for which it is true that $$$l \\cdot 2 \\ge sum$$$. This day will be the answer."
  },
  {
    "id": "357/A",
    "problem": "Title: Group of Students\n\nAt the beginning of the school year Berland State University starts two city school programming groups, for beginners and for intermediate coders. The children were tested in order to sort them into groups. According to the results, each student got some score from 1 to m points. We know that c1 schoolchildren got 1 point, c2 children got 2 points, ..., cm children got m points. Now you need to set the passing rate k (integer from 1 to m): all schoolchildren who got less than k points go to the beginner group and those who get at strictly least k points go to the intermediate group. We know that if the size of a group is more than y, then the university won't find a room for them. We also know that if a group has less than x schoolchildren, then it is too small and there's no point in having classes with it. So, you need to split all schoolchildren into two groups so that the size of each group was from x to y, inclusive.\n\nHelp the university pick the passing rate in a way that meets these requirements.\n\nInput Format:\nThe first line contains integer m (2 \u2264 m \u2264 100). The second line contains m integers c1, c2, ..., cm, separated by single spaces (0 \u2264 ci \u2264 100). The third line contains two space-separated integers x and y (1 \u2264 x \u2264 y \u2264 10000). At least one ci is greater than 0.\n\nOutput Format:\nIf it is impossible to pick a passing rate in a way that makes the size of each resulting groups at least x and at most y, print 0. Otherwise, print an integer from 1 to m \u2014 the passing rate you'd like to suggest. If there are multiple possible answers, print any of them.\n\nExamples:\nExample 1:\nInput:\n5\n3 4 3 2 1\n6 8\nOutput:\n3\n\nExample 2:\nInput:\n5\n0 3 3 4 2\n3 10\nOutput:\n4\n\nExample 3:\nInput:\n2\n2 5\n3 6\nOutput:\n0\n\nNote:\nIn the first sample the beginner group has 7 students, the intermediate group has 6 of them.\n\nIn the second sample another correct answer is 3.",
    "examples": [
      {
        "input": "5\n3 4 3 2 1\n6 8",
        "output": "3"
      },
      {
        "input": "5\n0 3 3 4 2\n3 10",
        "output": "4"
      },
      {
        "input": "2\n2 5\n3 6",
        "output": "0"
      }
    ],
    "solution": "estudiantes = int(input())\ncalificaciones = list(str(input()).split())\nxy = list(str(input()).split())\ncontador1 = 0\ncontador2 = 0\npartitura = 0\nentro = False\nfor i in range(len(calificaciones)):\n    calificaciones[i] = int(calificaciones[i])\nxy[0] = int(xy[0])\nxy[1] = int(xy[1])\n\nfor j in range(len(calificaciones)):\n    contador1 = 0\n    contador2 = 0\n    for i in range(0,j):\n        contador1 += calificaciones[i]\n\n\n    for k in range(j,len(calificaciones)):\n        contador2 += calificaciones[k]\n\n    if (contador1 >= xy[0] and contador1<=xy[1])and(contador2 >= xy[0] and contador2<=xy[1]):\n        entro = True\n        partitura = j\n        break\n\nif entro == True:\n    partitura+=1\nprint(partitura)\n\t\t\t \t\t\t\t   \t\t\t\t \t \t \t\t     \t\t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "220/A",
    "problem": "Title: Little Elephant and Problem\n\nThe Little Elephant has got a problem \u2014 somebody has been touching his sorted by non-decreasing array a of length n and possibly swapped some elements of the array.\n\nThe Little Elephant doesn't want to call the police until he understands if he could have accidentally changed the array himself. He thinks that he could have accidentally changed array a, only if array a can be sorted in no more than one operation of swapping elements (not necessarily adjacent). That is, the Little Elephant could have accidentally swapped some two elements.\n\nHelp the Little Elephant, determine if he could have accidentally changed the array a, sorted by non-decreasing, himself.\n\nInput Format:\nThe first line contains a single integer n (2 \u2264 n \u2264 105) \u2014 the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, \u2014 array a.\n\nNote that the elements of the array are not necessarily distinct numbers.\n\nOutput Format:\nIn a single line print \"YES\" (without the quotes) if the Little Elephant could have accidentally changed the array himself, and \"NO\" (without the quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\n2\n1 2\nOutput:\nYES\n\nExample 2:\nInput:\n3\n3 2 1\nOutput:\nYES\n\nExample 3:\nInput:\n4\n4 3 2 1\nOutput:\nNO\n\nNote:\nIn the first sample the array has already been sorted, so to sort it, we need 0 swap operations, that is not more than 1. Thus, the answer is \"YES\".\n\nIn the second sample we can sort the array if we swap elements 1 and 3, so we need 1 swap operation to sort the array. Thus, the answer is \"YES\".\n\nIn the third sample we can't sort the array in more than one swap operation, so the answer is \"NO\".",
    "examples": [
      {
        "input": "2\n1 2",
        "output": "YES"
      },
      {
        "input": "3\n3 2 1",
        "output": "YES"
      },
      {
        "input": "4\n4 3 2 1",
        "output": "NO"
      }
    ],
    "solution": "from sys import stdin\nfrom collections import deque,Counter,defaultdict\nimport sys\nimport math\nimport operator\nimport random\nfrom fractions import Fraction\nimport functools\nimport bisect\nimport itertools\nfrom heapq import *\nimport time\n\nn = int(input())\narr = list(map(int,input().split()))\nc = 0\nfor i,j in zip(arr,sorted(arr)):\n    if i!=j:\n        c+=1\nprint('YES' if c == 0 or c == 2 else 'NO')\n\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "577/A",
    "problem": "Title: Multiplication Table\n\nLet's consider a table consisting of n rows and n columns. The cell located at the intersection of i-th row and j-th column contains number i \u00d7 j. The rows and columns are numbered starting from 1.\n\nYou are given a positive integer x. Your task is to count the number of cells in a table that contain number x.\n\nInput Format:\nThe single line contains numbers n and x (1 \u2264 n \u2264 105, 1 \u2264 x \u2264 109) \u2014 the size of the table and the number that we are looking for in the table.\n\nOutput Format:\nPrint a single number: the number of times x occurs in the table.\n\nExamples:\nExample 1:\nInput:\n10 5\nOutput:\n2\n\nExample 2:\nInput:\n6 12\nOutput:\n4\n\nExample 3:\nInput:\n5 13\nOutput:\n0\n\nNote:\nA table for the second sample test is given below. The occurrences of number 12 are marked bold.",
    "examples": [
      {
        "input": "10 5",
        "output": "2"
      },
      {
        "input": "6 12",
        "output": "4"
      },
      {
        "input": "5 13",
        "output": "0"
      }
    ],
    "solution": "n,x=map(int,input().split())\r\n\r\nans=0\r\n\r\nfor i in range(1,n+1):\r\n    if x%i==0 and x//i<=n:\r\n        ans+=1 \r\nprint(ans)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "702/A",
    "problem": "Title: Maximum Increase\n\nYou are given array consisting of n integers. Your task is to find the maximum length of an increasing subarray of the given array.\n\nA subarray is the sequence of consecutive elements of the array. Subarray is called increasing if each element of this subarray strictly greater than previous.\n\nInput Format:\nThe first line contains single positive integer n (1 \u2264 n \u2264 105) \u2014 the number of integers.\n\nThe second line contains n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nOutput Format:\nPrint the maximum length of an increasing subarray of the given array.\n\nExamples:\nExample 1:\nInput:\n5\n1 7 2 11 15\nOutput:\n3\n\nExample 2:\nInput:\n6\n100 100 100 100 100 100\nOutput:\n1\n\nExample 3:\nInput:\n3\n1 2 3\nOutput:\n3",
    "examples": [
      {
        "input": "5\n1 7 2 11 15",
        "output": "3"
      },
      {
        "input": "6\n100 100 100 100 100 100",
        "output": "1"
      },
      {
        "input": "3\n1 2 3",
        "output": "3"
      }
    ],
    "solution": "n = int (input())\r\ncurrent = 1\r\nmax = 1\r\n\r\nx = list(map(int,input().split()))\r\nfor i in range(n-1): #   0 1 2 3  4 \r\n    if x[i+1] > x[i]:  # 1 7 2 11 15\r\n        current = current +1\r\n    else:\r\n        current=1\r\n\r\n    if max<current:max=current\r\n\r\n\r\nprint (max)",
    "explanation": "Let's iterate through the given array from the left to the right and store in the variable cur the length of the current increasing subarray. If the current element is more than the previous we need to increase cur on one. In the other case we need to update the answer with the value of cur and put in cur 1, because new increasing subarray began."
  },
  {
    "id": "46/A",
    "problem": "Title: Ball Game\n\nA kindergarten teacher Natalia Pavlovna has invented a new ball game. This game not only develops the children's physique, but also teaches them how to count.\n\nThe game goes as follows. Kids stand in circle. Let's agree to think of the children as numbered with numbers from 1 to n clockwise and the child number 1 is holding the ball. First the first child throws the ball to the next one clockwise, i.e. to the child number 2. Then the child number 2 throws the ball to the next but one child, i.e. to the child number 4, then the fourth child throws the ball to the child that stands two children away from him, i.e. to the child number 7, then the ball is thrown to the child who stands 3 children away from the child number 7, then the ball is thrown to the child who stands 4 children away from the last one, and so on. It should be mentioned that when a ball is thrown it may pass the beginning of the circle. For example, if n = 5, then after the third throw the child number 2 has the ball again. Overall, n - 1 throws are made, and the game ends.\n\nThe problem is that not all the children get the ball during the game. If a child doesn't get the ball, he gets very upset and cries until Natalia Pavlovna gives him a candy. That's why Natalia Pavlovna asks you to help her to identify the numbers of the children who will get the ball after each throw.\n\nInput Format:\nThe first line contains integer n (2 \u2264 n \u2264 100) which indicates the number of kids in the circle.\n\nOutput Format:\nIn the single line print n - 1 numbers which are the numbers of children who will get the ball after each throw. Separate the numbers by spaces.\n\nExamples:\nExample 1:\nInput:\n10\nOutput:\n2 4 7 1 6 2 9 7 6\n\nExample 2:\nInput:\n3\nOutput:\n2 1",
    "examples": [
      {
        "input": "10",
        "output": "2 4 7 1 6 2 9 7 6"
      },
      {
        "input": "3",
        "output": "2 1"
      }
    ],
    "solution": "aruncari = int(input(''))\r\n\r\ndef nr_ce_primesc_mingea(aruncari):\r\n    numar = 1\r\n    for i in range(1, aruncari):\r\n        numar = numar + i\r\n        if numar > aruncari:\r\n            numar = numar - aruncari\r\n        print(numar, end=' ')\r\n\r\nnr_ce_primesc_mingea(aruncari)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "197/A",
    "problem": "Title: Plate Game\n\nYou've got a rectangular table with length a and width b and the infinite number of plates of radius r. Two players play the following game: they take turns to put the plates on the table so that the plates don't lie on each other (but they can touch each other), and so that any point on any plate is located within the table's border. During the game one cannot move the plates that already lie on the table. The player who cannot make another move loses. Determine which player wins, the one who moves first or the one who moves second, provided that both players play optimally well.\n\nInput Format:\nA single line contains three space-separated integers a, b, r (1 \u2264 a, b, r \u2264 100) \u2014 the table sides and the plates' radius, correspondingly.\n\nOutput Format:\nIf wins the player who moves first, print \"First\" (without the quotes). Otherwise print \"Second\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n5 5 2\nOutput:\nFirst\n\nExample 2:\nInput:\n6 7 4\nOutput:\nSecond\n\nNote:\nIn the first sample the table has place for only one plate. The first player puts a plate on the table, the second player can't do that and loses.\n\nIn the second sample the table is so small that it doesn't have enough place even for one plate. So the first player loses without making a single move.",
    "examples": [
      {
        "input": "5 5 2",
        "output": "First"
      },
      {
        "input": "6 7 4",
        "output": "Second"
      }
    ],
    "solution": "A = list(map(int,input().split()))\r\na = A[0];b = A[1];r = A[2]\r\nif 2*r <= min(a,b):\r\n\tprint('First')\r\nelse:\r\n\tprint('Second')",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "523/A",
    "problem": "Title: Rotate, Flip and Zoom\n\nPolycarp is writing the prototype of a graphic editor. He has already made up his mind that the basic image transformations in his editor will be: rotate the image 90 degrees clockwise, flip the image horizontally (symmetry relative to the vertical line, that is, the right part of the image moves to the left, and vice versa) and zooming on the image. He is sure that that there is a large number of transformations that can be expressed through these three.\n\nHe has recently stopped implementing all three transformations for monochrome images. To test this feature, he asked you to write a code that will consecutively perform three actions with a monochrome image: first it will rotate the image 90 degrees clockwise, then it will flip the image horizontally and finally, it will zoom in twice on the image (that is, it will double all the linear sizes).\n\nImplement this feature to help Polycarp test his editor.\n\nInput Format:\nThe first line contains two integers, w and h (1 \u2264 w, h \u2264 100) \u2014 the width and height of an image in pixels. The picture is given in h lines, each line contains w characters \u2014 each character encodes the color of the corresponding pixel of the image. The line consists only of characters \".\" and \"*\", as the image is monochrome.\n\nOutput Format:\nPrint 2w lines, each containing 2h characters \u2014 the result of consecutive implementing of the three transformations, described above.\n\nExamples:\nExample 1:\nInput:\n3 2\n.*.\n.*.\nOutput:\n....\n....\n****\n****\n....\n....\n\nExample 2:\nInput:\n9 20\n**.......\n****.....\n******...\n*******..\n..******.\n....****.\n......***\n*.....***\n*********\n*********\n*********\n*********\n....**...\n...****..\n..******.\n.********\n****..***\n***...***\n**.....**\n*.......*\nOutput:\n********......**********........********\n********......**********........********\n********........********......********..\n********........********......********..\n..********......********....********....\n..********......********....********....\n..********......********..********......\n..********......********..********......\n....********....****************........\n....********....****************........\n....********....****************........\n....********....****************........\n......******************..**********....\n......******************..**********....\n........****************....**********..\n........****************....**********..\n............************......**********\n............************......**********",
    "examples": [
      {
        "input": "3 2\n.*.\n.*.",
        "output": "....\n....\n****\n****\n....\n...."
      },
      {
        "input": "9 20\n**.......\n****.....\n******...\n*******..\n..******.\n....****.\n......***\n*.....***\n*********\n*********\n*********\n*********\n....**...\n...****..\n..******.\n.********\n****..***\n***...***\n**.....**\n*.......*",
        "output": "********......**********........********\n********......**********........********\n********........********......********..\n********........********......********..\n..********......********....********....\n..********......********....********....\n..********......********..********......\n..********......********..********......\n....********....****************........\n....********....****************........\n....********....****************........\n....********....****************........\n......******************..**********....\n......******************..**********....\n........****************....**********..\n........****************....**********..\n............************......**********\n............************......**********"
      }
    ],
    "solution": "w, h = map(int, input().split())\r\na = []\r\nfor i in range(h):\r\n    a.append(list(input()))\r\nb = [[0 for j in range(h)] for i in range(w)] \r\nfor i in range(h):\r\n    for j in range(w):\r\n        b[j][i] = a[i][j]   \r\nfor i in range(w):\r\n    x = ''\r\n    for j in range(h):\r\n        x = x + b[i][j] + b[i][j]\r\n    print(x)\r\n    print(x)\r\n    ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "151/A",
    "problem": "Title: Soft Drinking\n\nThis winter is so cold in Nvodsk! A group of n friends decided to buy k bottles of a soft drink called \"Take-It-Light\" to warm up a bit. Each bottle has l milliliters of the drink. Also they bought c limes and cut each of them into d slices. After that they found p grams of salt.\n\nTo make a toast, each friend needs nl milliliters of the drink, a slice of lime and np grams of salt. The friends want to make as many toasts as they can, provided they all drink the same amount. How many toasts can each friend make?\n\nInput Format:\nThe first and only line contains positive integers n, k, l, c, d, p, nl, np, not exceeding 1000 and no less than 1. The numbers are separated by exactly one space.\n\nOutput Format:\nPrint a single integer \u2014 the number of toasts each friend can make.\n\nExamples:\nExample 1:\nInput:\n3 4 5 10 8 100 3 1\nOutput:\n2\n\nExample 2:\nInput:\n5 100 10 1 19 90 4 3\nOutput:\n3\n\nExample 3:\nInput:\n10 1000 1000 25 23 1 50 1\nOutput:\n0\n\nNote:\nA comment to the first sample:\n\nOverall the friends have 4 * 5 = 20 milliliters of the drink, it is enough to make 20 / 3 = 6 toasts. The limes are enough for 10 * 8 = 80 toasts and the salt is enough for 100 / 1 = 100 toasts. However, there are 3 friends in the group, so the answer is min(6, 80, 100) / 3 = 2.",
    "examples": [
      {
        "input": "3 4 5 10 8 100 3 1",
        "output": "2"
      },
      {
        "input": "5 100 10 1 19 90 4 3",
        "output": "3"
      },
      {
        "input": "10 1000 1000 25 23 1 50 1",
        "output": "0"
      }
    ],
    "solution": "a = list(map(int, input().split()))\r\ntotal_drink = a[1] * a[2]\r\ntotal_slice = a[3] * a[4]\r\ntotal_salt = a[5] // a[7]\r\nprint(min(total_drink//a[6], total_slice, total_salt) // a[0])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "356/A",
    "problem": "Title: Knight Tournament\n\nHooray! Berl II, the king of Berland is making a knight tournament. The king has already sent the message to all knights in the kingdom and they in turn agreed to participate in this grand event.\n\nAs for you, you're just a simple peasant. There's no surprise that you slept in this morning and were late for the tournament (it was a weekend, after all). Now you are really curious about the results of the tournament. This time the tournament in Berland went as follows:\n\n- There are n knights participating in the tournament. Each knight was assigned his unique number \u2014 an integer from 1 to n.\n- The tournament consisted of m fights, in the i-th fight the knights that were still in the game with numbers at least li and at most ri have fought for the right to continue taking part in the tournament.\n- After the i-th fight among all participants of the fight only one knight won \u2014 the knight number xi, he continued participating in the tournament. Other knights left the tournament.\n- The winner of the last (the m-th) fight (the knight number xm) became the winner of the tournament.\n\nYou fished out all the information about the fights from your friends. Now for each knight you want to know the name of the knight he was conquered by. We think that the knight number b was conquered by the knight number a, if there was a fight with both of these knights present and the winner was the knight number a.\n\nWrite the code that calculates for each knight, the name of the knight that beat him.\n\nInput Format:\nThe first line contains two integers n, m (2 \u2264 n \u2264 3\u00b7105;\u00a01 \u2264 m \u2264 3\u00b7105) \u2014 the number of knights and the number of fights. Each of the following m lines contains three integers li, ri, xi (1 \u2264 li < ri \u2264 n;\u00a0li \u2264 xi \u2264 ri) \u2014 the description of the i-th fight.\n\nIt is guaranteed that the input is correct and matches the problem statement. It is guaranteed that at least two knights took part in each battle.\n\nOutput Format:\nPrint n integers. If the i-th knight lost, then the i-th number should equal the number of the knight that beat the knight number i. If the i-th knight is the winner, then the i-th number must equal 0.\n\nExamples:\nExample 1:\nInput:\n4 3\n1 2 1\n1 3 3\n1 4 4\nOutput:\n3 1 4 0\n\nExample 2:\nInput:\n8 4\n3 5 4\n3 7 6\n2 8 8\n1 8 1\nOutput:\n0 8 4 6 4 8 6 1\n\nNote:\nConsider the first test case. Knights 1 and 2 fought the first fight and knight 1 won. Knights 1 and 3 fought the second fight and knight 3 won. The last fight was between knights 3 and 4, knight 4 won.",
    "examples": [
      {
        "input": "4 3\n1 2 1\n1 3 3\n1 4 4",
        "output": "3 1 4 0"
      },
      {
        "input": "8 4\n3 5 4\n3 7 6\n2 8 8\n1 8 1",
        "output": "0 8 4 6 4 8 6 1"
      }
    ],
    "solution": "def KnightTournament():\n    n, m = (int(k) for k in input().split())\n    \n    oncomingList = [i+1 for i in range(n+1)]\n    \n    answer = [0]*n\n    \n    for line in range(m):\n        left, right, x = (int(k) for k in input().split())\n        points = left\n        while points <= right:\n            if answer[points-1] == 0 and points != x:\n                answer[points-1] = x\n            nxt = oncomingList[points]\n            if points < x:\n                oncomingList[points] = x\n            else:\n                oncomingList[points] = right + 1\n            points = nxt\n     \n    return answer\n    \nprint(*KnightTournament())\n \t\t \t\t \t\t \t \t \t\t   \t\t  \t\t\t\t\t\t \t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1329/A",
    "problem": "Title: Dreamoon Likes Coloring\n\nDreamoon likes coloring cells very much.\n\nThere is a row of $$$n$$$ cells. Initially, all cells are empty (don't contain any color). Cells are numbered from $$$1$$$ to $$$n$$$.\n\nYou are given an integer $$$m$$$ and $$$m$$$ integers $$$l_1, l_2, \\ldots, l_m$$$ ($$$1 \\le l_i \\le n$$$)\n\nDreamoon will perform $$$m$$$ operations.\n\nIn $$$i$$$-th operation, Dreamoon will choose a number $$$p_i$$$ from range $$$[1, n-l_i+1]$$$ (inclusive) and will paint all cells from $$$p_i$$$ to $$$p_i+l_i-1$$$ (inclusive) in $$$i$$$-th color. Note that cells may be colored more one than once, in this case, cell will have the color from the latest operation.\n\nDreamoon hopes that after these $$$m$$$ operations, all colors will appear at least once and all cells will be colored. Please help Dreamoon to choose $$$p_i$$$ in each operation to satisfy all constraints.\n\nInput Format:\nThe first line contains two integers $$$n,m$$$ ($$$1 \\leq m \\leq n \\leq 100\\,000$$$).\n\nThe second line contains $$$m$$$ integers $$$l_1, l_2, \\ldots, l_m$$$ ($$$1 \\leq l_i \\leq n$$$).\n\nOutput Format:\nIf it's impossible to perform $$$m$$$ operations to satisfy all constraints, print \"'-1\" (without quotes).\n\nOtherwise, print $$$m$$$ integers $$$p_1, p_2, \\ldots, p_m$$$ ($$$1 \\leq p_i \\leq n - l_i + 1$$$), after these $$$m$$$ operations, all colors should appear at least once and all cells should be colored.\n\nIf there are several possible solutions, you can print any.\n\nExamples:\nExample 1:\nInput:\n5 3\n3 2 2\nOutput:\n2 4 1\n\nExample 2:\nInput:\n10 1\n1\nOutput:\n-1",
    "examples": [
      {
        "input": "5 3\n3 2 2",
        "output": "2 4 1"
      },
      {
        "input": "10 1\n1",
        "output": "-1"
      }
    ],
    "solution": "n, m = list(map(int, input().split()))\r\np = list(map(int, input().split()))\r\nfor i1 in range(m):\r\n    if i1 > n - p[i1]:\r\n        print(-1)\r\n        exit()\r\nif sum(p) < n:\r\n    print(-1)\r\n    exit()\r\nposition = [-1]*m\r\ngreedy = 0\r\nfor i1 in range(m - 1, -1, -1):\r\n    greedy += p[i1]\r\n    position[i1] = max(i1 + 1, n - greedy + 1)\r\nprint(*position)",
    "explanation": "After reading the statement, you may find this is a problem that will be tagged as \"constructive algorithms\" in Codefores. And you also can find this problem is just problem A in Div. 1. So basically we can expect there exist some simple methods to solve it.\nIf a \"constructive algorithms\" problem asks you to determine whether the solution exists or not, usually they have a common pattern(especially in problem hardness which is before Div. 1 B(inclusive)), this is, there are some simple constraints can divide test data into \"Yes\", and \"No\". Therefore, the first thing to solve this problem is finding some trivial conditions that cannot achieve Dreamoon's hope.\nAfter some try, you may find there are two trivial conditions that achieving Dreamoon's hope is impossible. The two conditions are listed as follows:\n1. Sum of $$$l_i$$$ is less than $$$n$$$. In this condition, there always is at least one empty grid.\n2. There exists some $$$i$$$ such that $$$l_i + i - 1 > n$$$. If $$$n - l_i < i - 1$$$, it means after you do $$$i$$$-th operation, there only $$$n - l_i$$$ grid is not colored by $$$i$$$-th color. So at least one of previous $$$i-1$$$ color will disapear after this operation.\nNow I want to talk about another feature of some \"constructive algorithms\" first.\nSometimes, the condition given by the problem is to \"open\", this is to say that if we added some more strict constraint, the problem is still can be solved. And when the constraint it more strict, we can deduce the solution more easily.\nOne of common \"strict constraint\" is \"sorted\". I believe you have ever seen many problems that the first step is sorting something. Now, we also want to apply \"sorted\" in the problem.\nAfter applying \"sort\", we firstly consider the edge cases of above two impossible conditions. The first case is \"sum of $$$l_i$$$ is equal to $$$n$$$\". In this case, we have a unique solution after applying \"sort\", $$$p_i = m - \\sum\\limits_{j=i+1}^{m} l_j + 1$$$. The second case is $$$l_i + i - 1 = n$$$ is hold for all $$$i$$$. In this case, there is also a unique solution that $$$p_i = i$$$. The two cases coressond to $$$n$$$ is largest and $$$n$$$ is smallest among all $$$n$$$ that exist solutions for same $$$l_i$$$. And for same $$$l_i$$$, when we decrase $$$n$$$ from the largest possible value, we can just change $$$p_i$$$ from $$$m - \\sum\\limits_{j=i+1}^{m} l_j + 1$$$ to $$$i$$$ for some smallest indices $$$i$$$ to get solution. To sum it up, finally, we get the answer. The answer is just $$$p_i = \\max(i, n - suffix\\_sum[i] + 1)$$$, for each $$$i$$$.\nThere exist many other methods to construct solutions. I believe the construction method one can think out is relative to the study experience."
  },
  {
    "id": "92/A",
    "problem": "Title: Chips\n\nThere are n walruses sitting in a circle. All of them are numbered in the clockwise order: the walrus number 2 sits to the left of the walrus number 1, the walrus number 3 sits to the left of the walrus number 2, ..., the walrus number 1 sits to the left of the walrus number n.\n\nThe presenter has m chips. The presenter stands in the middle of the circle and starts giving the chips to the walruses starting from walrus number 1 and moving clockwise. The walrus number i gets i chips. If the presenter can't give the current walrus the required number of chips, then the presenter takes the remaining chips and the process ends. Determine by the given n and m how many chips the presenter will get in the end.\n\nInput Format:\nThe first line contains two integers n and m (1 \u2264 n \u2264 50, 1 \u2264 m \u2264 104) \u2014 the number of walruses and the number of chips correspondingly.\n\nOutput Format:\nPrint the number of chips the presenter ended up with.\n\nExamples:\nExample 1:\nInput:\n4 11\nOutput:\n0\n\nExample 2:\nInput:\n17 107\nOutput:\n2\n\nExample 3:\nInput:\n3 8\nOutput:\n1\n\nNote:\nIn the first sample the presenter gives one chip to the walrus number 1, two chips to the walrus number 2, three chips to the walrus number 3, four chips to the walrus number 4, then again one chip to the walrus number 1. After that the presenter runs out of chips. He can't give anything to the walrus number 2 and the process finishes.\n\nIn the third sample the presenter gives one chip to the walrus number 1, two chips to the walrus number 2, three chips to the walrus number 3, then again one chip to the walrus number 1. The presenter has one chip left and he can't give two chips to the walrus number 2, that's why the presenter takes the last chip.",
    "examples": [
      {
        "input": "4 11",
        "output": "0"
      },
      {
        "input": "17 107",
        "output": "2"
      },
      {
        "input": "3 8",
        "output": "1"
      }
    ],
    "solution": "m,n=map(int,input().split())\r\nt=False\r\nwhile not t:\r\n    for x in range(m):\r\n        if n>=x+1:\r\n            n-=x+1\r\n        else:\r\n            t=True\r\n            break\r\nprint(n)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "519/A",
    "problem": "Title: A and B and Chess\n\nA and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:\n\n- the queen's weight is 9,\n- the rook's weight is 5,\n- the bishop's weight is 3,\n- the knight's weight is 3,\n- the pawn's weight is 1,\n- the king's weight isn't considered in evaluating position.\n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\nInput Format:\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot).\n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\nOutput Format:\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\nExamples:\nExample 1:\nInput:\n...QK...\n........\n........\n........\n........\n........\n........\n...rk...\nOutput:\nWhite\n\nExample 2:\nInput:\nrnbqkbnr\npppppppp\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR\nOutput:\nDraw\n\nExample 3:\nInput:\nrppppppr\n...k....\n........\n........\n........\n........\nK...Q...\n........\nOutput:\nBlack\n\nNote:\nIn the first test sample the weight of the position of the white pieces equals to 9, the weight of the position of the black pieces equals 5.\n\nIn the second test sample the weights of the positions of the black and the white pieces are equal to 39.\n\nIn the third test sample the weight of the position of the white pieces equals to 9, the weight of the position of the black pieces equals to 16.",
    "examples": [
      {
        "input": "...QK...\n........\n........\n........\n........\n........\n........\n...rk...",
        "output": "White"
      },
      {
        "input": "rnbqkbnr\npppppppp\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR",
        "output": "Draw"
      },
      {
        "input": "rppppppr\n...k....\n........\n........\n........\n........\nK...Q...\n........",
        "output": "Black"
      }
    ],
    "solution": "#519A\r\nvalW = 0\r\nvalB = 0\r\nfor _ in range(8):\r\n    a = input()\r\n    for i in range(8) :\r\n        if a[i] == 'Q':\r\n            valW = valW + 9\r\n        elif a[i] == 'R' :\r\n            valW = valW + 5\r\n        elif a[i] == 'B' :\r\n            valW = valW + 3\r\n        elif a[i] == 'N' :\r\n            valW = valW + 3\r\n        elif a[i] == 'P' :\r\n            valW = valW + 1\r\n        elif a[i] == 'K' :\r\n            valW = valW + 0\r\n        elif a[i] == 'q':\r\n            valB = valB + 9\r\n        elif a[i] == 'r' :\r\n            valB = valB + 5\r\n        elif a[i] == 'b' :\r\n            valB = valB + 3\r\n        elif a[i] == 'n' :\r\n            valB = valB + 3\r\n        elif a[i] == 'p' :\r\n            valB = valB + 1\r\n        elif a[i] == 'k' :\r\n            valB = valB + 0\r\nif valW == valB :\r\n    print('Draw')\r\nelif valW > valB :\r\n    print('White')\r\nelse :\r\n    print('Black')\r\n#print(valW, valB)\r\n#96 112\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "834/A",
    "problem": "Title: The Useless Toy\n\nWalking through the streets of Marshmallow City, Slastyona have spotted some merchants selling a kind of useless toy which is very popular nowadays\u00a0\u2013 caramel spinner! Wanting to join the craze, she has immediately bought the strange contraption.\n\nSpinners in Sweetland have the form of V-shaped pieces of caramel. Each spinner can, well, spin around an invisible magic axis. At a specific point in time, a spinner can take 4 positions shown below (each one rotated 90 degrees relative to the previous, with the fourth one followed by the first one):\n\nAfter the spinner was spun, it starts its rotation, which is described by a following algorithm: the spinner maintains its position for a second then majestically switches to the next position in clockwise or counter-clockwise order, depending on the direction the spinner was spun in.\n\nSlastyona managed to have spinner rotating for exactly n seconds. Being fascinated by elegance of the process, she completely forgot the direction the spinner was spun in! Lucky for her, she managed to recall the starting position, and wants to deduct the direction given the information she knows. Help her do this.\n\nInput Format:\nThere are two characters in the first string\u00a0\u2013 the starting and the ending position of a spinner. The position is encoded with one of the following characters: v (ASCII code 118, lowercase v), < (ASCII code 60), ^ (ASCII code 94) or > (ASCII code 62) (see the picture above for reference). Characters are separated by a single space.\n\nIn the second strings, a single number n is given (0 \u2264 n \u2264 109)\u00a0\u2013 the duration of the rotation.\n\nIt is guaranteed that the ending position of a spinner is a result of a n second spin in any of the directions, assuming the given starting position.\n\nOutput Format:\nOutput cw, if the direction is clockwise, ccw\u00a0\u2013 if counter-clockwise, and undefined otherwise.\n\nExamples:\nExample 1:\nInput:\n^ >\n1\nOutput:\ncw\n\nExample 2:\nInput:\n< ^\n3\nOutput:\nccw\n\nExample 3:\nInput:\n^ v\n6\nOutput:\nundefined",
    "examples": [
      {
        "input": "^ >\n1",
        "output": "cw"
      },
      {
        "input": "< ^\n3",
        "output": "ccw"
      },
      {
        "input": "^ v\n6",
        "output": "undefined"
      }
    ],
    "solution": "# Description of the problem can be found at http://codeforces.com/problemset/problem/834/A\r\n\r\nd = {\"v\":  0, \"<\": 1, \"^\": 2, \">\": 3}\r\nf1, f2 = input().split()\r\ns = int(input())\r\n\r\nx1 = (d[f1] + s) % 4 == d[f2]\r\nx2 = (d[f1] - s) % 4 == d[f2]\r\nif x1 and x2:\r\n    print(\"undefined\")\r\nelif x1:\r\n    print(\"cw\")\r\nelse:\r\n    print(\"ccw\")\r\n",
    "explanation": "Prequisites: none.\nThe sole fact that the spinner has four positions, which are repeated periodically, leads us to the following observations that are easily verifiable:\n\u2022 first thing is that no matter what the direction was, when k is even we're going to get the same ending position;\n\u2022 secondly, if we replace n by $$n \\mod 4$$, the resulting problem would have the same answer (basically we have removed full rotations of the spinner from consideration).\nThus, if $$n \\bmod 2 = 0$$, the answer is \"undefined\". Otherwise, we have to find the aforementioned remainder and find the direction of the spin, which is pretty straightforward.\nTime complexity: O(1)."
  },
  {
    "id": "637/A",
    "problem": "Title: Voting for Photos\n\nAfter celebrating the midcourse the students of one of the faculties of the Berland State University decided to conduct a vote for the best photo. They published the photos in the social network and agreed on the rules to choose a winner: the photo which gets most likes wins. If multiple photoes get most likes, the winner is the photo that gets this number first.\n\nHelp guys determine the winner photo by the records of likes.\n\nInput Format:\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the total likes to the published photoes.\n\nThe second line contains n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 1 000 000), where ai is the identifier of the photo which got the i-th like.\n\nOutput Format:\nPrint the identifier of the photo which won the elections.\n\nExamples:\nExample 1:\nInput:\n5\n1 3 2 2 1\nOutput:\n2\n\nExample 2:\nInput:\n9\n100 200 300 200 100 300 300 100 200\nOutput:\n300\n\nNote:\nIn the first test sample the photo with id 1 got two likes (first and fifth), photo with id 2 got two likes (third and fourth), and photo with id 3 got one like (second).\n\nThus, the winner is the photo with identifier 2, as it got:\n\n- more likes than the photo with id 3;\n- as many likes as the photo with id 1, but the photo with the identifier 2 got its second like earlier.",
    "examples": [
      {
        "input": "5\n1 3 2 2 1",
        "output": "2"
      },
      {
        "input": "9\n100 200 300 200 100 300 300 100 200",
        "output": "300"
      }
    ],
    "solution": "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Sun Mar 13 19:40:03 2016\r\n\r\n@author: Kostya S.\r\n\"\"\"\r\nfrom functools import cmp_to_key\r\nn = int(input())\r\nd = {}\r\na = [int(i) for i in input().split()]\r\nfor i,e in enumerate(a):\r\n    d[e] = (i+1,1,e) if d.get(e) == None else (i+1,d[e][1] + 1,e)\r\nt1 = sorted(list(d.values()),key = lambda x: x[1])\r\nt2 = list(filter(lambda x: x[1] == t1[-1][1],t1))\r\nt2 = sorted(t2,key = lambda x: x[0])\r\nprint(t2[0][-1])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "770/A",
    "problem": "Title: New Password\n\nInnokentiy decides to change the password in the social net \"Contact!\", but he is too lazy to invent a new password by himself. That is why he needs your help.\n\nInnokentiy decides that new password should satisfy the following conditions:\n\n- the length of the password must be equal to n,\n- the password should consist only of lowercase Latin letters,\n- the number of distinct symbols in the password must be equal to k,\n- any two consecutive symbols in the password must be distinct.\n\nYour task is to help Innokentiy and to invent a new password which will satisfy all given conditions.\n\nInput Format:\nThe first line contains two positive integers n and k (2 \u2264 n \u2264 100, 2 \u2264 k \u2264 min(n, 26)) \u2014 the length of the password and the number of distinct symbols in it.\n\nPay attention that a desired new password always exists.\n\nOutput Format:\nPrint any password which satisfies all conditions given by Innokentiy.\n\nExamples:\nExample 1:\nInput:\n4 3\nOutput:\njava\n\nExample 2:\nInput:\n6 6\nOutput:\npython\n\nExample 3:\nInput:\n5 2\nOutput:\nphphp\n\nNote:\nIn the first test there is one of the appropriate new passwords \u2014 java, because its length is equal to 4 and 3 distinct lowercase letters a, j and v are used in it.\n\nIn the second test there is one of the appropriate new passwords \u2014 python, because its length is equal to 6 and it consists of 6 distinct lowercase letters.\n\nIn the third test there is one of the appropriate new passwords \u2014 phphp, because its length is equal to 5 and 2 distinct lowercase letters p and h are used in it.\n\nPay attention the condition that no two identical symbols are consecutive is correct for all appropriate passwords in tests.",
    "examples": [
      {
        "input": "4 3",
        "output": "java"
      },
      {
        "input": "6 6",
        "output": "python"
      },
      {
        "input": "5 2",
        "output": "phphp"
      }
    ],
    "solution": "n, k = map(int,input().split())\r\n\r\nprint(('abcdefghijklmnopqrstuvwxyz' [:k]*n )[:n])",
    "explanation": "To solve this problem, consider the first k Latin letters. We will add them to the answer in the order, firstly, we add a, then b and so on. If letters are finished but the length of the answer is still less than the required one, then we start again adding letters from the beginning of the alphabet. We will repeat this algorithm until the length of the answer becomes n."
  },
  {
    "id": "747/A",
    "problem": "Title: Display Size\n\nA big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels.\n\nYour task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:\n\n- there are exactly n pixels on the display;\n- the number of rows does not exceed the number of columns, it means a\u2009\u2264\u2009b;\n- the difference b\u2009-\u2009a is as small as possible.\n\nInput Format:\nThe first line contains the positive integer n (1 \u2264 n \u2264 106)\u00a0\u2014 the number of pixels display should have.\n\nOutput Format:\nPrint two integers\u00a0\u2014 the number of rows and columns on the display.\n\nExamples:\nExample 1:\nInput:\n8\nOutput:\n2 4\n\nExample 2:\nInput:\n64\nOutput:\n8 8\n\nExample 3:\nInput:\n5\nOutput:\n1 5\n\nExample 4:\nInput:\n999999\nOutput:\n999 1001\n\nNote:\nIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.\n\nIn the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.\n\nIn the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.",
    "examples": [
      {
        "input": "8",
        "output": "2 4"
      },
      {
        "input": "64",
        "output": "8 8"
      },
      {
        "input": "5",
        "output": "1 5"
      },
      {
        "input": "999999",
        "output": "999 1001"
      }
    ],
    "solution": "n = int(input())\r\ni = 1\r\nans = 1\r\nwhile i*i<=n:\r\n    if n%i==0 : ans = i\r\n    i+=1\r\nprint (ans, n//ans)\r\n",
    "explanation": "We can iterate through the values of a from 1 to n. For each i if n\u00a0mod\u00a0i\u2009=\u20090 and if abs(i\u2009-\u2009n\u2009/\u2009i) is less than already found different we need to update answer with values min(i,\u2009n\u2009/\u2009i) and max(i,\u2009n\u2009/\u2009i) (because a must be less than b)."
  },
  {
    "id": "451/A",
    "problem": "Title: Game With Sticks\n\nAfter winning gold and silver in IOI 2014, Akshat and Malvika want to have some fun. Now they are playing a game on a grid made of n horizontal and m vertical sticks.\n\nAn intersection point is any point on the grid which is formed by the intersection of one horizontal stick and one vertical stick.\n\nIn the grid shown below, n = 3 and m = 3. There are n + m = 6 sticks in total (horizontal sticks are shown in red and vertical sticks are shown in green). There are n\u00b7m = 9 intersection points, numbered from 1 to 9.\n\nThe rules of the game are very simple. The players move in turns. Akshat won gold, so he makes the first move. During his/her move, a player must choose any remaining intersection point and remove from the grid all sticks which pass through this point. A player will lose the game if he/she cannot make a move (i.e. there are no intersection points remaining on the grid at his/her move).\n\nAssume that both players play optimally. Who will win the game?\n\nInput Format:\nThe first line of input contains two space-separated integers, n and m (1 \u2264 n, m \u2264 100).\n\nOutput Format:\nPrint a single line containing \"Akshat\" or \"Malvika\" (without the quotes), depending on the winner of the game.\n\nExamples:\nExample 1:\nInput:\n2 2\nOutput:\nMalvika\n\nExample 2:\nInput:\n2 3\nOutput:\nMalvika\n\nExample 3:\nInput:\n3 3\nOutput:\nAkshat\n\nNote:\nExplanation of the first sample:\n\nThe grid has four intersection points, numbered from 1 to 4.\n\nIf Akshat chooses intersection point 1, then he will remove two sticks (1 - 2 and 1 - 3). The resulting grid will look like this.\n\nNow there is only one remaining intersection point (i.e. 4). Malvika must choose it and remove both remaining sticks. After her move the grid will be empty.\n\nIn the empty grid, Akshat cannot make any move, hence he will lose.\n\nSince all 4 intersection points of the grid are equivalent, Akshat will lose no matter which one he picks.",
    "examples": [
      {
        "input": "2 2",
        "output": "Malvika"
      },
      {
        "input": "2 3",
        "output": "Malvika"
      },
      {
        "input": "3 3",
        "output": "Akshat"
      }
    ],
    "solution": "line = list(map(int, input().strip().split()))\r\n\r\nif(min(line)%2 == 0):\r\n\tprint(\"Malvika\")\r\nelse:\r\n\tprint(\"Akshat\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "431/A",
    "problem": "Title: Black Square\n\nQuite recently, a very smart student named Jury decided that lectures are boring, so he downloaded a game called \"Black Square\" on his super cool touchscreen phone.\n\nIn this game, the phone's screen is divided into four vertical strips. Each second, a black square appears on some of the strips. According to the rules of the game, Jury must use this second to touch the corresponding strip to make the square go away. As Jury is both smart and lazy, he counted that he wastes exactly ai calories on touching the i-th strip.\n\nYou've got a string s, describing the process of the game and numbers a1, a2, a3, a4. Calculate how many calories Jury needs to destroy all the squares?\n\nInput Format:\nThe first line contains four space-separated integers a1, a2, a3, a4 (0 \u2264 a1, a2, a3, a4 \u2264 104).\n\nThe second line contains string s (1 \u2264 |s| \u2264 105), where the \u0456-th character of the string equals \"1\", if on the i-th second of the game the square appears on the first strip, \"2\", if it appears on the second strip, \"3\", if it appears on the third strip, \"4\", if it appears on the fourth strip.\n\nOutput Format:\nPrint a single integer \u2014 the total number of calories that Jury wastes.\n\nExamples:\nExample 1:\nInput:\n1 2 3 4\n123214\nOutput:\n13\n\nExample 2:\nInput:\n1 5 3 2\n11221\nOutput:\n13",
    "examples": [
      {
        "input": "1 2 3 4\n123214",
        "output": "13"
      },
      {
        "input": "1 5 3 2\n11221",
        "output": "13"
      }
    ],
    "solution": "k = list(map(int,input().split()))\r\ns = str(input())\r\n\r\nsum =  0\r\n\r\nfor i in s:\r\n    if i == \"1\":\r\n        sum += k[0]\r\n    elif i == \"2\":\r\n        sum += k[1]\r\n    elif i == \"3\":\r\n        sum += k[2]\r\n    elif i == \"4\":\r\n        sum += k[3]\r\n\r\nprint(sum)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "291/A",
    "problem": "Title: Spyke Talks\n\nPolycarpus is the director of a large corporation. There are n secretaries working for the corporation, each of them corresponds via the famous Spyke VoIP system during the day. We know that when two people call each other via Spyke, the Spyke network assigns a unique ID to this call, a positive integer session number.\n\nOne day Polycarpus wondered which secretaries are talking via the Spyke and which are not. For each secretary, he wrote out either the session number of his call or a 0 if this secretary wasn't talking via Spyke at that moment.\n\nHelp Polycarpus analyze these data and find out the number of pairs of secretaries that are talking. If Polycarpus has made a mistake in the data and the described situation could not have taken place, say so.\n\nNote that the secretaries can correspond via Spyke not only with each other, but also with the people from other places. Also, Spyke conferences aren't permitted \u2014 that is, one call connects exactly two people.\n\nInput Format:\nThe first line contains integer n (1 \u2264 n \u2264 103) \u2014 the number of secretaries in Polycarpus's corporation. The next line contains n space-separated integers: id1, id2, ..., idn (0 \u2264 idi \u2264 109). Number idi equals the number of the call session of the i-th secretary, if the secretary is talking via Spyke, or zero otherwise.\n\nConsider the secretaries indexed from 1 to n in some way.\n\nOutput Format:\nPrint a single integer \u2014 the number of pairs of chatting secretaries, or -1 if Polycarpus's got a mistake in his records and the described situation could not have taken place.\n\nExamples:\nExample 1:\nInput:\n6\n0 1 7 1 7 10\nOutput:\n2\n\nExample 2:\nInput:\n3\n1 1 1\nOutput:\n-1\n\nExample 3:\nInput:\n1\n0\nOutput:\n0\n\nNote:\nIn the first test sample there are two Spyke calls between secretaries: secretary 2 and secretary 4, secretary 3 and secretary 5.\n\nIn the second test sample the described situation is impossible as conferences aren't allowed.",
    "examples": [
      {
        "input": "6\n0 1 7 1 7 10",
        "output": "2"
      },
      {
        "input": "3\n1 1 1",
        "output": "-1"
      },
      {
        "input": "1\n0",
        "output": "0"
      }
    ],
    "solution": "def cocktail_sort(a):\r\n    n = len(a)\r\n    swapped = True\r\n    start = 0\r\n    end = n-1\r\n    while (swapped == True):\r\n \r\n        # reset the swapped flag on entering the loop,\r\n        # because it might be true from a previous\r\n        # iteration.\r\n        swapped = False\r\n \r\n        # loop from left to right same as the bubble\r\n        # sort\r\n        for i in range (start, end):\r\n            if (a[i] > a[i + 1]) :\r\n                a[i], a[i + 1]= a[i + 1], a[i]\r\n                swapped = True\r\n \r\n        # if nothing moved, then array is sorted.\r\n        if (swapped == False):\r\n            break\r\n \r\n        # otherwise, reset the swapped flag so that it\r\n        # can be used in the next stage\r\n        swapped = False\r\n \r\n        # move the end point back by one, because\r\n        # item at the end is in its rightful spot\r\n        end = end-1\r\n \r\n        # from right to left, doing the same\r\n        # comparison as in the previous stage\r\n        for i in range(end-1, start-1, -1):\r\n            if (a[i] > a[i + 1]):\r\n                a[i], a[i + 1] = a[i + 1], a[i]\r\n                swapped = True\r\n \r\n        # increase the starting point, because\r\n        # the last stage would have moved the next\r\n        # smallest number to its rightful spot.\r\n        start = start + 1\r\n\r\n\r\n\r\nn = int(input())\r\nx = list(map(int, input().split()))\r\n\r\nanswer = 0\r\n\r\ncocktail_sort(x)\r\n\r\nfor i in range(len(x)-1):\r\n\tif (i+2)>= n:\r\n\t\tif (x[i] == x[i+1]) and (x[i] != 0):\r\n\t\t\tanswer = answer + 1\r\n\t\t\ti = i+1\r\n\telse:\r\n\t\r\n\t\tif x[i] == x[i+1] and x[i] != 0  and x[i] !=x[i+2]:\r\n\t\t\tanswer = answer + 1\r\n\t\t\ti = i + 1\r\n\t\t\t\r\n\t\telif x[i] == x[i+1] and  x[i] == x[i+2] and x[i]!= 0:\r\n\t\t\tanswer = -1\r\n\t\t\tbreak\r\n\t\r\nprint(answer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "124/A",
    "problem": "Title: The number of positions\n\nPetr stands in line of n people, but he doesn't know exactly which position he occupies. He can say that there are no less than a people standing in front of him and no more than b people standing behind him. Find the number of different positions Petr can occupy.\n\nInput Format:\nThe only line contains three integers n, a and b (0 \u2264 a, b < n \u2264 100).\n\nOutput Format:\nPrint the single number \u2014 the number of the sought positions.\n\nExamples:\nExample 1:\nInput:\n3 1 1\nOutput:\n2\n\nExample 2:\nInput:\n5 2 3\nOutput:\n3\n\nNote:\nThe possible positions in the first sample are: 2 and 3 (if we number the positions starting with 1).\n\nIn the second sample they are 3, 4 and 5.",
    "examples": [
      {
        "input": "3 1 1",
        "output": "2"
      },
      {
        "input": "5 2 3",
        "output": "3"
      }
    ],
    "solution": "def pos(n,f,d):\r\n    return n-max(f+1,n-b)+1;\r\nn,f,b=map(int,input().split(' '))\r\nprint(pos(n,f,b))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "174/A",
    "problem": "Title: Problem About Equation\n\nA group of n merry programmers celebrate Robert Floyd's birthday. Polucarpus has got an honourable task of pouring Ber-Cola to everybody. Pouring the same amount of Ber-Cola to everybody is really important. In other words, the drink's volume in each of the n mugs must be the same.\n\nPolycarpus has already began the process and he partially emptied the Ber-Cola bottle. Now the first mug has a1 milliliters of the drink, the second one has a2 milliliters and so on. The bottle has b milliliters left and Polycarpus plans to pour them into the mugs so that the main equation was fulfilled.\n\nWrite a program that would determine what volume of the drink Polycarpus needs to add into each mug to ensure that the following two conditions were fulfilled simultaneously:\n\n- there were b milliliters poured in total. That is, the bottle need to be emptied;\n- after the process is over, the volumes of the drink in the mugs should be equal.\n\nInput Format:\nThe first line contains a pair of integers n, b (2 \u2264 n \u2264 100, 1 \u2264 b \u2264 100), where n is the total number of friends in the group and b is the current volume of drink in the bottle. The second line contains a sequence of integers a1, a2, ..., an (0 \u2264 ai \u2264 100), where ai is the current volume of drink in the i-th mug.\n\nOutput Format:\nPrint a single number \"-1\" (without the quotes), if there is no solution. Otherwise, print n float numbers c1, c2, ..., cn, where ci is the volume of the drink to add in the i-th mug. Print the numbers with no less than 6 digits after the decimal point, print each ci on a single line. Polycarpus proved that if a solution exists then it is unique.\n\nRussian locale is installed by default on the testing computer. Make sure that your solution use the point to separate the integer part of a real number from the decimal, not a comma.\n\nExamples:\nExample 1:\nInput:\n5 50\n1 2 3 4 5\nOutput:\n12.000000\n11.000000\n10.000000\n9.000000\n8.000000\n\nExample 2:\nInput:\n2 2\n1 100\nOutput:\n-1",
    "examples": [
      {
        "input": "5 50\n1 2 3 4 5",
        "output": "12.000000\n11.000000\n10.000000\n9.000000\n8.000000"
      },
      {
        "input": "2 2\n1 100",
        "output": "-1"
      }
    ],
    "solution": "# import sys\r\n# sys.stdin = open(\"test.txt\", 'r')\r\n\r\nn, b = list(map(int, input().split()))\r\na = list(map(int, input().split()))\r\n\r\nans = []\r\nt = sum(a) + b\r\np = t/n\r\nfor v in a:\r\n    s = p-v\r\n    if s < 0:\r\n        print(-1)\r\n        break\r\n    else:\r\n        ans.append(s)\r\nelse:\r\n    for s in ans:\r\n        print(f'{s:.6f}')\r\n\r\n\r\n\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "52/A",
    "problem": "Title: 123-sequence\n\nThere is a given sequence of integers a1, a2, ..., an, where every number is from 1 to 3 inclusively. You have to replace the minimum number of numbers in it so that all the numbers in the sequence are equal to each other.\n\nInput Format:\nThe first line contains an integer n (1 \u2264 n \u2264 106). The second line contains a sequence of integers a1, a2, ..., an (1 \u2264 ai \u2264 3).\n\nOutput Format:\nPrint the minimum number of replacements needed to be performed to make all the numbers in the sequence equal.\n\nExamples:\nExample 1:\nInput:\n9\n1 3 2 2 2 1 1 2 3\nOutput:\n5\n\nNote:\nIn the example all the numbers equal to 1 and 3 should be replaced by 2.",
    "examples": [
      {
        "input": "9\n1 3 2 2 2 1 1 2 3",
        "output": "5"
      }
    ],
    "solution": "n = int(input())\r\ns = input().split()\r\nmax_ = 0\r\nfor el in range(1,4):\r\n    if s.count(str(el)) > max_:\r\n        max_ = s.count(str(el))\r\nprint(len(s) - max_)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "150/A",
    "problem": "Title: Win or Freeze\n\nYou can't possibly imagine how cold our friends are this winter in Nvodsk! Two of them play the following game to warm up: initially a piece of paper has an integer q. During a move a player should write any integer number that is a non-trivial divisor of the last written number. Then he should run this number of circles around the hotel. Let us remind you that a number's divisor is called non-trivial if it is different from one and from the divided number itself.\n\nThe first person who can't make a move wins as he continues to lie in his warm bed under three blankets while the other one keeps running. Determine which player wins considering that both players play optimally. If the first player wins, print any winning first move.\n\nInput Format:\nThe first line contains the only integer q (1 \u2264 q \u2264 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.\n\nOutput Format:\nIn the first line print the number of the winning player (1 or 2). If the first player wins then the second line should contain another integer \u2014 his first move (if the first player can't even make the first move, print 0). If there are multiple solutions, print any of them.\n\nExamples:\nExample 1:\nInput:\n6\nOutput:\n2\n\nExample 2:\nInput:\n30\nOutput:\n1\n6\n\nExample 3:\nInput:\n1\nOutput:\n1\n0\n\nNote:\nNumber 6 has only two non-trivial divisors: 2 and 3. It is impossible to make a move after the numbers 2 and 3 are written, so both of them are winning, thus, number 6 is the losing number. A player can make a move and write number 6 after number 30; 6, as we know, is a losing number. Thus, this move will bring us the victory.",
    "examples": [
      {
        "input": "6",
        "output": "2"
      },
      {
        "input": "30",
        "output": "1\n6"
      },
      {
        "input": "1",
        "output": "1\n0"
      }
    ],
    "solution": "q = int(input())\r\ndef is_prime(n):\r\n  if n % 2 == 0 and n != 2:\r\n    return False\r\n  for i in range(3, int(n**0.5)+1, 2):\r\n    if n % i == 0:\r\n      return False\r\n  return True\r\nif is_prime(q):\r\n  print(\"1\\n0\")\r\nelse:\r\n  f = []\r\n  while q % 2 == 0:\r\n    q //= 2\r\n    f.append(2)\r\n  for x in range(3, int(q**0.5)+1, 2):\r\n    while q % x == 0:\r\n      q //= x\r\n      f.append(x)\r\n    if len(f) > 2:\r\n      break\r\n  else:\r\n    if q != 1:\r\n      f.append(q)\r\n  if len(f) == 2:\r\n    print(2)\r\n  else:\r\n    print(1, f[0]*f[1], sep=\"\\n\")\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n  ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "14/A",
    "problem": "Title: Letter\n\nA boy Bob likes to draw. Not long ago he bought a rectangular graph (checked) sheet with n rows and m columns. Bob shaded some of the squares on the sheet. Having seen his masterpiece, he decided to share it with his elder brother, who lives in Flatland. Now Bob has to send his picture by post, but because of the world economic crisis and high oil prices, he wants to send his creation, but to spend as little money as possible. For each sent square of paper (no matter whether it is shaded or not) Bob has to pay 3.14 burles. Please, help Bob cut out of his masterpiece a rectangle of the minimum cost, that will contain all the shaded squares. The rectangle's sides should be parallel to the sheet's sides.\n\nInput Format:\nThe first line of the input data contains numbers n and m (1 \u2264 n, m \u2264 50), n \u2014 amount of lines, and m \u2014 amount of columns on Bob's sheet. The following n lines contain m characters each. Character \u00ab.\u00bb stands for a non-shaded square on the sheet, and \u00ab*\u00bb \u2014 for a shaded square. It is guaranteed that Bob has shaded at least one square.\n\nOutput Format:\nOutput the required rectangle of the minimum cost. Study the output data in the sample tests to understand the output format better.\n\nExamples:\nExample 1:\nInput:\n6 7\n.......\n..***..\n..*....\n..***..\n..*....\n..***..\nOutput:\n***\n*..\n***\n*..\n***\n\nExample 2:\nInput:\n3 3\n***\n*.*\n***\nOutput:\n***\n*.*\n***",
    "examples": [
      {
        "input": "6 7\n.......\n..***..\n..*....\n..***..\n..*....\n..***..",
        "output": "***\n*..\n***\n*..\n***"
      },
      {
        "input": "3 3\n***\n*.*\n***",
        "output": "***\n*.*\n***"
      }
    ],
    "solution": "#%%\r\nrc=input().split()\r\nr,c=[int(x) for x in rc]\r\nmatrix=[]\r\nfor i in range(r):\r\n    matrix.append(input())\r\nmax_i=0\r\nmax_j=0\r\nmin_i=r-1\r\nmin_j=c-1\r\nfor i in range(r):\r\n    for j in range(c):\r\n        if matrix[i][j]=='*':\r\n            if i<min_i:\r\n                min_i=i\r\n            if i>max_i:\r\n                max_i=i\r\n            if j<min_j:\r\n                min_j=j\r\n            if j>=max_j:\r\n                max_j=j\r\nfor i in range(min_i,max_i+1):\r\n    print(matrix[i][min_j:max_j+1])\r\n\r\n\r\n\r\n# %%\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "571/A",
    "problem": "Title: Lengthening Sticks\n\nYou are given three sticks with positive integer lengths of a, b, and c centimeters. You can increase length of some of them by some positive integer number of centimeters (different sticks can be increased by a different length), but in total by at most l centimeters. In particular, it is allowed not to increase the length of any stick.\n\nDetermine the number of ways to increase the lengths of some sticks so that you can form from them a non-degenerate (that is, having a positive area) triangle. Two ways are considered different, if the length of some stick is increased by different number of centimeters in them.\n\nInput Format:\nThe single line contains 4 integers a, b, c, l (1 \u2264 a, b, c \u2264 3\u00b7105, 0 \u2264 l \u2264 3\u00b7105).\n\nOutput Format:\nPrint a single integer \u2014 the number of ways to increase the sizes of the sticks by the total of at most l centimeters, so that you can make a non-degenerate triangle from it.\n\nExamples:\nExample 1:\nInput:\n1 1 1 2\nOutput:\n4\n\nExample 2:\nInput:\n1 2 3 1\nOutput:\n2\n\nExample 3:\nInput:\n10 2 1 7\nOutput:\n0\n\nNote:\nIn the first sample test you can either not increase any stick or increase any two sticks by 1 centimeter.\n\nIn the second sample test you can increase either the first or the second stick by one centimeter. Note that the triangle made from the initial sticks is degenerate and thus, doesn't meet the conditions.",
    "examples": [
      {
        "input": "1 1 1 2",
        "output": "4"
      },
      {
        "input": "1 2 3 1",
        "output": "2"
      },
      {
        "input": "10 2 1 7",
        "output": "0"
      }
    ],
    "solution": "#in the name of god\r\n#Mr_Rubick\r\na,b,c,l=map(int, input().split())\r\ncnt=(l+3)*(l+2)*(l+1)//3\r\nfor i in (a,b,c):\r\n    s=2*i-a-b-c\r\n    for x in range(max(0,-s),l+1):\r\n        m = min(s+x,l-x)\r\n        cnt-=(m+1)*(m+2)\r\nprint(cnt//2)\r\n",
    "explanation": "Let's count the number of ways to form a triple which can't represent triangle sides, and then we subtract this value from $$C_{l+3}^{3} = \\frac{(l+1)(l+1)(l+2)}{6}$$ \u2014 the total number of ways to increase the sticks not more than l in total. This number is obtained from partition of l into 4 summands (la\u2009+\u2009lb\u2009+\u2009lc\u2009+\u2009unusedl\u2009=\u2009l), or can be counted using a 'for' loop.\nNow we consider triples a\u2009+\u2009la,\u2009b\u2009+\u2009lb,\u2009c\u2009+\u2009lc, where la\u2009+\u2009lb\u2009+\u2009lc\u2009\u2264\u2009l,\u2009la,\u2009lb,\u2009lc\u2009\u2265\u20090. Fix the maximal side, for example it would be a\u2009+\u2009la. We'll have to do the following algo for b\u2009+\u2009lb and c\u2009+\u2009lc in the same way. The triple is not a triangle with maximal side a\u2009+\u2009la if a\u2009+\u2009la\u2009\u2265\u2009b\u2009+\u2009lb\u2009+\u2009c\u2009+\u2009lc. If we iterate over la between 0 and l, we have the following conditions on lb,\u2009lc:\nTo sum up, we need to iterate over the maximal side and over the addition to that side, then write these formulas, and subtract the result from the total number of different additions to the sides. The complexity of the solution is O(l)."
  },
  {
    "id": "567/A",
    "problem": "Title: Lineland Mail\n\nAll cities of Lineland are located on the Ox coordinate axis. Thus, each city is associated with its position xi \u2014 a coordinate on the Ox axis. No two cities are located at a single point.\n\nLineland residents love to send letters to each other. A person may send a letter only if the recipient lives in another city (because if they live in the same city, then it is easier to drop in).\n\nStrange but true, the cost of sending the letter is exactly equal to the distance between the sender's city and the recipient's city.\n\nFor each city calculate two values \u200b\u200bmini and maxi, where mini is the minimum cost of sending a letter from the i-th city to some other city, and maxi is the the maximum cost of sending a letter from the i-th city to some other city\n\nInput Format:\nThe first line of the input contains integer n (2 \u2264 n \u2264 105) \u2014 the number of cities in Lineland. The second line contains the sequence of n distinct integers x1, x2, ..., xn ( - 109 \u2264 xi \u2264 109), where xi is the x-coordinate of the i-th city. All the xi's are distinct and follow in ascending order.\n\nOutput Format:\nPrint n lines, the i-th line must contain two integers mini, maxi, separated by a space, where mini is the minimum cost of sending a letter from the i-th city, and maxi is the maximum cost of sending a letter from the i-th city.\n\nExamples:\nExample 1:\nInput:\n4\n-5 -2 2 7\nOutput:\n3 12\n3 9\n4 7\n5 12\n\nExample 2:\nInput:\n2\n-1 1\nOutput:\n2 2\n2 2",
    "examples": [
      {
        "input": "4\n-5 -2 2 7",
        "output": "3 12\n3 9\n4 7\n5 12"
      },
      {
        "input": "2\n-1 1",
        "output": "2 2\n2 2"
      }
    ],
    "solution": "n=int(input())\r\na=list(map(int, input().split()))\r\nfor i in range(n):\r\n    if i==0:\r\n        print(abs(a[i+1]-a[i]),end=\" \")\r\n    elif i==n-1:\r\n        print(abs(a[n-1]-a[n-2]),end=\" \")\r\n    else:\r\n        print(min(abs(a[i]-a[i-1]),abs(a[i+1]-a[i])),end=\" \")\r\n    print(max(abs(a[i]-a[0]),abs(a[n-1]-a[i])))",
    "explanation": "Let's sort all the cities by x coordinate (saving its numbers for later). Consider all indexes below in this sorted order.\nOne can notice that the maximum cost of sending a letter from i'th city is equal to maximum of distances from i'th city to first city and from i'th city to last (max(abs(xi\u2009-\u2009x0),\u2009abs(xi\u2009-\u2009xn\u2009-\u20091)). On the other hand, the minimum cost of sending a letter will be the minimum of distances between neighboring cities (i\u2009-\u20091'th and i\u2009+\u20091'th cities), more formally, min(abs(xi\u2009-\u2009xi\u2009-\u20091),\u2009abs(xi\u2009-\u2009xi\u2009+\u20091). For each city, except the first and the last this formula is correct, but for them formulas are (abs(xi\u2009-\u2009xi\u2009+\u20091)) and (abs(xi\u2009-\u2009xi\u2009-\u20091)) respectively."
  },
  {
    "id": "925/A",
    "problem": "Title: Stairs and Elevators\n\nIn the year of $$$30XX$$$ participants of some world programming championship live in a single large hotel. The hotel has $$$n$$$ floors. Each floor has $$$m$$$ sections with a single corridor connecting all of them. The sections are enumerated from $$$1$$$ to $$$m$$$ along the corridor, and all sections with equal numbers on different floors are located exactly one above the other. Thus, the hotel can be represented as a rectangle of height $$$n$$$ and width $$$m$$$. We can denote sections with pairs of integers $$$(i, j)$$$, where $$$i$$$ is the floor, and $$$j$$$ is the section number on the floor.\n\nThe guests can walk along the corridor on each floor, use stairs and elevators. Each stairs or elevator occupies all sections $$$(1, x)$$$, $$$(2, x)$$$, $$$\\ldots$$$, $$$(n, x)$$$ for some $$$x$$$ between $$$1$$$ and $$$m$$$. All sections not occupied with stairs or elevators contain guest rooms. It takes one time unit to move between neighboring sections on the same floor or to move one floor up or down using stairs. It takes one time unit to move up to $$$v$$$ floors in any direction using an elevator. You can assume you don't have to wait for an elevator, and the time needed to enter or exit an elevator is negligible.\n\nYou are to process $$$q$$$ queries. Each query is a question \"what is the minimum time needed to go from a room in section $$$(x_1, y_1)$$$ to a room in section $$$(x_2, y_2)$$$?\"\n\nInput Format:\nThe first line contains five integers $$$n, m, c_l, c_e, v$$$ ($$$2 \\leq n, m \\leq 10^8$$$, $$$0 \\leq c_l, c_e \\leq 10^5$$$, $$$1 \\leq c_l + c_e \\leq m - 1$$$, $$$1 \\leq v \\leq n - 1$$$)\u00a0\u2014 the number of floors and section on each floor, the number of stairs, the number of elevators and the maximum speed of an elevator, respectively.\n\nThe second line contains $$$c_l$$$ integers $$$l_1, \\ldots, l_{c_l}$$$ in increasing order ($$$1 \\leq l_i \\leq m$$$), denoting the positions of the stairs. If $$$c_l = 0$$$, the second line is empty.\n\nThe third line contains $$$c_e$$$ integers $$$e_1, \\ldots, e_{c_e}$$$ in increasing order, denoting the elevators positions in the same format. It is guaranteed that all integers $$$l_i$$$ and $$$e_i$$$ are distinct.\n\nThe fourth line contains a single integer $$$q$$$ ($$$1 \\leq q \\leq 10^5$$$)\u00a0\u2014 the number of queries.\n\nThe next $$$q$$$ lines describe queries. Each of these lines contains four integers $$$x_1, y_1, x_2, y_2$$$ ($$$1 \\leq x_1, x_2 \\leq n$$$, $$$1 \\leq y_1, y_2 \\leq m$$$)\u00a0\u2014 the coordinates of starting and finishing sections for the query. It is guaranteed that the starting and finishing sections are distinct. It is also guaranteed that these sections contain guest rooms, i.\u00a0e. $$$y_1$$$ and $$$y_2$$$ are not among $$$l_i$$$ and $$$e_i$$$.\n\nOutput Format:\nPrint $$$q$$$ integers, one per line\u00a0\u2014 the answers for the queries.\n\nExamples:\nExample 1:\nInput:\n5 6 1 1 3\n2\n5\n3\n1 1 5 6\n1 3 5 4\n3 3 5 3\nOutput:\n7\n5\n4\n\nNote:\nIn the first query the optimal way is to go to the elevator in the 5-th section in four time units, use it to go to the fifth floor in two time units and go to the destination in one more time unit.\n\nIn the second query it is still optimal to use the elevator, but in the third query it is better to use the stairs in the section 2.",
    "examples": [
      {
        "input": "5 6 1 1 3\n2\n5\n3\n1 1 5 6\n1 3 5 4\n3 3 5 3",
        "output": "7\n5\n4"
      }
    ],
    "solution": "def takeClosest(myList, myNumber):\n\n    \"\"\"\n\n    Assumes myList is sorted. Returns closest value to myNumber.\n\n\n\n    If two numbers are equally close, return the smallest number.\n\n    \"\"\"\n\n    if len(myList) == 0:\n\n        return 9e10\n\n    pos = bisect_left(myList, myNumber)\n\n    if pos == 0:\n\n        return myList[0]\n\n    if pos == len(myList):\n\n        return myList[-1]\n\n    before = myList[pos - 1]\n\n    after = myList[pos]\n\n    if after - myNumber < myNumber - before:\n\n       return after\n\n    else:\n\n       return before\n\n\n\nfrom bisect import bisect_left\n\nfrom math import ceil\n\n\n\nn, m, n_stairs, n_elevators, v = map(int, input().split(\" \"))\n\n\n\nif n_stairs > 0:\n\n    stairs = list(map(int, input().split(\" \")))\n\nelse:\n\n    stairs = []\n\n    input()\n\nif n_elevators > 0:\n\n    elevators = list(map(int, input().split(\" \")))\n\nelse:\n\n    elevators = []\n\n    input()\n\nqueries = int(input())\n\nres = []\n\nfor i in range(queries):\n\n    x1, y1, x2, y2 = map(int, input().split(\" \"))\n\n    next_elevator = takeClosest(elevators, (y1 + y2) / 2)\n\n    next_stairs = takeClosest(stairs, (y1 + y2) / 2)\n\n    time_elevator = abs(x1 - x2) / v\n\n    time_stairs = abs(x1 - x2)\n\n\n\n    mi = min(y1, y2)\n\n    ma = max(y1, y2)\n\n    if next_elevator < mi:\n\n        time_elevator += (mi - next_elevator) * 2\n\n    elif next_elevator > ma:\n\n        time_elevator += (next_elevator - ma) * 2\n\n\n\n    if next_stairs < mi:\n\n        time_stairs += (mi - next_stairs) * 2\n\n    elif next_stairs > ma:\n\n        time_stairs += (next_stairs - ma) * 2\n\n\n\n    dis = abs(y1 - y2)\n\n    if time_elevator < time_stairs:\n\n        dis += time_elevator\n\n    else:\n\n        dis += time_stairs\n\n    if x1 == x2:\n\n        res.append(abs(y1 - y2))\n\n    else:\n\n        res.append(ceil(dis))\n\nprint(*res, sep=\"\\n\")\n\n\n\n# Made By Mostafa_Khaled",
    "explanation": "First thing to mention is that we can use no more than one stairs or elevator per query. Indeed, optimal path is always a few sections horizontally, then a stair of elevator, then a few sections horizontally.\nThen, we can note that we can always use one of the nearest stairs/elevators to start/finish. Using this fact, we can binary search in the sequence of stairs/elevators to find the optimal one, and choose the optimum between using a stairs and an elevator. Don't forget about the case where you don't have to reach any stairs/elevators.\nThe complexity is $$$O(q \\log{n})$$$."
  },
  {
    "id": "398/A",
    "problem": "Title: Cards\n\nUser ainta loves to play with cards. He has a cards containing letter \"o\" and b cards containing letter \"x\". He arranges the cards in a row, and calculates the score of the deck by the formula below.\n\n1. At first, the score is 0.\n2. For each block of contiguous \"o\"s with length x the score increases by x2.\n3. For each block of contiguous \"x\"s with length y the score decreases by y2.\n\nFor example, if a = 6, b = 3 and ainta have arranged the cards in the order, that is described by string \"ooxoooxxo\", the score of the deck equals 22 - 12 + 32 - 22 + 12 = 9. That is because the deck has 5 blocks in total: \"oo\", \"x\", \"ooo\", \"xx\", \"o\".\n\nUser ainta likes big numbers, so he wants to maximize the score with the given cards. Help ainta make the score as big as possible. Note, that he has to arrange all his cards.\n\nInput Format:\nThe first line contains two space-separated integers a and b (0 \u2264 a, b \u2264 105;\u00a0a + b \u2265 1) \u2014 the number of \"o\" cards and the number of \"x\" cards.\n\nOutput Format:\nIn the first line print a single integer v \u2014 the maximum score that ainta can obtain.\n\nIn the second line print a + b characters describing the deck. If the k-th card of the deck contains \"o\", the k-th character must be \"o\". If the k-th card of the deck contains \"x\", the k-th character must be \"x\". The number of \"o\" characters must be equal to a, and the number of \"x \" characters must be equal to b. If there are many ways to maximize v, print any.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples:\nExample 1:\nInput:\n2 3\nOutput:\n-1\nxoxox\n\nExample 2:\nInput:\n4 0\nOutput:\n16\noooo\n\nExample 3:\nInput:\n0 4\nOutput:\n-16\nxxxx",
    "examples": [
      {
        "input": "2 3",
        "output": "-1\nxoxox"
      },
      {
        "input": "4 0",
        "output": "16\noooo"
      },
      {
        "input": "0 4",
        "output": "-16\nxxxx"
      }
    ],
    "solution": "# Made By Mostafa_Khaled \nbot = True \na,b=map(int,input().split())\n\n\n\ndef sqr(x):\n\n    return x*x\n\n\n\ndef work( num, flag=0 ):\n\n    ans=sqr(a-num+1)+num-1\n\n    could = min(b, num+1)\n\n\n\n    cc=b//could\n\n    res=b%could\n\n\n\n    ans-=res * sqr(cc+1) + (could-res)*sqr(cc)\n\n    if flag:\n\n        print(ans)\n\n        list=''\n\n\n\n        res2=could-res\n\n        if could==num+1:\n\n            list+='x'*cc\n\n            res2-=1\n\n\n\n        ta=a\n\n        list+='o'*(a-num+1)\n\n        ta-=a-num+1\n\n        while ta>0:\n\n            u=cc+int(res>0)\n\n            if res>0:\n\n                res-=1\n\n            else:\n\n                res2-=1\n\n            list+='x'*u\n\n            list+='o'\n\n            ta-=1\n\n        if res>0 or res2>0:\n\n            list+='x'*(cc+int(res>0))\n\n        print(str(list))\n\n    return ans\n\n\n\nif a==0:\n\n    print(-sqr(b))\n\n    print('x'*b)\n\nelif b==0:\n\n    print(sqr(a))\n\n    print('o'*a)\n\nelse:    \n\n    now=1\n\n    for i in range(1,a+1):\n\n        if i-1<=b and work(i)>work(now):\n\n            now=i\n\n    work(now,1)\n\n\n\n# Made By Mostafa_Khaled",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "446/A",
    "problem": "Title: DZY Loves Sequences\n\nDZY has a sequence a, consisting of n integers.\n\nWe'll call a sequence ai, ai + 1, ..., aj (1 \u2264 i \u2264 j \u2264 n) a subsegment of the sequence a. The value (j - i + 1) denotes the length of the subsegment.\n\nYour task is to find the longest subsegment of a, such that it is possible to change at most one number (change one number to any integer you want) from the subsegment to make the subsegment strictly increasing.\n\nYou only need to output the length of the subsegment you find.\n\nInput Format:\nThe first line contains integer n\u00a0(1 \u2264 n \u2264 105). The next line contains n integers a1, a2, ..., an\u00a0(1 \u2264 ai \u2264 109).\n\nOutput Format:\nIn a single line print the answer to the problem \u2014 the maximum length of the required subsegment.\n\nExamples:\nExample 1:\nInput:\n6\n7 2 3 1 5 6\nOutput:\n5\n\nNote:\nYou can choose subsegment a2, a3, a4, a5, a6 and change its 3rd element (that is a4) to 4.",
    "examples": [
      {
        "input": "6\n7 2 3 1 5 6",
        "output": "5"
      }
    ],
    "solution": "n = int(input())\r\ndata = list(map(int, input().split()))\r\nl = [1] * n\r\nr = [1] * n\r\nfor i in range(1, n):\r\n    if data[i - 1] < data[i]: \r\n        l[i] += l[i - 1]\r\nfor i in range(n - 2, 0, -1):\r\n    if data[i + 1] > data[i]: \r\n        r[i] += r[i + 1]\r\nans = max(max(l), max(r))\r\nif ans < n:\r\n    ans += 1\r\nfor i in range(1, n - 1):\r\n    if data[i - 1] + 1 < data[i + 1]:\r\n        ans = max(ans, l[i - 1] + r[i + 1] + 1)\r\nprint(ans)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "896/A",
    "problem": "Title: Nephren gives a riddle\n\nNephren is playing a game with little leprechauns.\n\nShe gives them an infinite array of strings, f0... \u221e.\n\nf0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".\n\nShe wants to let more people know about it, so she defines fi =  \"What are you doing while sending \"fi - 1\"? Are you busy? Will you send \"fi - 1\"?\" for all i \u2265 1.\n\nFor example, f1 is\n\n\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f1.\n\nIt can be seen that the characters in fi are letters, question marks, (possibly) quotation marks and spaces.\n\nNephren will ask the little leprechauns q times. Each time she will let them find the k-th character of fn. The characters are indexed starting from 1. If fn consists of less than k characters, output '.' (without quotes).\n\nCan you answer her queries?\n\nInput Format:\nThe first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions.\n\nEach of the next q lines describes Nephren's question and contains two integers n and k (0 \u2264 n \u2264 105, 1 \u2264 k \u2264 1018).\n\nOutput Format:\nOne line containing q characters. The i-th character in it should be the answer for the i-th query.\n\nExamples:\nExample 1:\nInput:\n3\n1 1\n1 2\n1 111111111111\nOutput:\nWh.\n\nExample 2:\nInput:\n5\n0 69\n1 194\n1 139\n0 47\n1 66\nOutput:\nabdef\n\nExample 3:\nInput:\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\nOutput:\nAreyoubusy\n\nNote:\nFor the first two examples, refer to f0 and f1 given in the legend.",
    "examples": [
      {
        "input": "3\n1 1\n1 2\n1 111111111111",
        "output": "Wh."
      },
      {
        "input": "5\n0 69\n1 194\n1 139\n0 47\n1 66",
        "output": "abdef"
      },
      {
        "input": "10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474",
        "output": "Areyoubusy"
      }
    ],
    "solution": "from functools import lru_cache\r\nimport sys\r\nsys.setrecursionlimit(100004)\r\ninput=sys.stdin.readline\r\n\r\n \r\nif __name__=='__main__':\r\n    s=\"What are you doing at the end of the world? Are you busy? Will you save us?\"\r\n    # print(len(s0))\r\n    head='What are you doing while sending \"'\r\n    #  print(len(head))\r\n    mid='\"? Are you busy? Will you send \"'\r\n    # print(len(mid))\r\n    tail='\"?'\r\n    # print(len(tail))\r\n    @lru_cache(None)\r\n    def getlength(n):\r\n        if n>55:return 10**20\r\n        return 75 if n==0 else getlength(n-1)*2+34+32+2\r\n    \r\n    @lru_cache(None)\r\n    def found(n,k):\r\n        if n==0:\r\n            return s0[k] if k<=75 else '.'\r\n        s1,s2,s3,s4,s5=split(n)\r\n        if k<s1:\r\n            return head[k]\r\n        elif k<s2:\r\n            return found(n-1,k-s1)\r\n        elif k<s3:\r\n            return mid[k-s2]\r\n        elif k<s4:\r\n            return found(n-1,k-s3)\r\n        elif k<s5:\r\n            return tail[k-s4]\r\n        else:\r\n            return '.'\r\n    \r\n    t=int(input())\r\n    for _ in range(t):\r\n        n,k=map(int,input().split())\r\n        k-=1\r\n        l=getlength(n)\r\n        if k>=l:\r\n            print('.',end='')\r\n            continue\r\n        while True:\r\n            if n==0:\r\n                print(s[k],end='')\r\n                break\r\n            if k<34:\r\n                print(head[k],end='')\r\n                break\r\n            k-=34\r\n            pre=getlength(n-1)\r\n            if k<pre:\r\n                n-=1\r\n                continue\r\n            k-=pre\r\n            if k<32:\r\n                print(mid[k],end='')\r\n                break\r\n            k-=32\r\n            if k<pre:\r\n                n-=1\r\n                continue\r\n            k-=pre\r\n            if k<2:\r\n                print(tail[k],end='')\r\n                break\r\n            k-=2\r\n            n-=1",
    "explanation": "f(n)\u2009=\u2009str1\u2009+\u2009f(n\u2009-\u20091)\u2009+\u2009str2\u2009+\u2009f(n\u2009-\u20091)\u2009+\u2009str3.\nFirst we can compute the length of f(n) for all possible n.\nFor a pair of (n,\u2009k), we can easily determine which part the k-th character is in.\nIf it's in f(n\u2009-\u20091), we can solve the problem recursively.\nThe complexity of this algorithm is O(n), which isn't sufficient to pass all tests.\nObviously, length(f(n))\u2009\u2265\u2009length(f(n\u2009-\u20091))\u00b72, so length(f(60))\u2009\u2265\u2009max(K).\nIt means that for all n\u2009>\u200960, the k-th character of f(n) can only be in str1 or the first f(n\u2009-\u20091).\nThen we can answer a query in $$O(\\log k)$$ time."
  },
  {
    "id": "793/A",
    "problem": "Title: Oleg and shares\n\nOleg the bank client checks share prices every day. There are n share prices he is interested in. Today he observed that each second exactly one of these prices decreases by k rubles (note that each second exactly one price changes, but at different seconds different prices can change). Prices can become negative. Oleg found this process interesting, and he asked Igor the financial analyst, what is the minimum time needed for all n prices to become equal, or it is impossible at all? Igor is busy right now, so he asked you to help Oleg. Can you answer this question?\n\nInput Format:\nThe first line contains two integers n and k (1 \u2264 n \u2264 105, 1 \u2264 k \u2264 109)\u00a0\u2014 the number of share prices, and the amount of rubles some price decreases each second.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 109)\u00a0\u2014 the initial prices.\n\nOutput Format:\nPrint the only line containing the minimum number of seconds needed for prices to become equal, of \u00ab-1\u00bb if it is impossible.\n\nExamples:\nExample 1:\nInput:\n3 3\n12 9 15\nOutput:\n3\n\nExample 2:\nInput:\n2 2\n10 9\nOutput:\n-1\n\nExample 3:\nInput:\n4 1\n1 1000000000 1000000000 1000000000\nOutput:\n2999999997\n\nNote:\nConsider the first example.\n\nSuppose the third price decreases in the first second and become equal 12 rubles, then the first price decreases and becomes equal 9 rubles, and in the third second the third price decreases again and becomes equal 9 rubles. In this case all prices become equal 9 rubles in 3 seconds.\n\nThere could be other possibilities, but this minimizes the time needed for all prices to become equal. Thus the answer is 3.\n\nIn the second example we can notice that parity of first and second price is different and never changes within described process. Thus prices never can become equal.\n\nIn the third example following scenario can take place: firstly, the second price drops, then the third price, and then fourth price. It happens 999999999 times, and, since in one second only one price can drop, the whole process takes 999999999 * 3 = 2999999997 seconds. We can note that this is the minimum possible time.",
    "examples": [
      {
        "input": "3 3\n12 9 15",
        "output": "3"
      },
      {
        "input": "2 2\n10 9",
        "output": "-1"
      },
      {
        "input": "4 1\n1 1000000000 1000000000 1000000000",
        "output": "2999999997"
      }
    ],
    "solution": "n, k=map(int, input().split())\na=list(map(int, input().split()))\nm=min(a)\nif any((p-m)%k!=0 for p in a):\n\tprint(-1)\nelse:\n\tprint(sum((p-m)//k for p in a))\n",
    "explanation": "Let's notice that as prices can only decrease and answer should be minimum possible, all prices should become equal to minimum among given prices.\nFormally, answer is $$\\sum_{i=1}^{n}\\frac{a_i - \\min a_1, \\ldots, a_n}{k}$$, if exists no such i that $$(a_i - \\min a_1, \\ldots, a_n) \\bmod k \\neq 0$$, otherwise answer is \u00ab\u2009-\u20091\u00bb."
  },
  {
    "id": "964/A",
    "problem": "Title: Splits\n\nLet's define a split of $$$n$$$ as a nonincreasing sequence of positive integers, the sum of which is $$$n$$$.\n\nFor example, the following sequences are splits of $$$8$$$: $$$[4, 4]$$$, $$$[3, 3, 2]$$$, $$$[2, 2, 1, 1, 1, 1]$$$, $$$[5, 2, 1]$$$.\n\nThe following sequences aren't splits of $$$8$$$: $$$[1, 7]$$$, $$$[5, 4]$$$, $$$[11, -3]$$$, $$$[1, 1, 4, 1, 1]$$$.\n\nThe weight of a split is the number of elements in the split that are equal to the first element. For example, the weight of the split $$$[1, 1, 1, 1, 1]$$$ is $$$5$$$, the weight of the split $$$[5, 5, 3, 3, 3]$$$ is $$$2$$$ and the weight of the split $$$[9]$$$ equals $$$1$$$.\n\nFor a given $$$n$$$, find out the number of different weights of its splits.\n\nInput Format:\nThe first line contains one integer $$$n$$$ ($$$1 \\leq n \\leq 10^9$$$).\n\nOutput Format:\nOutput one integer\u00a0\u2014 the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n7\nOutput:\n4\n\nExample 2:\nInput:\n8\nOutput:\n5\n\nExample 3:\nInput:\n9\nOutput:\n5\n\nNote:\nIn the first sample, there are following possible weights of splits of $$$7$$$:\n\nWeight 1: [$$$\\textbf 7$$$]\n\nWeight 2: [$$$\\textbf 3$$$, $$$\\textbf 3$$$, 1]\n\nWeight 3: [$$$\\textbf 2$$$, $$$\\textbf 2$$$, $$$\\textbf 2$$$, 1]\n\nWeight 7: [$$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$]",
    "examples": [
      {
        "input": "7",
        "output": "4"
      },
      {
        "input": "8",
        "output": "5"
      },
      {
        "input": "9",
        "output": "5"
      }
    ],
    "solution": "# from dust i have come, dust i will be\r\n\r\nn=int(input())\r\nprint(n//2+1)",
    "explanation": "There are 2 cases:\nIf weight of the split equals $$$n$$$, then the split consist of ones. Here we have only 1 option.\nElse maximum number in the split is more then 1. Then we can replace all maximum numbers with twos and the rest we split into ones and weight will be the same. So, here we have $$$\\frac{n}{2}$$$ options.\nAnswer for this problem is $$$\\frac{n}{2}$$$ + 1."
  },
  {
    "id": "484/A",
    "problem": "Title: Bits\n\nLet's denote as $$\\operatorname{popcount}(x)$$ the number of bits set ('1' bits) in the binary representation of the non-negative integer x.\n\nYou are given multiple queries consisting of pairs of integers l and r. For each query, find the x, such that l \u2264 x \u2264 r, and $$\\operatorname{popcount}(x)$$ is maximum possible. If there are multiple such numbers find the smallest of them.\n\nInput Format:\nThe first line contains integer n\u00a0\u2014 the number of queries (1 \u2264 n \u2264 10000).\n\nEach of the following n lines contain two integers li, ri\u00a0\u2014 the arguments for the corresponding query (0 \u2264 li \u2264 ri \u2264 1018).\n\nOutput Format:\nFor each query print the answer in a separate line.\n\nExamples:\nExample 1:\nInput:\n3\n1 2\n2 4\n1 10\nOutput:\n1\n3\n7\n\nNote:\nThe binary representations of numbers from 1 to 10 are listed below:\n\n110 = 12\n\n210 = 102\n\n310 = 112\n\n410 = 1002\n\n510 = 1012\n\n610 = 1102\n\n710 = 1112\n\n810 = 10002\n\n910 = 10012\n\n1010 = 10102",
    "examples": [
      {
        "input": "3\n1 2\n2 4\n1 10",
        "output": "1\n3\n7"
      }
    ],
    "solution": "def main():\n    cases = int(input())\n    for i in range(cases):\n        left, right = list(map(int, str(input()).split(\" \")))\n        res = left\n\n        for j in range(65):\n            if ((1 << j) & left) == 0:\n                if (res | (1 << j)) > right:\n                    break\n                res |= (1 << j)\n        print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n\n \t\t  \t\t    \t\t\t\t  \t\t  \t\t\t\t \t \t\t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "701/A",
    "problem": "Title: Cards\n\nThere are n cards (n is even) in the deck. Each card has a positive integer written on it. n / 2 people will play new card game. At the beginning of the game each player gets two cards, each card is given to exactly one player.\n\nFind the way to distribute cards such that the sum of values written of the cards will be equal for each player. It is guaranteed that it is always possible.\n\nInput Format:\nThe first line of the input contains integer n (2 \u2264 n \u2264 100)\u00a0\u2014 the number of cards in the deck. It is guaranteed that n is even.\n\nThe second line contains the sequence of n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 100), where ai is equal to the number written on the i-th card.\n\nOutput Format:\nPrint n / 2 pairs of integers, the i-th pair denote the cards that should be given to the i-th player. Each card should be given to exactly one player. Cards are numbered in the order they appear in the input.\n\nIt is guaranteed that solution exists. If there are several correct answers, you are allowed to print any of them.\n\nExamples:\nExample 1:\nInput:\n6\n1 5 7 4 4 3\nOutput:\n1 3\n6 2\n4 5\n\nExample 2:\nInput:\n4\n10 10 10 10\nOutput:\n1 2\n3 4\n\nNote:\nIn the first sample, cards are distributed in such a way that each player has the sum of numbers written on his cards equal to 8.\n\nIn the second sample, all values ai are equal. Thus, any distribution is acceptable.",
    "examples": [
      {
        "input": "6\n1 5 7 4 4 3",
        "output": "1 3\n6 2\n4 5"
      },
      {
        "input": "4\n10 10 10 10",
        "output": "1 2\n3 4"
      }
    ],
    "solution": "n=int(input())\nl=list(map(int,input().split()))\na=[]\nfor q in range(n):\n    a.append([l[q],q])\na.sort()\nfor q in range(n//2):\n    print(a[q][1]+1,a[n-q-1][1]+1)",
    "explanation": "Because of it is guaranteed, that the answer always exists, we need to sort all cards in non-descending order of the numbers, which are written on them. Then we need to give to the first player the first and the last card from the sorted array, give to the second player the second and the penultimate cards and so on."
  },
  {
    "id": "808/A",
    "problem": "Title: Lucky Year\n\nApart from having lots of holidays throughout the year, residents of Berland also have whole lucky years. Year is considered lucky if it has no more than 1 non-zero digit in its number. So years 100, 40000, 5 are lucky and 12, 3001 and 12345 are not.\n\nYou are given current year in Berland. Your task is to find how long will residents of Berland wait till the next lucky year.\n\nInput Format:\nThe first line contains integer number n (1 \u2264 n \u2264 109) \u2014 current year in Berland.\n\nOutput Format:\nOutput amount of years from the current year to the next lucky one.\n\nExamples:\nExample 1:\nInput:\n4\nOutput:\n1\n\nExample 2:\nInput:\n201\nOutput:\n99\n\nExample 3:\nInput:\n4000\nOutput:\n1000\n\nNote:\nIn the first example next lucky year is 5. In the second one \u2014 300. In the third \u2014 5000.",
    "examples": [
      {
        "input": "4",
        "output": "1"
      },
      {
        "input": "201",
        "output": "99"
      },
      {
        "input": "4000",
        "output": "1000"
      }
    ],
    "solution": "n = int(input())\n\nprint(((1 + int(str(n)[0])) * 10**(len(str(n)) - 1)) - n)\n# Sat Oct 07 2023 19:59:11 GMT+0300 (Moscow Standard Time)\n",
    "explanation": "Notice that the next lucky year always looks like (first digit of the current + 1) \u00b7 10^(number of digits of the current - 1). It holds also for numbers starting with 9, it will be 10 \u00b7 10^(number of digits - 1). The answer is the difference between the next lucky year and current year."
  },
  {
    "id": "241/A",
    "problem": "Title: Old Peykan\n\nThere are n cities in the country where the Old Peykan lives. These cities are located on a straight line, we'll denote them from left to right as c1, c2, ..., cn. The Old Peykan wants to travel from city c1 to cn using roads. There are (n - 1) one way roads, the i-th road goes from city ci to city ci + 1 and is di kilometers long.\n\nThe Old Peykan travels 1 kilometer in 1 hour and consumes 1 liter of fuel during this time.\n\nEach city ci (except for the last city cn) has a supply of si liters of fuel which immediately transfers to the Old Peykan if it passes the city or stays in it. This supply refreshes instantly k hours after it transfers. The Old Peykan can stay in a city for a while and fill its fuel tank many times.\n\nInitially (at time zero) the Old Peykan is at city c1 and s1 liters of fuel is transferred to it's empty tank from c1's supply. The Old Peykan's fuel tank capacity is unlimited. Old Peykan can not continue its travel if its tank is emptied strictly between two cities.\n\nFind the minimum time the Old Peykan needs to reach city cn.\n\nInput Format:\nThe first line of the input contains two space-separated integers m and k (1 \u2264 m, k \u2264 1000). The value m specifies the number of roads between cities which is equal to n - 1.\n\nThe next line contains m space-separated integers d1, d2, ..., dm (1 \u2264 di \u2264 1000) and the following line contains m space-separated integers s1, s2, ..., sm (1 \u2264 si \u2264 1000).\n\nOutput Format:\nIn the only line of the output print a single integer \u2014 the minimum time required for The Old Peykan to reach city cn from city c1.\n\nExamples:\nExample 1:\nInput:\n4 6\n1 2 5 2\n2 3 3 4\nOutput:\n10\n\nExample 2:\nInput:\n2 3\n5 6\n5 5\nOutput:\n14\n\nNote:\nIn the second sample above, the Old Peykan stays in c1 for 3 hours.",
    "examples": [
      {
        "input": "4 6\n1 2 5 2\n2 3 3 4",
        "output": "10"
      },
      {
        "input": "2 3\n5 6\n5 5",
        "output": "14"
      }
    ],
    "solution": "n, k = map(int, input().split())\r\nl, a = list(map(int, input().split())), list(map(int, input().split()))\r\nv, t, s = 0, 0, sum(l)\r\nfor i in range(n):\r\n    l[i] -= a[i]\r\nL, A = [l[0]], [a[0]]\r\nfor i in range(1, n):\r\n    if a[i] <= A[-1]: L[-1] += l[i]\r\n    else:\r\n        A.append(a[i])\r\n        L.append(l[i])\r\nfor i in range(len(A)):\r\n    d = L[i] - v\r\n    if d > 0:\r\n        u = (d - 1) // A[i] + 1\r\n        v += u * A[i]\r\n        t += u * k\r\n    v -= L[i]\r\nprint(t + s)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "499/A",
    "problem": "Title: Watching a movie\n\nYou have decided to watch the best moments of some movie. There are two buttons on your player:\n\n1. Watch the current minute of the movie. By pressing this button, you watch the current minute of the movie and the player automatically proceeds to the next minute of the movie.\n2. Skip exactly x minutes of the movie (x is some fixed positive integer). If the player is now at the t-th minute of the movie, then as a result of pressing this button, it proceeds to the minute (t\u2009+\u2009x).\n\nInitially the movie is turned on in the player on the first minute, and you want to watch exactly n best moments of the movie, the i-th best moment starts at the li-th minute and ends at the ri-th minute (more formally, the i-th best moment consists of minutes: li, li + 1, ..., ri).\n\nDetermine, what is the minimum number of minutes of the movie you have to watch if you want to watch all the best moments?\n\nInput Format:\nThe first line contains two space-separated integers n, x (1 \u2264 n \u2264 50, 1 \u2264 x \u2264 105) \u2014 the number of the best moments of the movie and the value of x for the second button.\n\nThe following n lines contain the descriptions of the best moments of the movie, the i-th line of the description contains two integers separated by a space li, ri (1 \u2264 li \u2264 ri \u2264 105).\n\nIt is guaranteed that for all integers i from 2 to n the following condition holds: ri - 1 < li.\n\nOutput Format:\nOutput a single number \u2014 the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n2 3\n5 6\n10 12\nOutput:\n6\n\nExample 2:\nInput:\n1 1\n1 100000\nOutput:\n100000\n\nNote:\nIn the first sample, the player was initially standing on the first minute. As the minutes from the 1-st to the 4-th one don't contain interesting moments, we press the second button. Now we can not press the second button and skip 3 more minutes, because some of them contain interesting moments. Therefore, we watch the movie from the 4-th to the 6-th minute, after that the current time is 7. Similarly, we again skip 3 minutes and then watch from the 10-th to the 12-th minute of the movie. In total, we watch 6 minutes of the movie.\n\nIn the second sample, the movie is very interesting, so you'll have to watch all 100000 minutes of the movie.",
    "examples": [
      {
        "input": "2 3\n5 6\n10 12",
        "output": "6"
      },
      {
        "input": "1 1\n1 100000",
        "output": "100000"
      }
    ],
    "solution": "n,x = map(int, input().split())\r\nmini = 0\r\nini = 1\r\nfor _ in range(n):\r\n    l,r = map(int, input().split())\r\n    mini += (((l - ini) % x) + (r - l + 1))\r\n    ini = (r + 1)\r\nprint(mini)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "279/A",
    "problem": "Title: Point on Spiral\n\nValera the horse lives on a plane. The Cartesian coordinate system is defined on this plane. Also an infinite spiral is painted on the plane. The spiral consists of segments: [(0, 0), (1, 0)], [(1, 0), (1, 1)], [(1, 1), ( - 1, 1)], [( - 1, 1), ( - 1,  - 1)], [( - 1,  - 1), (2,  - 1)], [(2,  - 1), (2, 2)] and so on. Thus, this infinite spiral passes through each integer point of the plane.\n\nValera the horse lives on the plane at coordinates (0, 0). He wants to walk along the spiral to point (x, y). Valera the horse has four legs, so he finds turning very difficult. Count how many times he will have to turn if he goes along a spiral from point (0, 0) to point (x, y).\n\nInput Format:\nThe first line contains two space-separated integers x and y (|x|, |y| \u2264 100).\n\nOutput Format:\nPrint a single integer, showing how many times Valera has to turn.\n\nExamples:\nExample 1:\nInput:\n0 0\nOutput:\n0\n\nExample 2:\nInput:\n1 0\nOutput:\n0\n\nExample 3:\nInput:\n0 1\nOutput:\n2\n\nExample 4:\nInput:\n-1 -1\nOutput:\n3",
    "examples": [
      {
        "input": "0 0",
        "output": "0"
      },
      {
        "input": "1 0",
        "output": "0"
      },
      {
        "input": "0 1",
        "output": "2"
      },
      {
        "input": "-1 -1",
        "output": "3"
      }
    ],
    "solution": "l = input().split(' ')\nx, y = int(l[0]), int(l[1])\nif y <= 0 and x >= 1 + y and x <= 1 - y:\n    print((-y) * 4)\nelif x > 0 and y >= 2 - x and y <= x:\n    print(x * 4 - 3)\nelif y > 0 and x >= -y and x <= y - 1:\n    print(y * 4 - 2)\nelif x < 0 and y >= x and y <= -1 - x:\n    print((-x) * 4 - 1)\nelse:\n    print(0)\n  \t\t \t \t \t     \t   \t\t\t\t\t\t \t \t\t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "628/A",
    "problem": "Title: Tennis Tournament\n\nA tennis tournament with n participants is running. The participants are playing by an olympic system, so the winners move on and the losers drop out.\n\nThe tournament takes place in the following way (below, m is the number of the participants of the current round):\n\n- let k be the maximal power of the number 2 such that k\u2009\u2264\u2009m,\n- k participants compete in the current round and a half of them passes to the next round, the other m\u2009-\u2009k participants pass to the next round directly,\n- when only one participant remains, the tournament finishes.\n\nEach match requires b bottles of water for each participant and one bottle for the judge. Besides p towels are given to each participant for the whole tournament.\n\nFind the number of bottles and towels needed for the tournament.\n\nNote that it's a tennis tournament so in each match two participants compete (one of them will win and the other will lose).\n\nInput Format:\nThe only line contains three integers n, b, p (1 \u2264 n, b, p \u2264 500) \u2014 the number of participants and the parameters described in the problem statement.\n\nOutput Format:\nPrint two integers x and y \u2014 the number of bottles and towels need for the tournament.\n\nExamples:\nExample 1:\nInput:\n5 2 3\nOutput:\n20 15\n\nExample 2:\nInput:\n8 2 4\nOutput:\n35 32\n\nNote:\nIn the first example will be three rounds:\n\n1. in the first round will be two matches and for each match 5 bottles of water are needed (two for each of the participants and one for the judge),\n2. in the second round will be only one match, so we need another 5 bottles of water,\n3. in the third round will also be only one match, so we need another 5 bottles of water.\n\nSo in total we need 20 bottles of water.\n\nIn the second example no participant will move on to some round directly.",
    "examples": [
      {
        "input": "5 2 3",
        "output": "20 15"
      },
      {
        "input": "8 2 4",
        "output": "35 32"
      }
    ],
    "solution": "#Justin Hershberger\r\n#Py3.5\r\n\r\nimport fileinput\r\n\r\ndef test():\r\n\tpass\r\nif __name__ == '__main__':\r\n\tnum_args = 1\r\n\tfor arg in range(num_args):\r\n\t\tn,b,p = map(int, input().split())\r\n\r\n\t#m is the number of participants of the current round\r\n\tm = n\r\n\r\n\t#initially we have n / 2 matches since there are n participants\r\n\tnum_matches = m // 2\r\n\r\n\t#the remainder is the number of extras\r\n\textras = abs(-m // 2) - num_matches\r\n\r\n\t#initially our running total will be num matches * 3\r\n\tsum_b = (num_matches * 2 * b) + (num_matches)\r\n\r\n\t#we have n participants so we initially need n * p towels\r\n\tsum_p = n * p\r\n\r\n\t# print(\"nm: \", num_matches, \" ex: \", extras, \" sum_b: \", sum_b, \" sum_p: \", sum_p);\r\n\t# print(m)\r\n\t#each match needs b bottles * 3, each player needs p towels\r\n\twhile num_matches > 0:\r\n\t\t#update the number of participants and num_bottles\r\n\t\tm = num_matches + extras\r\n\t\t# print(\"m: \", m)\r\n\t\t#update the number of matches\r\n\t\tnum_matches = m // 2\r\n\t\t# print(\"nm: \", num_matches)\r\n\t\textras = abs(-m // 2) - num_matches\r\n\t\t# print(\"ex: \", extras)\r\n\r\n\t\t#each match has two participants and one judge who gets one bottle\r\n\t\tsum_b += (num_matches * 2 * b) + (num_matches)\r\n\r\n\tprint(sum_b, sum_p)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "70/A",
    "problem": "Title: Cookies\n\nFangy collects cookies. Once he decided to take a box and put cookies into it in some way. If we take a square k \u00d7 k in size, divided into blocks 1 \u00d7 1 in size and paint there the main diagonal together with cells, which lie above it, then the painted area will be equal to the area occupied by one cookie k in size. Fangy also has a box with a square base 2n \u00d7 2n, divided into blocks 1 \u00d7 1 in size. In a box the cookies should not overlap, and they should not be turned over or rotated. See cookies of sizes 2 and 4 respectively on the figure:\n\nTo stack the cookies the little walrus uses the following algorithm. He takes out of the repository the largest cookie which can fit in some place in the box and puts it there. Everything could be perfect but alas, in the repository the little walrus has infinitely many cookies of size 2 and larger, and there are no cookies of size 1, therefore, empty cells will remain in the box. Fangy wants to know how many empty cells will be left in the end.\n\nInput Format:\nThe first line contains a single integer n (0 \u2264 n \u2264 1000).\n\nOutput Format:\nPrint the single number, equal to the number of empty cells in the box. The answer should be printed modulo 106 + 3.\n\nExamples:\nExample 1:\nInput:\n3\nOutput:\n9\n\nNote:\nIf the box possesses the base of 23 \u00d7 23 (as in the example), then the cookies will be put there in the following manner:",
    "examples": [
      {
        "input": "3",
        "output": "9"
      }
    ],
    "solution": "n = int(input())\r\nif n == 0:\r\n    print(1)\r\nelse:\r\n    ans = 1\r\n    for i in range(n - 1):\r\n        ans *= 3\r\n    print(ans % 1000003)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "960/A",
    "problem": "Title: Check the string\n\nA has a string consisting of some number of lowercase English letters 'a'. He gives it to his friend B who appends some number of letters 'b' to the end of this string. Since both A and B like the characters 'a' and 'b', they have made sure that at this point, at least one 'a' and one 'b' exist in the string.\n\nB now gives this string to C and he appends some number of letters 'c' to the end of the string. However, since C is a good friend of A and B, the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string. It is also possible that the number of letters 'c' equals both to the number of letters 'a' and to the number of letters 'b' at the same time.\n\nYou have a string in your hands, and you want to check if it is possible to obtain the string in this way or not. If it is possible to obtain the string, print \"YES\", otherwise print \"NO\" (without the quotes).\n\nInput Format:\nThe first and only line consists of a string $$$S$$$ ($$$ 1 \\le |S| \\le 5\\,000 $$$). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'.\n\nOutput Format:\nPrint \"YES\" or \"NO\", according to the condition.\n\nExamples:\nExample 1:\nInput:\naaabccc\nOutput:\nYES\n\nExample 2:\nInput:\nbbacc\nOutput:\nNO\n\nExample 3:\nInput:\naabc\nOutput:\nYES\n\nNote:\nConsider first example: the number of 'c' is equal to the number of 'a'.\n\nConsider second example: although the number of 'c' is equal to the number of the 'b', the order is not correct.\n\nConsider third example: the number of 'c' is equal to the number of 'b'.",
    "examples": [
      {
        "input": "aaabccc",
        "output": "YES"
      },
      {
        "input": "bbacc",
        "output": "NO"
      },
      {
        "input": "aabc",
        "output": "YES"
      }
    ],
    "solution": "# import sys\r\n# input = sys.stdin.readline\r\n\r\nfor _ in range(1):#int(input())):\r\n    s = input()\r\n    a, b, c = 0, 0, 0\r\n    flag = 0\r\n    if (s[0] == 'a'): a += 1\r\n    for i in range(1, len(s)):\r\n        if (s[i] >= s[i-1]):\r\n            if (s[i] == 'a'):\r\n                a += 1\r\n            elif (s[i] == 'b'):\r\n                b += 1\r\n            elif (s[i] == 'c'):\r\n                c += 1\r\n        else:\r\n            flag = 1\r\n            break\r\n    if (flag == 0):\r\n        if(a > 0 and b > 0 and c > 0):\r\n            if (c == a or c == b):\r\n                print(\"YES\")\r\n            else:\r\n                print(\"NO\")\r\n        else:\r\n            print(\"NO\")\r\n    else:\r\n        print(\"NO\")",
    "explanation": "Traverse the string once and check if the ASCII value of all characters is greater than or equal or the ASCII value of the previous character. This ensures that the string does not have a,b,c in wrong order.\nAlso, while traversing the string, keep three separate counters for the number of 'a', 'b' and 'c' along.\nNow, do a simple check on the condition for the count of 'c'.\nThe hack case for many solutions was to check that the count of 'a' is atleast 1 and the count of 'b' is atleast 1."
  },
  {
    "id": "22/A",
    "problem": "Title: Second Order Statistics\n\nOnce Bob needed to find the second order statistics of a sequence of integer numbers. Lets choose each number from the sequence exactly once and sort them. The value on the second position is the second order statistics of the given sequence. In other words it is the smallest element strictly greater than the minimum. Help Bob solve this problem.\n\nInput Format:\nThe first input line contains integer n (1 \u2264 n \u2264 100) \u2014 amount of numbers in the sequence. The second line contains n space-separated integer numbers \u2014 elements of the sequence. These numbers don't exceed 100 in absolute value.\n\nOutput Format:\nIf the given sequence has the second order statistics, output this order statistics, otherwise output NO.\n\nExamples:\nExample 1:\nInput:\n4\n1 2 2 -4\nOutput:\n1\n\nExample 2:\nInput:\n5\n1 2 3 1 1\nOutput:\n2",
    "examples": [
      {
        "input": "4\n1 2 2 -4",
        "output": "1"
      },
      {
        "input": "5\n1 2 3 1 1",
        "output": "2"
      }
    ],
    "solution": "n = int(input())\r\na = list(map(int,input().split()))\r\na = set(a)\r\na = list(a)\r\na.sort()\r\nif not len(a) ==1:\r\n    print(a[1])\r\nelse:\r\n    print('NO')",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "893/A",
    "problem": "Title: Chess For Three\n\nAlex, Bob and Carl will soon participate in a team chess tournament. Since they are all in the same team, they have decided to practise really hard before the tournament. But it's a bit difficult for them because chess is a game for two players, not three.\n\nSo they play with each other according to following rules:\n\n- Alex and Bob play the first game, and Carl is spectating;\n- When the game ends, the one who lost the game becomes the spectator in the next game, and the one who was spectating plays against the winner.\n\nAlex, Bob and Carl play in such a way that there are no draws.\n\nToday they have played n games, and for each of these games they remember who was the winner. They decided to make up a log of games describing who won each game. But now they doubt if the information in the log is correct, and they want to know if the situation described in the log they made up was possible (that is, no game is won by someone who is spectating if Alex, Bob and Carl play according to the rules). Help them to check it!\n\nInput Format:\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 \u2264 ai \u2264 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.\n\nOutput Format:\nPrint YES if the situation described in the log was possible. Otherwise print NO.\n\nExamples:\nExample 1:\nInput:\n3\n1\n1\n2\nOutput:\nYES\n\nExample 2:\nInput:\n2\n1\n2\nOutput:\nNO\n\nNote:\nIn the first example the possible situation is:\n\n1. Alex wins, Carl starts playing instead of Bob;\n2. Alex wins, Bob replaces Carl;\n3. Bob wins.\n\nThe situation in the second example is impossible because Bob loses the first game, so he cannot win the second one.",
    "examples": [
      {
        "input": "3\n1\n1\n2",
        "output": "YES"
      },
      {
        "input": "2\n1\n2",
        "output": "NO"
      }
    ],
    "solution": "n=int(input())\r\nlst=[]\r\nres=[1,2]\r\nfor i in range(n):\r\n  lst.append(int(input()))\r\ncheck=1\r\nfor i in lst:\r\n  if i not in res:\r\n    check=0\r\n    break\r\n  else:\r\n    if i==1:\r\n      if sum(res)==3:\r\n        res.remove(2)\r\n        res.append(3)\r\n      else:\r\n        res.remove(3)\r\n        res.append(2)\r\n    elif i==2:\r\n      if sum(res)==3:\r\n        res.remove(1)\r\n        res.append(3)\r\n      else:\r\n        res.remove(3)\r\n        res.append(1)\r\n    else:\r\n      if sum(res)==4:\r\n        res.remove(1)\r\n        res.append(2)\r\n      else:\r\n        res.remove(2)\r\n        res.append(1)\r\nif check==1:\r\n  print('YES')\r\nelse:\r\n  print('NO')",
    "explanation": "This task is about pure implementation. Maintain the number of current spectator and check if he doesn't win. With knowledge of current winner w and current spectator s you can easily get the third player by formula 6\u2009-\u2009w\u2009-\u2009s (just the sum of all numbers without the known ones).\nOverall complexity: O(n)."
  },
  {
    "id": "990/A",
    "problem": "Title: Commentary Boxes\n\nBerland Football Cup starts really soon! Commentators from all over the world come to the event.\n\nOrganizers have already built $$$n$$$ commentary boxes. $$$m$$$ regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.\n\nIf $$$n$$$ is not divisible by $$$m$$$, it is impossible to distribute the boxes to the delegations at the moment.\n\nOrganizers can build a new commentary box paying $$$a$$$ burles and demolish a commentary box paying $$$b$$$ burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.\n\nWhat is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $$$m$$$)?\n\nInput Format:\nThe only line contains four integer numbers $$$n$$$, $$$m$$$, $$$a$$$ and $$$b$$$ ($$$1 \\le n, m \\le 10^{12}$$$, $$$1 \\le a, b \\le 100$$$), where $$$n$$$ is the initial number of the commentary boxes, $$$m$$$ is the number of delegations to come, $$$a$$$ is the fee to build a box and $$$b$$$ is the fee to demolish a box.\n\nOutput Format:\nOutput the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $$$m$$$). It is allowed that the final number of the boxes is equal to $$$0$$$.\n\nExamples:\nExample 1:\nInput:\n9 7 3 8\nOutput:\n15\n\nExample 2:\nInput:\n2 7 3 7\nOutput:\n14\n\nExample 3:\nInput:\n30 6 17 19\nOutput:\n0\n\nNote:\nIn the first example organizers can build $$$5$$$ boxes to make the total of $$$14$$$ paying $$$3$$$ burles for the each of them.\n\nIn the second example organizers can demolish $$$2$$$ boxes to make the total of $$$0$$$ paying $$$7$$$ burles for the each of them.\n\nIn the third example organizers are already able to distribute all the boxes equally among the delegations, each one get $$$5$$$ boxes.",
    "examples": [
      {
        "input": "9 7 3 8",
        "output": "15"
      },
      {
        "input": "2 7 3 7",
        "output": "14"
      },
      {
        "input": "30 6 17 19",
        "output": "0"
      }
    ],
    "solution": "n, m, a, b = [int(x) for x in input().split(' ')]\r\nif n % m == 0:\r\n    print(0)\r\nelse:\r\n    rem = n % m\r\n    add_amt = (m - rem) * a\r\n    sub_amt = rem * b\r\n    print(add_amt if add_amt < sub_amt else sub_amt)",
    "explanation": "Notice that you need to check just two numbers: the closest one less or equal to $$$n$$$ and the closest one greater than $$$n$$$. Distances to them are $$$(n \\mod m)$$$ and $$$(m - (n \\mod m))$$$ respectively. Now you should multiply the first result by $$$b$$$, the second result by $$$a$$$ and compare the products.\nOverall complexity: $$$O(1)$$$."
  },
  {
    "id": "387/A",
    "problem": "Title: George and Sleep\n\nGeorge woke up and saw the current time s on the digital clock. Besides, George knows that he has slept for time t.\n\nHelp George! Write a program that will, given time s and t, determine the time p when George went to bed. Note that George could have gone to bed yesterday relatively to the current time (see the second test sample).\n\nInput Format:\nThe first line contains current time s as a string in the format \"hh:mm\". The second line contains time t in the format \"hh:mm\" \u2014 the duration of George's sleep. It is guaranteed that the input contains the correct time in the 24-hour format, that is, 00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59.\n\nOutput Format:\nIn the single line print time p \u2014 the time George went to bed in the format similar to the format of the time in the input.\n\nExamples:\nExample 1:\nInput:\n05:50\n05:44\nOutput:\n00:06\n\nExample 2:\nInput:\n00:00\n01:00\nOutput:\n23:00\n\nExample 3:\nInput:\n00:01\n00:00\nOutput:\n00:01\n\nNote:\nIn the first sample George went to bed at \"00:06\". Note that you should print the time only in the format \"00:06\". That's why answers \"0:06\", \"00:6\" and others will be considered incorrect.\n\nIn the second sample, George went to bed yesterday.\n\nIn the third sample, George didn't do to bed at all.",
    "examples": [
      {
        "input": "05:50\n05:44",
        "output": "00:06"
      },
      {
        "input": "00:00\n01:00",
        "output": "23:00"
      },
      {
        "input": "00:01\n00:00",
        "output": "00:01"
      }
    ],
    "solution": "# Description of the problem can be found at http://codeforces.com/problemset/problem/387/A\r\n\r\nl_s = list(map(int, input().split(\":\")))\r\nl_t = list(map(int, input().split(\":\")))\r\n\r\nif l_t[1] > l_s[1]:\r\n    l_s[0] -= 1\r\n    \r\nprint(\"%02d:%02d\" % ((l_s[0] - l_t[0]) % 24, (l_s[1] - l_t[1]) % 60))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "39/A",
    "problem": "Title: C*++ Calculations\n\nC*++ language is quite similar to C++. The similarity manifests itself in the fact that the programs written in C*++ sometimes behave unpredictably and lead to absolutely unexpected effects. For example, let's imagine an arithmetic expression in C*++ that looks like this (expression is the main term):\n\n- expression ::= summand | expression\u2009+\u2009summand | expression\u2009-\u2009summand\n- summand ::= increment | coefficient*increment\n- increment ::= a++ | ++a\n- coefficient ::= 0|1|2|...|1000\n\nFor example, \"5*a++-3*++a+a++\" is a valid expression in C*++.\n\nThus, we have a sum consisting of several summands divided by signs \"+\" or \"-\". Every summand is an expression \"a++\" or \"++a\" multiplied by some integer coefficient. If the coefficient is omitted, it is suggested being equal to 1.\n\nThe calculation of such sum in C*++ goes the following way. First all the summands are calculated one after another, then they are summed by the usual arithmetic rules. If the summand contains \"a++\", then during the calculation first the value of the \"a\" variable is multiplied by the coefficient, then value of \"a\" is increased by 1. If the summand contains \"++a\", then the actions on it are performed in the reverse order: first \"a\" is increased by 1, then \u2014 multiplied by the coefficient.\n\nThe summands may be calculated in any order, that's why sometimes the result of the calculation is completely unpredictable! Your task is to find its largest possible value.\n\nInput Format:\nThe first input line contains an integer a ( - 1000 \u2264 a \u2264 1000) \u2014 the initial value of the variable \"a\". The next line contains an expression in C*++ language of the described type. The number of the summands in the expression does not exceed 1000. It is guaranteed that the line describing the expression contains no spaces and tabulation.\n\nOutput Format:\nOutput a single number \u2014 the maximal possible value of the expression.\n\nExamples:\nExample 1:\nInput:\n1\n5*a++-3*++a+a++\nOutput:\n11\n\nExample 2:\nInput:\n3\na+++++a\nOutput:\n8\n\nNote:\nConsider the second example. Initially a = 3. Suppose that at first the first summand is calculated, and then the second one is. The first summand gets equal to 3, and the value of a is increased by 1. At the calculation of the second summand a is increased once more (gets equal to 5). The value of the second summand is 5, and together they give 8. If we calculate the second summand first and the first summand later, then the both summands equals to 4, and the result is 8, too.",
    "examples": [
      {
        "input": "1\n5*a++-3*++a+a++",
        "output": "11"
      },
      {
        "input": "3\na+++++a",
        "output": "8"
      }
    ],
    "solution": "import re\r\n\r\nu = int\r\nG = input\r\nX = sorted\r\ny = print\r\nA = re.findall\r\na = u(G())\r\nb = X([[u((i[0]or '+')+(i[1]or '1')), i[3]]\r\n       for i in A('(\\+|-)?(\\d{0,4})(\\*)?(a\\+\\+|\\+\\+a)', G())])\r\nz = 0\r\nfor i in b:\r\n    if i[1] == 'a++':\r\n        z += i[0]*a\r\n    else:\r\n        z += i[0]*(a+1)\r\n    a += 1\r\ny(z)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "382/A",
    "problem": "Title: Ksenia and Pan Scales\n\nKsenia has ordinary pan scales and several weights of an equal mass. Ksenia has already put some weights on the scales, while other weights are untouched. Ksenia is now wondering whether it is possible to put all the remaining weights on the scales so that the scales were in equilibrium.\n\nThe scales is in equilibrium if the total sum of weights on the left pan is equal to the total sum of weights on the right pan.\n\nInput Format:\nThe first line has a non-empty sequence of characters describing the scales. In this sequence, an uppercase English letter indicates a weight, and the symbol \"|\" indicates the delimiter (the character occurs in the sequence exactly once). All weights that are recorded in the sequence before the delimiter are initially on the left pan of the scale. All weights that are recorded in the sequence after the delimiter are initially on the right pan of the scale.\n\nThe second line contains a non-empty sequence containing uppercase English letters. Each letter indicates a weight which is not used yet.\n\nIt is guaranteed that all the English letters in the input data are different. It is guaranteed that the input does not contain any extra characters.\n\nOutput Format:\nIf you cannot put all the weights on the scales so that the scales were in equilibrium, print string \"Impossible\". Otherwise, print the description of the resulting scales, copy the format of the input.\n\nIf there are multiple answers, print any of them.\n\nExamples:\nExample 1:\nInput:\nAC|T\nL\nOutput:\nAC|TL\n\nExample 2:\nInput:\n|ABC\nXYZ\nOutput:\nXYZ|ABC\n\nExample 3:\nInput:\nW|T\nF\nOutput:\nImpossible\n\nExample 4:\nInput:\nABC|\nD\nOutput:\nImpossible",
    "examples": [
      {
        "input": "AC|T\nL",
        "output": "AC|TL"
      },
      {
        "input": "|ABC\nXYZ",
        "output": "XYZ|ABC"
      },
      {
        "input": "W|T\nF",
        "output": "Impossible"
      },
      {
        "input": "ABC|\nD",
        "output": "Impossible"
      }
    ],
    "solution": "def main():\r\n    mode=\"filee\"\r\n    if mode==\"file\":f=open(\"test.txt\",\"r\")\r\n    #f.readline()\r\n    #input()\r\n    get = lambda :[str(x) for x in (f.readline()[:-1] if mode==\"file\" else input()).split(\"|\")]\r\n    scale = get()\r\n    q = input()\r\n    if abs(len(scale[0]) - len(scale[1]))%2 != len(q)%2 or abs(len(scale[0]) - len(scale[1]))>len(q):\r\n        print(\"Impossible\")\r\n        return\r\n    if len(scale[0])<len(scale[1]):\r\n        mid = len(scale[1])-len(scale[0])\r\n        scale[0]+=q[:mid]\r\n    else:\r\n        mid = len(scale[0])-len(scale[1])\r\n        scale[1]+=q[:mid]\r\n    for z in range(mid,len(q),2):\r\n        scale[0]+=q[z]\r\n        scale[1]+=q[z+1]\r\n    print(\"|\".join(scale))\r\n\r\n    if mode==\"file\":f.close()\r\n\r\n\r\nif __name__==\"__main__\":\r\n    main()\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "105/A",
    "problem": "Title: Transmigration\n\nIn Disgaea as in most role-playing games, characters have skills that determine the character's ability to use certain weapons or spells. If the character does not have the necessary skill, he cannot use it. The skill level is represented as an integer that increases when you use this skill. Different character classes are characterized by different skills.\n\nUnfortunately, the skills that are uncommon for the given character's class are quite difficult to obtain. To avoid this limitation, there is the so-called transmigration.\n\nTransmigration is reincarnation of the character in a new creature. His soul shifts to a new body and retains part of his experience from the previous life.\n\nAs a result of transmigration the new character gets all the skills of the old character and the skill levels are reduced according to the k coefficient (if the skill level was equal to x, then after transmigration it becomes equal to [kx], where [y] is the integral part of y). If some skill's levels are strictly less than 100, these skills are forgotten (the character does not have them any more). After that the new character also gains the skills that are specific for his class, but are new to him. The levels of those additional skills are set to 0.\n\nThus, one can create a character with skills specific for completely different character classes via transmigrations. For example, creating a mage archer or a thief warrior is possible.\n\nYou are suggested to solve the following problem: what skills will the character have after transmigration and what will the levels of those skills be?\n\nInput Format:\nThe first line contains three numbers n, m and k \u2014 the number of skills the current character has, the number of skills specific for the class into which the character is going to transmigrate and the reducing coefficient respectively; n and m are integers, and k is a real number with exactly two digits after decimal point (1 \u2264 n, m \u2264 20, 0.01 \u2264 k \u2264 0.99).\n\nThen follow n lines, each of which describes a character's skill in the form \"name exp\" \u2014 the skill's name and the character's skill level: name is a string and exp is an integer in range from 0 to 9999, inclusive.\n\nThen follow m lines each of which contains names of skills specific for the class, into which the character transmigrates.\n\nAll names consist of lowercase Latin letters and their lengths can range from 1 to 20 characters, inclusive. All character's skills have distinct names. Besides the skills specific for the class into which the player transmigrates also have distinct names.\n\nOutput Format:\nPrint on the first line number z \u2014 the number of skills the character will have after the transmigration. Then print z lines, on each of which print a skill's name and level, separated by a single space. The skills should be given in the lexicographical order.\n\nExamples:\nExample 1:\nInput:\n5 4 0.75\naxe 350\nimpaler 300\nionize 80\nmegafire 120\nmagicboost 220\nheal\nmegafire\nshield\nmagicboost\nOutput:\n6\naxe 262\nheal 0\nimpaler 225\nmagicboost 165\nmegafire 0\nshield 0",
    "examples": [
      {
        "input": "5 4 0.75\naxe 350\nimpaler 300\nionize 80\nmegafire 120\nmagicboost 220\nheal\nmegafire\nshield\nmagicboost",
        "output": "6\naxe 262\nheal 0\nimpaler 225\nmagicboost 165\nmegafire 0\nshield 0"
      }
    ],
    "solution": "from collections import Counter\r\nn, m, k = input().split()\r\nk, c = int(k.split('.')[1]), Counter()\r\nfor i in range(int(n)):\r\n    s, e = input().split()\r\n    e = int(e) * k // 100\r\n    if e >= 100:\r\n        c[s] = e\r\nfor i in range(int(m)):\r\n    c[input()] += 0\r\nprint(len(c))\r\nprint('\\n'.join(sorted(x + ' ' + str(c[x]) for x in c)))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "735/A",
    "problem": "Title: Ostap and Grasshopper\n\nOn the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.\n\nOstap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.\n\nYour goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.\n\nInput Format:\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1)\u00a0\u2014 the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.\n\nOutput Format:\nIf there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print \"YES\" (without quotes) in the only line of the input. Otherwise, print \"NO\" (without quotes).\n\nExamples:\nExample 1:\nInput:\n5 2\n#G#T#\nOutput:\nYES\n\nExample 2:\nInput:\n6 1\nT....G\nOutput:\nYES\n\nExample 3:\nInput:\n7 3\nT..#..G\nOutput:\nNO\n\nExample 4:\nInput:\n6 2\n..GT..\nOutput:\nNO\n\nNote:\nIn the first sample, the grasshopper can make one jump to the right in order to get from cell 2 to cell 4.\n\nIn the second sample, the grasshopper is only able to jump to neighboring cells but the way to the insect is free\u00a0\u2014 he can get there by jumping left 5 times.\n\nIn the third sample, the grasshopper can't make a single jump.\n\nIn the fourth sample, the grasshopper can only jump to the cells with odd indices, thus he won't be able to reach the insect.",
    "examples": [
      {
        "input": "5 2\n#G#T#",
        "output": "YES"
      },
      {
        "input": "6 1\nT....G",
        "output": "YES"
      },
      {
        "input": "7 3\nT..#..G",
        "output": "NO"
      },
      {
        "input": "6 2\n..GT..",
        "output": "NO"
      }
    ],
    "solution": "n,k = map(int,input().split())\r\ncell = list(map(str,input().strip()))\r\na = cell.index(\"G\")\r\nb = cell.index(\"T\")\r\nif(a>b):\r\n    if((a-b)%k != 0):\r\n        print(\"NO\")\r\n    else:\r\n        for i in range(1,(a-b)//k + 1):\r\n            if(cell[b + k*i] == \"#\"):\r\n                print(\"NO\")\r\n                break\r\n            elif(cell[b + k*i] == \"G\"):\r\n                print(\"YES\")\r\n                break\r\nelse:\r\n    if((b-a)%k != 0):\r\n        print(\"NO\")\r\n    else:\r\n        for i in range(1,(b-a)//k + 1):\r\n            if(cell[a + k*i] == \"#\"):\r\n                print(\"NO\")\r\n                break\r\n            elif(cell[a + k*i] == \"T\"):\r\n                print(\"YES\")\r\n                break",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "983/A",
    "problem": "Title: Finite or not?\n\nYou are given several queries. Each query consists of three integers $$$p$$$, $$$q$$$ and $$$b$$$. You need to answer whether the result of $$$p/q$$$ in notation with base $$$b$$$ is a finite fraction.\n\nA fraction in notation with base $$$b$$$ is finite if it contains finite number of numerals after the decimal point. It is also possible that a fraction has zero numerals after the decimal point.\n\nInput Format:\nThe first line contains a single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)\u00a0\u2014 the number of queries.\n\nNext $$$n$$$ lines contain queries, one per line. Each line contains three integers $$$p$$$, $$$q$$$, and $$$b$$$ ($$$0 \\le p \\le 10^{18}$$$, $$$1 \\le q \\le 10^{18}$$$, $$$2 \\le b \\le 10^{18}$$$). All numbers are given in notation with base $$$10$$$.\n\nOutput Format:\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\nExamples:\nExample 1:\nInput:\n2\n6 12 10\n4 3 10\nOutput:\nFinite\nInfinite\n\nExample 2:\nInput:\n4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\nOutput:\nFinite\nFinite\nFinite\nInfinite\n\nNote:\n$$$\\frac{6}{12} = \\frac{1}{2} = 0,5_{10}$$$\n\n$$$\\frac{4}{3} = 1,(3)_{10}$$$\n\n$$$\\frac{9}{36} = \\frac{1}{4} = 0,01_2$$$\n\n$$$\\frac{4}{12} = \\frac{1}{3} = 0,1_3$$$",
    "examples": [
      {
        "input": "2\n6 12 10\n4 3 10",
        "output": "Finite\nInfinite"
      },
      {
        "input": "4\n1 1 2\n9 36 2\n4 12 3\n3 5 4",
        "output": "Finite\nFinite\nFinite\nInfinite"
      }
    ],
    "solution": "input()\nprint('\\n'.join(['Infinite' if p * pow(b, 99, q) % q else 'Finite' for p, q, b in map(lambda l: map(int, l.split()), __import__('sys').stdin.readlines())]))\n",
    "explanation": "First, if $$$p$$$ and $$$q$$$ are not coprime, divide them on $$$\\gcd(p,q)$$$. Fraction is finite if and only if there is integer $$$k$$$ such that $$$q \\mid p \\cdot b^k$$$. Since $$$p$$$ and $$$q$$$ are being coprime now, $$$q \\mid b^k \\Rightarrow$$$ all prime factors of $$$q$$$ are prime factors of $$$b$$$. Now we can do iterations $$$q = q \\div \\gcd(b,q)$$$ while $$$\\gcd(q,b) \\ne 1$$$. If $$$q \\ne 1$$$ after iterations, there are prime factors of $$$q$$$ which are not prime factors of $$$b \\Rightarrow$$$ fraction is Infinite, else fraction is Finite. But this solution works in $$$O(nlog^210^{18})$$$. Let's add $$$b=\\gcd(b,q)$$$ in iterations and name iterations when $$$\\gcd(b,q)$$$ changes iterations of the first type and when it doesn't change \u2014 iterations of the second type. Iterations of second type works summary in $$$O(\\log10^{18})$$$. Number of iterations of the first type is $$$O(\\log10^{18})$$$ too but on each iteration $$$b$$$ decreases twice. Note that number of iterations in Euclid's algorithm is equal to number of this decreases. So iterations of first type works in $$$O(\\log10^{18})$$$ summary. Total time complexity is $$$O(n\\log10^{18})$$$\nSolution"
  },
  {
    "id": "399/A",
    "problem": "Title: Pages\n\nUser ainta is making a web site. This time he is going to make a navigation of the pages. In his site, there are n pages numbered by integers from 1 to n. Assume that somebody is on the p-th page now. The navigation will look like this:\n\n<< p - k p - k + 1 ... p - 1 (p) p + 1 ... p + k - 1 p + k >>\n\nWhen someone clicks the button \"<<\" he is redirected to page 1, and when someone clicks the button \">>\" he is redirected to page n. Of course if someone clicks on a number, he is redirected to the corresponding page.\n\nThere are some conditions in the navigation:\n\n- If page 1 is in the navigation, the button \"<<\" must not be printed.\n- If page n is in the navigation, the button \">>\" must not be printed.\n- If the page number is smaller than 1 or greater than n, it must not be printed.\n\nYou can see some examples of the navigations. Make a program that prints the navigation.\n\nInput Format:\nThe first and the only line contains three integers n, p, k (3 \u2264 n \u2264 100; 1 \u2264 p \u2264 n; 1 \u2264 k \u2264 n)\n\nOutput Format:\nPrint the proper navigation. Follow the format of the output from the test samples.\n\nExamples:\nExample 1:\nInput:\n17 5 2\nOutput:\n<< 3 4 (5) 6 7 >>\n\nExample 2:\nInput:\n6 5 2\nOutput:\n<< 3 4 (5) 6\n\nExample 3:\nInput:\n6 1 2\nOutput:\n(1) 2 3 >>\n\nExample 4:\nInput:\n6 2 2\nOutput:\n1 (2) 3 4 >>\n\nExample 5:\nInput:\n9 6 3\nOutput:\n<< 3 4 5 (6) 7 8 9\n\nExample 6:\nInput:\n10 6 3\nOutput:\n<< 3 4 5 (6) 7 8 9 >>\n\nExample 7:\nInput:\n8 5 4\nOutput:\n1 2 3 4 (5) 6 7 8",
    "examples": [
      {
        "input": "17 5 2",
        "output": "<< 3 4 (5) 6 7 >>"
      },
      {
        "input": "6 5 2",
        "output": "<< 3 4 (5) 6"
      },
      {
        "input": "6 1 2",
        "output": "(1) 2 3 >>"
      },
      {
        "input": "6 2 2",
        "output": "1 (2) 3 4 >>"
      },
      {
        "input": "9 6 3",
        "output": "<< 3 4 5 (6) 7 8 9"
      },
      {
        "input": "10 6 3",
        "output": "<< 3 4 5 (6) 7 8 9 >>"
      },
      {
        "input": "8 5 4",
        "output": "1 2 3 4 (5) 6 7 8"
      }
    ],
    "solution": "n, p, k = map(int, input().split())\r\nstring = ''\r\nif p != 1 and p != n:\r\n    if p - k <= 1:\r\n        string += ' '.join(map(str, [i for i in range(1, p)]))\r\n        string += ' ({}) '.format(p)\r\n    else:\r\n        string += '<< '\r\n        string += ' '.join(map(str, [i for i in range(p - k, p)]))\r\n        string += ' ({}) '.format(p)\r\n    if p + k >= n:\r\n        string += ' '.join(map(str, [i for i in range(p + 1, n + 1)]))\r\n    else:\r\n        string += ' '.join(map(str, [i for i in range(p + 1, p + k + 1)]))\r\n        string += ' >>'\r\nelif p == 1:\r\n    string += '(1) '\r\n    if p + k >= n:\r\n        string += ' '.join(map(str, [i for i in range(p + 1, n + 1)]))\r\n    else:\r\n        string += ' '.join(map(str, [i for i in range(p + 1, p + k + 1)]))\r\n        string += ' >>'\r\nelse:\r\n    if p - k <= 1:\r\n        string += ' '.join(map(str, [i for i in range(1, p)]))\r\n    else:\r\n        string += '<< '\r\n        string += ' '.join(map(str, [i for i in range(p - k, p)]))\r\n    string += ' ({})'.format(n)\r\nprint(string)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "51/A",
    "problem": "Title: Cheaterius's Problem\n\nCheaterius is a famous in all the Berland astrologist, magician and wizard, and he also is a liar and a cheater. One of his latest inventions is Cheaterius' amulets! They bring luck and wealth, but are rather expensive. Cheaterius makes them himself. The technology of their making is kept secret. But we know that throughout long nights Cheaterius glues together domino pairs with super glue to get squares 2 \u00d7 2 which are the Cheaterius' magic amulets!\n\nThat's what one of Cheaterius's amulets looks like\n\nAfter a hard night Cheaterius made n amulets. Everyone of them represents a square 2 \u00d7 2, every quarter contains 1 to 6 dots. Now he wants sort them into piles, every pile must contain similar amulets. Two amulets are called similar if they can be rotated by 90, 180 or 270 degrees so that the following condition is met: the numbers of dots in the corresponding quarters should be the same. It is forbidden to turn over the amulets.\n\nWrite a program that by the given amulets will find the number of piles on Cheaterius' desk.\n\nInput Format:\nThe first line contains an integer n (1 \u2264 n \u2264 1000), where n is the number of amulets. Then the amulet's descriptions are contained. Every description occupies two lines and contains two numbers (from 1 to 6) in each line. Between every pair of amulets the line \"**\" is located.\n\nOutput Format:\nPrint the required number of piles.\n\nExamples:\nExample 1:\nInput:\n4\n31\n23\n**\n31\n23\n**\n13\n32\n**\n32\n13\nOutput:\n1\n\nExample 2:\nInput:\n4\n51\n26\n**\n54\n35\n**\n25\n61\n**\n45\n53\nOutput:\n2",
    "examples": [
      {
        "input": "4\n31\n23\n**\n31\n23\n**\n13\n32\n**\n32\n13",
        "output": "1"
      },
      {
        "input": "4\n51\n26\n**\n54\n35\n**\n25\n61\n**\n45\n53",
        "output": "2"
      }
    ],
    "solution": "def contains(cont: list, temp: str) -> bool:\r\n    for i in range(4):\r\n        if temp in cont:\r\n            return True\r\n        temp = f'{temp[2]}{temp[0]}{temp[3]}{temp[1]}'\r\n    return False\r\n\r\n\r\nn = int(input())\r\ncont = []\r\nfor i in range(n):\r\n    temp = input() + input()\r\n    if not contains(cont, temp):\r\n        cont.append(temp)\r\n    if i < n - 1:\r\n        input()\r\n\r\nprint(len(cont))\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "5/A",
    "problem": "Title: Chat Server's Outgoing Traffic\n\nPolycarp is working on a new project called \"Polychat\". Following modern tendencies in IT, he decided, that this project should contain chat as well. To achieve this goal, Polycarp has spent several hours in front of his laptop and implemented a chat server that can process three types of commands:\n\n- Include a person to the chat ('Add' command).\n- Remove a person from the chat ('Remove' command).\n- Send a message from a person to all people, who are currently in the chat, including the one, who sends the message ('Send' command).\n\nNow Polycarp wants to find out the amount of outgoing traffic that the server will produce while processing a particular set of commands.\n\nPolycarp knows that chat server sends no traffic for 'Add' and 'Remove' commands. When 'Send' command is processed, server sends l bytes to each participant of the chat, where l is the length of the message.\n\nAs Polycarp has no time, he is asking for your help in solving this problem.\n\nInput Format:\nInput file will contain not more than 100 commands, each in its own line. No line will exceed 100 characters. Formats of the commands will be the following:\n\n- +<name> for 'Add' command.\n- -<name> for 'Remove' command.\n- <sender_name>:<message_text> for 'Send' command.\n\n<name> and <sender_name> is a non-empty sequence of Latin letters and digits. <message_text> can contain letters, digits and spaces, but can't start or end with a space. <message_text> can be an empty line.\n\nIt is guaranteed, that input data are correct, i.e. there will be no 'Add' command if person with such a name is already in the chat, there will be no 'Remove' command if there is no person with such a name in the chat etc.\n\nAll names are case-sensitive.\n\nOutput Format:\nPrint a single number \u2014 answer to the problem.\n\nExamples:\nExample 1:\nInput:\n+Mike\nMike:hello\n+Kate\n+Dmitry\n-Dmitry\nKate:hi\n-Kate\nOutput:\n9\n\nExample 2:\nInput:\n+Mike\n-Mike\n+Mike\nMike:Hi   I am here\n-Mike\n+Kate\n-Kate\nOutput:\n14",
    "examples": [
      {
        "input": "+Mike\nMike:hello\n+Kate\n+Dmitry\n-Dmitry\nKate:hi\n-Kate",
        "output": "9"
      },
      {
        "input": "+Mike\n-Mike\n+Mike\nMike:Hi   I am here\n-Mike\n+Kate\n-Kate",
        "output": "14"
      }
    ],
    "solution": "import sys\nnames = set()\nresult = 0\n\nlines = sys.stdin.readlines()\n\nfor s in lines:\n    s = s.strip()\n    if '+' in s:\n        names.add(s[1:])\n        continue\n    if '-' in s:\n        names.remove(s[1:])\n        continue\n    name, messsage = s.split(':')\n    result += len(names) * len(messsage)\n\nprint(result)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "192/A",
    "problem": "Title: Funky Numbers\n\nAs you very well know, this year's funkiest numbers are so called triangular numbers (that is, integers that are representable as $$\\frac{k(k+1)}{2}$$, where k is some positive integer), and the coolest numbers are those that are representable as a sum of two triangular numbers.\n\nA well-known hipster Andrew adores everything funky and cool but unfortunately, he isn't good at maths. Given number n, help him define whether this number can be represented by a sum of two triangular numbers (not necessarily different)!\n\nInput Format:\nThe first input line contains an integer n (1 \u2264 n \u2264 109).\n\nOutput Format:\nPrint \"YES\" (without the quotes), if n can be represented as a sum of two triangular numbers, otherwise print \"NO\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n256\nOutput:\nYES\n\nExample 2:\nInput:\n512\nOutput:\nNO\n\nNote:\nIn the first sample number $$256 = \\frac{2\\cdot3}{2} + \\frac{22\\cdot23}{2}$$.\n\nIn the second sample number 512 can not be represented as a sum of two triangular numbers.",
    "examples": [
      {
        "input": "256",
        "output": "YES"
      },
      {
        "input": "512",
        "output": "NO"
      }
    ],
    "solution": "n = int(input())\nneeded = set()\ni = 1\nt = 1\nfailed = True\n\nwhile t <= n :\n    t = (i * (i + 1)) / 2\n    if (t in needed) or t + t == n: \n        print(\"YES\")\n        failed = False\n        break\n    else: \n        needed.add(n - t)\n\n    i += 1\n\nif (failed) : print(\"NO\")\n\n\n \t\t\t\t\t  \t \t\t\t   \t  \t \t\t \t \t\t\t \t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1011/A",
    "problem": "Title: Stages\n\nNatasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string\u00a0\u2014 concatenation of letters, which correspond to the stages.\n\nThere are $$$n$$$ stages available. The rocket must contain exactly $$$k$$$ of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f', ..., 'z'.\n\nFor the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z'\u00a0\u2014 $$$26$$$ tons.\n\nBuild the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.\n\nInput Format:\nThe first line of input contains two integers\u00a0\u2014 $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 50$$$)\u00a0\u2013 the number of available stages and the number of stages to use in the rocket.\n\nThe second line contains string $$$s$$$, which consists of exactly $$$n$$$ lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.\n\nOutput Format:\nPrint a single integer\u00a0\u2014 the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.\n\nExamples:\nExample 1:\nInput:\n5 3\nxyabd\nOutput:\n29\n\nExample 2:\nInput:\n7 4\nproblem\nOutput:\n34\n\nExample 3:\nInput:\n2 2\nab\nOutput:\n-1\n\nExample 4:\nInput:\n12 1\nabaabbaaabbb\nOutput:\n1\n\nNote:\nIn the first example, the following rockets satisfy the condition:\n\n- \"adx\" (weight is $$$1+4+24=29$$$);\n- \"ady\" (weight is $$$1+4+25=30$$$);\n- \"bdx\" (weight is $$$2+4+24=30$$$);\n- \"bdy\" (weight is $$$2+4+25=31$$$).\n\nRocket \"adx\" has the minimal weight, so the answer is $$$29$$$.\n\nIn the second example, target rocket is \"belo\". Its weight is $$$2+5+12+15=34$$$.\n\nIn the third example, $$$n=k=2$$$, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.",
    "examples": [
      {
        "input": "5 3\nxyabd",
        "output": "29"
      },
      {
        "input": "7 4\nproblem",
        "output": "34"
      },
      {
        "input": "2 2\nab",
        "output": "-1"
      },
      {
        "input": "12 1\nabaabbaaabbb",
        "output": "1"
      }
    ],
    "solution": "n,k=map(int,input().split())\r\na=list(input())\r\na.sort()\r\nx=1\r\nt=ord(a[0])-96\r\ns=a[0]\r\nfor i in range(1,n):\r\n    if x==k:\r\n        break\r\n    if ord(a[i])-ord(s)>=2:\r\n        s=a[i]\r\n        t+=ord(a[i])-96\r\n        x+=1\r\nif x<k:\r\n    print(-1)\r\nelse:\r\n    print(t)\r\n    \r\n    \r\n    ",
    "explanation": "The problem can be solved by the following greedy algorithm.\nSort letters in increasing order. Let's try to add letters in this order. If the current letter is the first in the string, then add it to the answer. Otherwise, check: if the current letter is at least two positions later in the alphabet than the previous letter of the answer, add it to the response, otherwise go over to the next letter.\nAs soon as there are $$$k$$$ letters in the answer, print it. If after this algorithm the answer has less than $$$k$$$ letters, print -1.\nComplexity: $$$O(n\\log n)$$$."
  },
  {
    "id": "669/A",
    "problem": "Title: Little Artem and Presents\n\nLittle Artem got n stones on his birthday and now wants to give some of them to Masha. He knows that Masha cares more about the fact of receiving the present, rather than the value of that present, so he wants to give her stones as many times as possible. However, Masha remembers the last present she received, so Artem can't give her the same number of stones twice in a row. For example, he can give her 3 stones, then 1 stone, then again 3 stones, but he can't give her 3 stones and then again 3 stones right after that.\n\nHow many times can Artem give presents to Masha?\n\nInput Format:\nThe only line of the input contains a single integer n (1 \u2264 n \u2264 109)\u00a0\u2014 number of stones Artem received on his birthday.\n\nOutput Format:\nPrint the maximum possible number of times Artem can give presents to Masha.\n\nExamples:\nExample 1:\nInput:\n1\nOutput:\n1\n\nExample 2:\nInput:\n2\nOutput:\n1\n\nExample 3:\nInput:\n3\nOutput:\n2\n\nExample 4:\nInput:\n4\nOutput:\n3\n\nNote:\nIn the first sample, Artem can only give 1 stone to Masha.\n\nIn the second sample, Atrem can give Masha 1 or 2 stones, though he can't give her 1 stone two times.\n\nIn the third sample, Atrem can first give Masha 2 stones, a then 1 more stone.\n\nIn the fourth sample, Atrem can first give Masha 1 stone, then 2 stones, and finally 1 stone again.",
    "examples": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "2",
        "output": "1"
      },
      {
        "input": "3",
        "output": "2"
      },
      {
        "input": "4",
        "output": "3"
      }
    ],
    "solution": "def solve(n):\n  if n == 1:\n    return 1\n  return n-round(n/3)\n  \ndef main():\n  n =int(input())\n  print(solve(n))\n\nmain()",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "902/A",
    "problem": "Title: Visiting a Friend\n\nPig is visiting a friend.\n\nPig's house is located at point 0, and his friend's house is located at point m on an axis.\n\nPig can use teleports to move along the axis.\n\nTo use a teleport, Pig should come to a certain point (where the teleport is located) and choose where to move: for each teleport there is the rightmost point it can move Pig to, this point is known as the limit of the teleport.\n\nFormally, a teleport located at point x with limit y can move Pig from point x to any point within the segment [x; y], including the bounds.\n\nDetermine if Pig can visit the friend using teleports only, or he should use his car.\n\nInput Format:\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 100)\u00a0\u2014 the number of teleports and the location of the friend's house.\n\nThe next n lines contain information about teleports.\n\nThe i-th of these lines contains two integers ai and bi (0 \u2264 ai \u2264 bi \u2264 m), where ai is the location of the i-th teleport, and bi is its limit.\n\nIt is guaranteed that ai \u2265 ai - 1 for every i (2 \u2264 i \u2264 n).\n\nOutput Format:\nPrint \"YES\" if there is a path from Pig's house to his friend's house that uses only teleports, and \"NO\" otherwise.\n\nYou can print each letter in arbitrary case (upper or lower).\n\nExamples:\nExample 1:\nInput:\n3 5\n0 2\n2 4\n3 5\nOutput:\nYES\n\nExample 2:\nInput:\n3 7\n0 4\n2 5\n6 7\nOutput:\nNO\n\nNote:\nThe first example is shown on the picture below:\n\nPig can use the first teleport from his house (point 0) to reach point 2, then using the second teleport go from point 2 to point 3, then using the third teleport go from point 3 to point 5, where his friend lives.\n\nThe second example is shown on the picture below:\n\nYou can see that there is no path from Pig's house to his friend's house that uses only teleports.",
    "examples": [
      {
        "input": "3 5\n0 2\n2 4\n3 5",
        "output": "YES"
      },
      {
        "input": "3 7\n0 4\n2 5\n6 7",
        "output": "NO"
      }
    ],
    "solution": "nums = [int(x) for x in input().split()]\r\nn , m = nums[0] , nums[1]\r\n\r\nmaxb = 0\r\nfor i in range(n):\r\n    nums = [int(x) for x in input().split()]\r\n    if nums[0] > maxb:\r\n        break\r\n    if nums[1] > maxb:\r\n        maxb = nums[1]\r\nif maxb >= m:\r\n    print('YES')\r\nelse:\r\n    print('NO')",
    "explanation": "Note that if we can get to some point x, then we can get to all points <= x. So we can support the rightmost point where we can get to. Then if this point can use the teleport (if this point is to the right of the teleport), we'll try to move it (If the limit of the teleport is to the right of the current point, then move it there). Then in the end we need to check that the rightmost point where we can get is equal to M."
  },
  {
    "id": "18/A",
    "problem": "Title: Triangle\n\nAt a geometry lesson Bob learnt that a triangle is called right-angled if it is nondegenerate and one of its angles is right. Bob decided to draw such a triangle immediately: on a sheet of paper he drew three points with integer coordinates, and joined them with segments of straight lines, then he showed the triangle to Peter. Peter said that Bob's triangle is not right-angled, but is almost right-angled: the triangle itself is not right-angled, but it is possible to move one of the points exactly by distance 1 so, that all the coordinates remain integer, and the triangle become right-angled. Bob asks you to help him and find out if Peter tricks him. By the given coordinates of the triangle you should find out if it is right-angled, almost right-angled, or neither of these.\n\nInput Format:\nThe first input line contains 6 space-separated integers x1, y1, x2, y2, x3, y3 \u2014 coordinates of the triangle's vertices. All the coordinates are integer and don't exceed 100 in absolute value. It's guaranteed that the triangle is nondegenerate, i.e. its total area is not zero.\n\nOutput Format:\nIf the given triangle is right-angled, output RIGHT, if it is almost right-angled, output ALMOST, and if it is neither of these, output NEITHER.\n\nExamples:\nExample 1:\nInput:\n0 0 2 0 0 1\nOutput:\nRIGHT\n\nExample 2:\nInput:\n2 3 4 5 6 6\nOutput:\nNEITHER\n\nExample 3:\nInput:\n-1 0 2 0 0 1\nOutput:\nALMOST",
    "examples": [
      {
        "input": "0 0 2 0 0 1",
        "output": "RIGHT"
      },
      {
        "input": "2 3 4 5 6 6",
        "output": "NEITHER"
      },
      {
        "input": "-1 0 2 0 0 1",
        "output": "ALMOST"
      }
    ],
    "solution": "class point:\n\tdef __init__(self, x=0, y=0):\n\t\tself.x = x\n\t\tself.y = y\n\tdef trans(self, d):\n\t\treturn point(self.x + d[0], self.y + d[1])\ndef cross(a, b, c): return (a.x-c.x) * (b.y-c.y) - (a.y-c.y) * (b.x-c.x)\ndef dot(a, b, c): return (a.x-c.x) * (b.x-c.x) + (a.y-c.y) * (b.y-c.y)\ndef isRight(a, b, c):\n\tif cross(a, b, c) == 0: return False\n\treturn dot(a, b, c) == 0 or dot(a, c, b) == 0 or dot(b, c, a) == 0\nd = ((0, 1), (0, -1), (1, 0), (-1, 0))\ndef solve(a, b, c):\n\tif isRight(a, b, c): return 'RIGHT'\n\tfor i in d:\n\t\tif isRight(a.trans(i), b, c): return 'ALMOST'\n\tfor i in d:\n\t\tif isRight(a, b.trans(i), c): return 'ALMOST'\n\tfor i in d:\n\t\tif isRight(a, b, c.trans(i)): return 'ALMOST'\n\treturn 'NEITHER'\n\nx1, y1, x2, y2, x3, y3 = map(int, input().split())\nprint(solve(point(x1, y1), point(x2, y2), point(x3, y3)))\n\t\t\t\t   \t  \t\t \t\t\t  \t     \t\t\t\t \t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "180/A",
    "problem": "Title: Defragmentation\n\nIn this problem you have to implement an algorithm to defragment your hard disk. The hard disk consists of a sequence of clusters, numbered by integers from 1 to n. The disk has m recorded files, the i-th file occupies clusters with numbers ai, 1, ai, 2, ..., ai, ni. These clusters are not necessarily located consecutively on the disk, but the order in which they are given corresponds to their sequence in the file (cluster ai, 1 contains the first fragment of the i-th file, cluster ai, 2 has the second fragment, etc.). Also the disc must have one or several clusters which are free from files.\n\nYou are permitted to perform operations of copying the contents of cluster number i to cluster number j (i and j must be different). Moreover, if the cluster number j used to keep some information, it is lost forever. Clusters are not cleaned, but after the defragmentation is complete, some of them are simply declared unusable (although they may possibly still contain some fragments of files).\n\nYour task is to use a sequence of copy operations to ensure that each file occupies a contiguous area of memory. Each file should occupy a consecutive cluster section, the files must follow one after another from the beginning of the hard disk. After defragmentation all free (unused) clusters should be at the end of the hard disk. After defragmenting files can be placed in an arbitrary order. Clusters of each file should go consecutively from first to last. See explanatory examples in the notes.\n\nPrint the sequence of operations leading to the disk defragmentation. Note that you do not have to minimize the number of operations, but it should not exceed 2n.\n\nInput Format:\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 200) \u2014 the number of clusters and the number of files, correspondingly. Next m lines contain descriptions of the files. The first number in the line is ni (ni \u2265 1), the number of clusters occupied by the i-th file. Then follow ni numbers ai, 1, ai, 2, ..., ai, ni (1 \u2264 ai, j \u2264 n). It is guaranteed that each cluster number occurs not more than once and $$\\sum_{i=1}^{m} n_i < n$$, that is, there exists at least one unused cluster. Numbers on each line are separated by spaces.\n\nOutput Format:\nIn the first line print a single integer k (0 \u2264 k \u2264 2n) \u2014 the number of operations needed to defragment the disk. Next k lines should contain the operations' descriptions as \"i j\" (copy the contents of the cluster number i to the cluster number j).\n\nExamples:\nExample 1:\nInput:\n7 2\n2 1 2\n3 3 4 5\nOutput:\n0\n\nExample 2:\nInput:\n7 2\n2 1 3\n3 2 4 5\nOutput:\n3\n2 6\n3 2\n6 3\n\nNote:\nLet's say that a disk consists of 8 clusters and contains two files. The first file occupies two clusters and the second file occupies three clusters. Let's look at examples of correct and incorrect positions of files after defragmentation.\n\n$$$$\n\nExample 2: each file must occupy a contiguous area of memory.\n\nExample 3: the order of files to each other is not important, at first the second file can be written, and then \u2014 the first one.\n\nExample 4: violating the order of file fragments to each other is not allowed.\n\nExample 5: unused clusters should be located at the end, and in this example the unused clusters are 3, 7, 8.",
    "examples": [
      {
        "input": "7 2\n2 1 2\n3 3 4 5",
        "output": "0"
      },
      {
        "input": "7 2\n2 1 3\n3 2 4 5",
        "output": "3\n2 6\n3 2\n6 3"
      }
    ],
    "solution": "import sys\r\nn, m, *inp = map(int, sys.stdin.read().split())\r\n\r\ninp.reverse()\r\nf = [[0 for x in range(201)] for y in range(201)]     #2D Array\r\nc = [(0,0)]*201\r\nf_size = [0]*201\r\n\r\ndef putData(f_id, s_id, c_id):\r\n    global f, c\r\n    f[f_id][s_id] = c_id\r\n    c[c_id] = (f_id, s_id)\r\n\r\nfor f_id in range(1, m+1):\r\n    f_size[f_id] = inp.pop()\r\n    for s_id in range(1, f_size[f_id]+1):\r\n        c_id = inp.pop()\r\n        putData(f_id, s_id, c_id)\r\n\r\ne_id = c[1:].index((0,0))+1\r\nnext_id = 1\r\nop = []\r\n\r\nfor f_id in range(1, m+1):\r\n    for s_id in range(1, f_size[f_id]+1):\r\n        if c[next_id]==(f_id, s_id):\r\n            next_id += 1\r\n            continue\r\n        if c[next_id] != (0, 0):\r\n            op.append((next_id, e_id))\r\n            putData(c[next_id][0], c[next_id][1], e_id)\r\n        e_id = f[f_id][s_id]\r\n        c[e_id] = (0,0)\r\n        op.append((e_id, next_id))\r\n        putData(f_id, s_id, next_id)\r\n        next_id += 1\r\n\r\nprint(len(op))\r\nfor p in op:\r\n    print(\"%d %d\" % p)\r\n\r\n",
    "explanation": "No editorial explanation available."
  }
]