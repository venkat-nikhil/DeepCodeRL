[
  {
    "id": "766/B",
    "problem": "Title: Mahmoud and a Triangle\n\nMahmoud has n line segments, the i-th of them has length ai. Ehab challenged him to use exactly 3 line segments to form a non-degenerate triangle. Mahmoud doesn't accept challenges unless he is sure he can win, so he asked you to tell him if he should accept the challenge. Given the lengths of the line segments, check if he can choose exactly 3 of them to form a non-degenerate triangle.\n\nMahmoud should use exactly 3 line segments, he can't concatenate two line segments or change any length. A non-degenerate triangle is a triangle with positive area.\n\nInput Format:\nThe first line contains single integer n (3 ≤ n ≤ 105) — the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the lengths of line segments Mahmoud has.\n\nOutput Format:\nIn the only line print \"YES\" if he can choose exactly three line segments and form a non-degenerate triangle with them, and \"NO\" otherwise.\n\nExamples:\nExample 1:\nInput:\n5\n1 5 3 2 4\nOutput:\nYES\n\nExample 2:\nInput:\n3\n4 1 2\nOutput:\nNO\n\nNote:\nFor the first example, he can use line segments with lengths 2, 4 and 5 to form a non-degenerate triangle.",
    "examples": [
      {
        "input": "5\n1 5 3 2 4",
        "output": "YES"
      },
      {
        "input": "3\n4 1 2",
        "output": "NO"
      }
    ],
    "solution": "n=int(input())\r\nl=sorted(list(map(int,input().split())))\r\nfor i in range(0,len(l)-2):\r\n    if l[i]+l[i+1]>l[i+2]:\r\n        print(\"YES\")\r\n        exit()\r\nelse:\r\n    print(\"NO\")",
    "explanation": "#### First solution :- Let x, y and z be the lengths of 3 line segments such that x ≤ y ≤ z, If they can't form a non-degenerate triangle, Line segments of lengths x - 1, y and z or x, y and z + 1 can't form a non-degenerate triangle, So we don't need to try all the combinations, If we try y as the middle one, We need to try the maximum x that is less than or equal to y and the minimum z that is greater than or equal to y, The easiest way to do so is to sort the line segments and try every consecutive 3.\nCode : http://pastebin.com/NsCkbQFS\nTime complexity : O(nlog(n)).\n#### Second solution :- Depending on the note from the first solution, If we try to generate a sequence such that after sorting, Every consecutive 3 line segments will form a degenerate triangle, It will be 1 1 2 3 5 8 13 ... which is Fibonacci sequence, Fibonacci is a fast growing sequence, fib(45) = 1134903170, Notice that Fibonacci makes maximum n with \"NO\" as the answer, That means the answer is indeed \"YES\" for n ≥ 45, For n < 45, You can do the naive O(n3) solution or the first solution.\nCode : http://pastebin.com/82XcJfgp\nLet x be the number that satisfies these inequalities:-\nfib(x) ≤ maxAi.\nfib(x + 1) > maxAi.\nTime complexity : O(x3) or O(xlog(x)).\nProblem author : me.\nSolutions author : me.\nTesters : me and [user:mahmoudbadawy,2017-02-03]."
  },
  {
    "id": "508/B",
    "problem": "Title: Anton and currency you all know\n\nBerland, 2016. The exchange rate of currency you all know against the burle has increased so much that to simplify the calculations, its fractional part was neglected and the exchange rate is now assumed to be an integer.\n\nReliable sources have informed the financier Anton of some information about the exchange rate of currency you all know against the burle for tomorrow. Now Anton knows that tomorrow the exchange rate will be an even number, which can be obtained from the present rate by swapping exactly two distinct digits in it. Of all the possible values that meet these conditions, the exchange rate for tomorrow will be the maximum possible. It is guaranteed that today the exchange rate is an odd positive integer n. Help Anton to determine the exchange rate of currency you all know for tomorrow!\n\nInput Format:\nThe first line contains an odd positive integer n — the exchange rate of currency you all know for today. The length of number n's representation is within range from 2 to 105, inclusive. The representation of n doesn't contain any leading zeroes.\n\nOutput Format:\nIf the information about tomorrow's exchange rate is inconsistent, that is, there is no integer that meets the condition, print  - 1.\n\nOtherwise, print the exchange rate of currency you all know against the burle for tomorrow. This should be the maximum possible number of those that are even and that are obtained from today's exchange rate by swapping exactly two digits. Exchange rate representation should not contain leading zeroes.\n\nExamples:\nExample 1:\nInput:\n527\nOutput:\n572\n\nExample 2:\nInput:\n4573\nOutput:\n3574\n\nExample 3:\nInput:\n1357997531\nOutput:\n-1",
    "examples": [
      {
        "input": "527",
        "output": "572"
      },
      {
        "input": "4573",
        "output": "3574"
      },
      {
        "input": "1357997531",
        "output": "-1"
      }
    ],
    "solution": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\ndef solution():\n    num = list(input())\n    # to days is odd\n    # so change the last one with even number\n    \n    # can't be equal\n    # if am less than than definitly pass\n\n    # if no I better be the last one\n        # for that start from the back\n\n    # if no all make it the negative one\n    for i in range(len(num)-1):\n        if int(num[i]) % 2 == 0 and num[i] < num[-1]:\n            num[i],num[-1] = num[-1],num[i]\n            return print(\"\".join(num))\n\n    for i in range(len(num)-1)[::-1]:\n        if int(num[i]) % 2 == 0:\n            num[i],num[-1] = num[-1],num[i]\n            return print(\"\".join(num))\n    print(-1)\n\n\n\n\n\n\n\n    \n\n            \n         \n    \n    \ndef main():\n    t = 1\n    #t = int(input())\n    for _ in range(t):\n        solution()\n    \n#import sys\n#import threading\n#sys.setrecursionlimit(1 << 30)\n#threading.stack_size(1 << 27)\n#thread = threading.Thread(target=main)\n#thread.start(); thread.join()\nmain()\n\n\n\n\n\"\"\"\n    num = int(input())\n    arr = list(map(int, input().split()))\n    a,b = map(int, input().split())\n    graph = defaultdict(list)\n    for i in range(#)\n        graph[a].append(b)\n        graph[b].append(a)\n    MOD = 10**9 + 7\n\nfor di,dj in [(0,1),(1,0),(0,-1),(-1,0)]:\n    ni = i + di\n    nj = j + dj\n    if not (0<= ni < len(grid) and 0<= nj < len(grid[0])):\n        continue\n\ndef gcd(a,b):\n    if a < b: a,b = b,a\n    if b == 0: return a\n    return gcd(a%b,b)\n\"\"\"\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "114/B",
    "problem": "Title: PFAST Inc.\n\nWhen little Petya grew up and entered the university, he started to take part in АСМ contests. Later he realized that he doesn't like how the АСМ contests are organised: the team could only have three members (and he couldn't take all his friends to the competitions and distribute the tasks between the team members efficiently), so he decided to organize his own contests PFAST Inc. — Petr and Friends Are Solving Tasks Corporation. PFAST Inc. rules allow a team to have unlimited number of members.\n\nTo make this format of contests popular he organised his own tournament. To create the team he will prepare for the contest organised by the PFAST Inc. rules, he chose several volunteers (up to 16 people) and decided to compile a team from them. Petya understands perfectly that if a team has two people that don't get on well, then the team will perform poorly. Put together a team with as many players as possible given that all players should get on well with each other.\n\nInput Format:\nThe first line contains two integer numbers n (1 ≤ n ≤ 16) — the number of volunteers, and m ($$0 \\leq m \\leq \\frac{n(n-1)}{2}$$) — the number of pairs that do not get on. Next n lines contain the volunteers' names (each name is a non-empty string consisting of no more than 10 uppercase and/or lowercase Latin letters). Next m lines contain two names — the names of the volunteers who do not get on. The names in pair are separated with a single space. Each pair of volunteers who do not get on occurs exactly once. The strings are case-sensitive. All n names are distinct.\n\nOutput Format:\nThe first output line should contain the single number k — the number of people in the sought team. Next k lines should contain the names of the sought team's participants in the lexicographical order. If there are several variants to solve the problem, print any of them. Petya might not be a member of the sought team.\n\nExamples:\nExample 1:\nInput:\n3 1\nPetya\nVasya\nMasha\nPetya Vasya\nOutput:\n2\nMasha\nPetya\n\nExample 2:\nInput:\n3 0\nPasha\nLesha\nVanya\nOutput:\n3\nLesha\nPasha\nVanya",
    "examples": [
      {
        "input": "3 1\nPetya\nVasya\nMasha\nPetya Vasya",
        "output": "2\nMasha\nPetya"
      },
      {
        "input": "3 0\nPasha\nLesha\nVanya",
        "output": "3\nLesha\nPasha\nVanya"
      }
    ],
    "solution": "# LUOGU_RID: 91401901\nimport copy\r\n\r\n\r\ndef insert(a, b):\r\n    try:\r\n        g[a][b] = 1\r\n    except:\r\n        g[a] = {b: 1}\r\n\r\n\r\nglobal ans\r\ng = {}\r\n\r\n\r\ndef dfs(i, n, dv):\r\n    if i == n:\r\n        return copy.deepcopy(dv)\r\n    flag = True\r\n    for b in dv:\r\n        try:\r\n            if g[v[i]][b] == 1:\r\n                flag = False\r\n        except:\r\n            pass\r\n    v1 = []\r\n    if flag:\r\n        v1 = dfs(i + 1, n, dv + [v[i]])\r\n    v2 = dfs(i + 1, n, dv)\r\n    return v1 if len(v1) > len(v2) else v2\r\n\r\n\r\nn, m = map(int, input().split())\r\nv = [input() for i in range(n)]\r\nv.sort()\r\nfor j in range(m):\r\n    a, b = map(str, input().split())\r\n    insert(a, b)\r\n    insert(b, a)\r\n\r\nans = dfs(0, n, [])\r\nprint(len(ans))\r\nfor s in ans:\r\n    print(s)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "611/B",
    "problem": "Title: New Year and Old Property\n\nThe year 2015 is almost over.\n\nLimak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 201510 = 111110111112. Note that he doesn't care about the number of zeros in the decimal representation.\n\nLimak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?\n\nAssume that all positive integers are always written without leading zeros.\n\nInput Format:\nThe only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 1018) — the first year and the last year in Limak's interval respectively.\n\nOutput Format:\nPrint one integer – the number of years Limak will count in his chosen interval.\n\nExamples:\nExample 1:\nInput:\n5 10\nOutput:\n2\n\nExample 2:\nInput:\n2015 2015\nOutput:\n1\n\nExample 3:\nInput:\n100 105\nOutput:\n0\n\nExample 4:\nInput:\n72057594000000000 72057595000000000\nOutput:\n26\n\nNote:\nIn the first sample Limak's interval contains numbers 510 = 1012, 610 = 1102, 710 = 1112, 810 = 10002, 910 = 10012 and 1010 = 10102. Two of them (1012 and 1102) have the described property.",
    "examples": [
      {
        "input": "5 10",
        "output": "2"
      },
      {
        "input": "2015 2015",
        "output": "1"
      },
      {
        "input": "100 105",
        "output": "0"
      },
      {
        "input": "72057594000000000 72057595000000000",
        "output": "26"
      }
    ],
    "solution": "n, m = map(int,input().split())\r\na = len(bin(n))-2\r\nb = len(bin(m))-2\r\ncount = 0\r\nfor i in range(a, b+1):\r\n  for j in range(i-1):\r\n    if n <= 2**i-1-2**j <= m:\r\n      count+=1\r\n\r\nprint(count)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "275/B",
    "problem": "Title: Convex Shape\n\nConsider an n × m grid. Initially all the cells of the grid are colored white. Lenny has painted some of the cells (at least one) black. We call a painted grid convex if one can walk from any black cell to any another black cell using a path of side-adjacent black cells changing his direction at most once during the path. In the figure below, the left grid is convex while the right one is not convex, because there exist two cells which need more than one time to change direction in their path.\n\nYou're given a painted grid in the input. Tell Lenny if the grid is convex or not.\n\nInput Format:\nThe first line of the input contains two integers n and m (1 ≤ n, m ≤ 50) — the size of the grid. Each of the next n lines contains m characters \"B\" or \"W\". Character \"B\" denotes a black cell of the grid and \"W\" denotes a white cell of the grid.\n\nIt's guaranteed that the grid has at least one black cell.\n\nOutput Format:\nOn the only line of the output print \"YES\" if the grid is convex, otherwise print \"NO\". Do not print quotes.\n\nExamples:\nExample 1:\nInput:\n3 4\nWWBW\nBWWW\nWWWB\nOutput:\nNO\n\nExample 2:\nInput:\n3 1\nB\nB\nW\nOutput:\nYES",
    "examples": [
      {
        "input": "3 4\nWWBW\nBWWW\nWWWB",
        "output": "NO"
      },
      {
        "input": "3 1\nB\nB\nW",
        "output": "YES"
      }
    ],
    "solution": "import sys\r\n#import threading\r\n#sys.setrecursionlimit(10**8)\r\n#threading.stack_size(10**8)\r\ninput = sys.stdin.readline\r\n\r\n############ ---- Input Functions ---- ############\r\ndef inp():\r\n    return(int(input()))\r\ndef inlt():\r\n    return(list(map(int,input().split())))\r\ndef insr():\r\n    s = input()\r\n    return(list(s[:len(s) - 1]))\r\ndef invr():\r\n    return(map(int,input().split()))\r\n############ ---- Input Functions ---- ############\r\n\r\ndef Convex_Shape2():\r\n    n,m = invr()\r\n\r\n    full_matrix = []\r\n    row_pos = []\r\n    col_pos = [] \r\n\r\n    for row_index in range(n):\r\n        row = insr()\r\n        full_matrix.append(row)\r\n\r\n        black_started = False \r\n        black_ended = False \r\n\r\n        for col_index in range(m):\r\n            if row[col_index] == 'B':\r\n                row_pos.append(row_index)\r\n                col_pos.append(col_index)\r\n\r\n                if not black_started:\r\n                    black_started = True\r\n\r\n                elif black_started and black_ended:\r\n                    print(\"NO\")\r\n                    return \r\n\r\n            elif row[col_index] == 'W' and black_started:\r\n                black_ended = True  \r\n    \r\n    for col_index in range(m):\r\n\r\n        black_started = False \r\n        black_ended = False \r\n\r\n        for row_index in range(n): \r\n\r\n            if full_matrix[row_index][col_index] == 'B':\r\n                if not black_started:\r\n                    black_started = True \r\n                elif black_started and black_ended:\r\n                    print(\"NO\")\r\n                    return \r\n            \r\n            elif full_matrix[row_index][col_index] == 'W' and black_started:\r\n                black_ended = True \r\n    \r\n    num_black_squares = len(row_pos)\r\n\r\n    for black_squre_index in range(num_black_squares):\r\n        for next_index in range(black_squre_index+1,num_black_squares):\r\n            row_inital = row_pos[black_squre_index]\r\n            row_target = row_pos[next_index]\r\n            col_initial = col_pos[black_squre_index]\r\n            col_target = col_pos[next_index]\r\n\r\n            if full_matrix[row_inital][col_target] != 'B' and full_matrix[row_target][col_initial] != 'B':\r\n                print(\"NO\")\r\n                return \r\n    \r\n    print(\"YES\")\r\n    return \r\n\r\nConvex_Shape2()",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "864/B",
    "problem": "Title: Polycarp and Letters\n\nPolycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.\n\nLet A be a set of positions in the string. Let's call it pretty if following conditions are met:\n\n- letters on positions from A in the string are all distinct and lowercase;\n- there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a1 < j < a2 for some a1 and a2 from A).\n\nWrite a program that will determine the maximum number of elements in a pretty set of positions.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.\n\nThe second line contains a string s consisting of lowercase and uppercase Latin letters.\n\nOutput Format:\nPrint maximum number of elements in pretty set of positions for string s.\n\nExamples:\nExample 1:\nInput:\n11\naaaaBaabAbA\nOutput:\n2\n\nExample 2:\nInput:\n12\nzACaAbbaazzC\nOutput:\n3\n\nExample 3:\nInput:\n3\nABC\nOutput:\n0\n\nNote:\nIn the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.\n\nIn the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.\n\nIn the third example the given string s does not contain any lowercase letters, so the answer is 0.",
    "examples": [
      {
        "input": "11\naaaaBaabAbA",
        "output": "2"
      },
      {
        "input": "12\nzACaAbbaazzC",
        "output": "3"
      },
      {
        "input": "3\nABC",
        "output": "0"
      }
    ],
    "solution": "##a = list(map(int, input().split()))\r\n##print(' '.join(map(str, res)))\r\n\r\nn = int(input())\r\ns = input()\r\n\r\nres = 0\r\np = 0\r\nwhile p < n:\r\n    q = p\r\n    while q < n and s[q].islower():\r\n        q += 1    \r\n    if q-p > 0:\r\n        h = dict()\r\n        for i in range(p, q):\r\n            if s[i] in h.keys():\r\n                h[s[i]] += 1\r\n            else:\r\n                h.update({s[i]:1})\r\n        res = max(res, len(h))\r\n    p = q+1\r\nprint(res)",
    "explanation": "Let's solve the given problem in the following way. We will iterate through the letters in the string in order from left to right.\nIf we are in position pos and the next letter is uppercase we skip it. In the other case, we need to create set and put letter spos in it. After that we iterate through string to the right until we do not met uppercase letter or until the string does not ended. We put in set each new lowercase letter. After we met uppercase letter (let position of this letter is p), or string is ended, we update the answer with the number of elements in set, and repeat described algorithm starting from position p."
  },
  {
    "id": "873/A",
    "problem": "Title: Chores\n\nLuba has to do n chores today. i-th chore takes ai units of time to complete. It is guaranteed that for every $$i \\in [2..n]$$ the condition ai ≥ ai - 1 is met, so the sequence is sorted.\n\nAlso Luba can work really hard on some chores. She can choose not more than k any chores and do each of them in x units of time instead of ai ($${ x < \\operatorname* { m i n } _ { i = 1 } ^ { n } a _ { i } }$$).\n\nLuba is very responsible, so she has to do all n chores, and now she wants to know the minimum time she needs to do everything. Luba cannot do two chores simultaneously.\n\nInput Format:\nThe first line contains three integers n, k, x (1 ≤ k ≤ n ≤ 100, 1 ≤ x ≤ 99) — the number of chores Luba has to do, the number of chores she can do in x units of time, and the number x itself.\n\nThe second line contains n integer numbers ai (2 ≤ ai ≤ 100) — the time Luba has to spend to do i-th chore.\n\nIt is guaranteed that $${ x < \\operatorname* { m i n } _ { i = 1 } ^ { n } a _ { i } }$$, and for each $$i \\in [2..n]$$ ai ≥ ai - 1.\n\nOutput Format:\nPrint one number — minimum time Luba needs to do all n chores.\n\nExamples:\nExample 1:\nInput:\n4 2 2\n3 6 7 10\nOutput:\n13\n\nExample 2:\nInput:\n5 2 1\n100 100 100 100 100\nOutput:\n302\n\nNote:\nIn the first example the best option would be to do the third and the fourth chore, spending x = 2 time on each instead of a3 and a4, respectively. Then the answer is 3 + 6 + 2 + 2 = 13.\n\nIn the second example Luba can choose any two chores to spend x time on them instead of ai. So the answer is 100·3 + 2·1 = 302.",
    "examples": [
      {
        "input": "4 2 2\n3 6 7 10",
        "output": "13"
      },
      {
        "input": "5 2 1\n100 100 100 100 100",
        "output": "302"
      }
    ],
    "solution": "n, k, x = map(int, input().split())\r\na = list(map(int, input().split()))\r\nprint(k*x+sum(a[0:n-k]))\r\n",
    "explanation": "Since $${ x < \\operatorname* { m i n } _ { i = 1 } ^ { n } a _ { i } }$$, it is better to do exactly k chores in time x. And since we need to minimize total time we need to spend, it's better to speed up the \"longest\" chores. So the answer is $${ k \\cdot x + \\sum _ { i = 1 } ^ { n - k } a _ { i } }$$."
  },
  {
    "id": "910/A",
    "problem": "Title: The Way to Home\n\nA frog lives on the axis Ox and needs to reach home which is in the point n. She starts from the point 1. The frog can jump to the right at a distance not more than d. So, after she jumped from the point x she can reach the point x + a, where a is an integer from 1 to d.\n\nFor each point from 1 to n is known if there is a lily flower in it. The frog can jump only in points with a lilies. Guaranteed that there are lilies in the points 1 and n.\n\nDetermine the minimal number of jumps that the frog needs to reach home which is in the point n from the point 1. Consider that initially the frog is in the point 1. If the frog can not reach home, print -1.\n\nInput Format:\nThe first line contains two integers n and d (2 ≤ n ≤ 100, 1 ≤ d ≤ n - 1) — the point, which the frog wants to reach, and the maximal length of the frog jump.\n\nThe second line contains a string s of length n, consisting of zeros and ones. If a character of the string s equals to zero, then in the corresponding point there is no lily flower. In the other case, in the corresponding point there is a lily flower. Guaranteed that the first and the last characters of the string s equal to one.\n\nOutput Format:\nIf the frog can not reach the home, print -1.\n\nIn the other case, print the minimal number of jumps that the frog needs to reach the home which is in the point n from the point 1.\n\nExamples:\nExample 1:\nInput:\n8 4\n10010101\nOutput:\n2\n\nExample 2:\nInput:\n4 2\n1001\nOutput:\n-1\n\nExample 3:\nInput:\n8 4\n11100101\nOutput:\n3\n\nExample 4:\nInput:\n12 3\n101111100101\nOutput:\n4\n\nNote:\nIn the first example the from can reach home in two jumps: the first jump from the point 1 to the point 4 (the length of the jump is three), and the second jump from the point 4 to the point 8 (the length of the jump is four).\n\nIn the second example the frog can not reach home, because to make it she need to jump on a distance three, but the maximum length of her jump equals to two.",
    "examples": [
      {
        "input": "8 4\n10010101",
        "output": "2"
      },
      {
        "input": "4 2\n1001",
        "output": "-1"
      },
      {
        "input": "8 4\n11100101",
        "output": "3"
      },
      {
        "input": "12 3\n101111100101",
        "output": "4"
      }
    ],
    "solution": "#10010101\r\nn,e = map(int,input().split())\r\ns = input()\r\ni = 0\r\nd = e\r\nans = -1\r\nflag = 0\r\nwhile(i<n-1):\r\n    if(n-i-1 < e):\r\n        e = n - i - 1\r\n        d = e\r\n    if(d==0):\r\n        flag = 1\r\n        print(\"-1\")\r\n        break\r\n    if(s[i+d]=='1'):\r\n        i = i + d\r\n        ans+=1\r\n        d = e\r\n    else:\r\n        d-=1\r\n\r\nif(flag==0):\r\n    print(ans+1)\r\n\r\n\r\n\r\n",
    "explanation": "Будем хранить в переменной pos текущую позицию лягушки. Изначально, pos = 1. Затем будем выполнять следующую операцию. Посмотрим все точки от pos + 1 до min(n, pos + d) (так как лягушка не должна прыгать правее точки n). Если среди этих точек нет единиц, то выведем -1, так как ответа не существует, и закончим работу программы. В противном случае, найдём самую правую точку из рассматриваемых, в которой стоит единица. Пусть эта точка равна x. Тогда выполним pos = x (то есть лягушка должна прыгнуть в эту точку), увеличим ответ на один и выполним описанную операцию вновь.\nОписанный процесс нужно выполнять до тех пор, пока лягушка не попадёт в точку n."
  },
  {
    "id": "237/B",
    "problem": "Title: Young Table\n\nYou've got table a, consisting of n rows, numbered from 1 to n. The i-th line of table a contains ci cells, at that for all i (1 < i ≤ n) holds ci ≤ ci - 1.\n\nLet's denote s as the total number of cells of table a, that is, $$s = \\sum_{i=1}^{n} c_i$$. We know that each cell of the table contains a single integer from 1 to s, at that all written integers are distinct.\n\nLet's assume that the cells of the i-th row of table a are numbered from 1 to ci, then let's denote the number written in the j-th cell of the i-th row as ai, j. Your task is to perform several swap operations to rearrange the numbers in the table so as to fulfill the following conditions:\n\n1. for all i, j (1 < i ≤ n; 1 ≤ j ≤ ci) holds ai, j > ai - 1, j;\n2. for all i, j (1 ≤ i ≤ n; 1 < j ≤ ci) holds ai, j > ai, j - 1.\n\nIn one swap operation you are allowed to choose two different cells of the table and swap the recorded there numbers, that is the number that was recorded in the first of the selected cells before the swap, is written in the second cell after it. Similarly, the number that was recorded in the second of the selected cells, is written in the first cell after the swap.\n\nRearrange the numbers in the required manner. Note that you are allowed to perform any number of operations, but not more than s. You do not have to minimize the number of operations.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 50) that shows the number of rows in the table. The second line contains n space-separated integers ci (1 ≤ ci ≤ 50; ci ≤ ci - 1) — the numbers of cells on the corresponding rows.\n\nNext n lines contain table а. The i-th of them contains ci space-separated integers: the j-th integer in this line represents ai, j.\n\nIt is guaranteed that all the given numbers ai, j are positive and do not exceed s. It is guaranteed that all ai, j are distinct.\n\nOutput Format:\nIn the first line print a single integer m (0 ≤ m ≤ s), representing the number of performed swaps.\n\nIn the next m lines print the description of these swap operations. In the i-th line print four space-separated integers xi, yi, pi, qi (1 ≤ xi, pi ≤ n; 1 ≤ yi ≤ cxi; 1 ≤ qi ≤ cpi). The printed numbers denote swapping the contents of cells axi, yi and api, qi. Note that a swap operation can change the contents of distinct table cells. Print the swaps in the order, in which they should be executed.\n\nExamples:\nExample 1:\nInput:\n3\n3 2 1\n4 3 5\n6 1\n2\nOutput:\n2\n1 1 2 2\n2 1 3 1\n\nExample 2:\nInput:\n1\n4\n4 3 2 1\nOutput:\n2\n1 1 1 4\n1 2 1 3",
    "examples": [
      {
        "input": "3\n3 2 1\n4 3 5\n6 1\n2",
        "output": "2\n1 1 2 2\n2 1 3 1"
      },
      {
        "input": "1\n4\n4 3 2 1",
        "output": "2\n1 1 1 4\n1 2 1 3"
      }
    ],
    "solution": "n=int(input())\r\np=[[0,0]]\r\nl=[0]\r\nv=[]\r\nfor i, c in enumerate(map(int, input().split())):\r\n    p.extend([[i + 1, j + 1] for j in range(c)])\r\n    l.extend(list(map(int, input().split())))\r\nfor i in range(1, len(l)):\r\n    if l[i] != i:\r\n        j = l.index(i)\r\n        v.append(p[i] + p[j])\r\n        l[i], l[j] = l[j], l[i]\r\nprint(len(v))\r\nfor x in v:\r\n    print(' '.join(map(str, x)))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "703/A",
    "problem": "Title: Mishka and Game\n\nMishka is a little polar bear. As known, little bears loves spending their free time playing dice for chocolates. Once in a wonderful sunny morning, walking around blocks of ice, Mishka met her friend Chris, and they started playing the game.\n\nRules of the game are very simple: at first number of rounds n is defined. In every round each of the players throws a cubical dice with distinct numbers from 1 to 6 written on its faces. Player, whose value after throwing the dice is greater, wins the round. In case if player dice values are equal, no one of them is a winner.\n\nIn average, player, who won most of the rounds, is the winner of the game. In case if two players won the same number of rounds, the result of the game is draw.\n\nMishka is still very little and can't count wins and losses, so she asked you to watch their game and determine its result. Please help her!\n\nInput Format:\nThe first line of the input contains single integer n n (1 ≤ n ≤ 100) — the number of game rounds.\n\nThe next n lines contains rounds description. i-th of them contains pair of integers mi and ci (1 ≤ mi,  ci ≤ 6) — values on dice upper face after Mishka's and Chris' throws in i-th round respectively.\n\nOutput Format:\nIf Mishka is the winner of the game, print \"Mishka\" (without quotes) in the only line.\n\nIf Chris is the winner of the game, print \"Chris\" (without quotes) in the only line.\n\nIf the result of the game is draw, print \"Friendship is magic!^^\" (without quotes) in the only line.\n\nExamples:\nExample 1:\nInput:\n3\n3 5\n2 1\n4 2\nOutput:\nMishka\n\nExample 2:\nInput:\n2\n6 1\n1 6\nOutput:\nFriendship is magic!^^\n\nExample 3:\nInput:\n3\n1 5\n3 3\n2 2\nOutput:\nChris\n\nNote:\nIn the first sample case Mishka loses the first round, but wins second and third rounds and thus she is the winner of the game.\n\nIn the second sample case Mishka wins the first round, Chris wins the second round, and the game ends with draw with score 1:1.\n\nIn the third sample case Chris wins the first round, but there is no winner of the next two rounds. The winner of the game is Chris.",
    "examples": [
      {
        "input": "3\n3 5\n2 1\n4 2",
        "output": "Mishka"
      },
      {
        "input": "2\n6 1\n1 6",
        "output": "Friendship is magic!^^"
      },
      {
        "input": "3\n1 5\n3 3\n2 2",
        "output": "Chris"
      }
    ],
    "solution": "intGamess = int(input())\r\n\r\nmishkWins = 0\r\nchrWins = 0\r\n\r\nfor i in range(intGamess):\r\n    currResult = input().split(\" \")\r\n    mishkResult = int(currResult[0])\r\n    chrResult = int(currResult[1])\r\n\r\n    if(mishkResult > chrResult):\r\n        mishkWins += 1\r\n    elif(chrResult > mishkResult):\r\n        chrWins += 1\r\n\r\nif(mishkWins > chrWins):\r\n    print(\"Mishka\")\r\nelif(chrWins > mishkWins):\r\n    print(\"Chris\")\r\nelse:\r\n    print(\"Friendship is magic!^^\")\r\n",
    "explanation": "In this problem you had to do use the following algo. If Mishka wins Chris in the current round, then increase variable countM by 1. Otherwise (if Chris wins Mishka) increase variable countC. After that you had to compare this values and print the answer."
  },
  {
    "id": "658/A",
    "problem": "Title: Bear and Reverse Radewoosh\n\nLimak and Radewoosh are going to compete against each other in the upcoming algorithmic contest. They are equally skilled but they won't solve problems in the same order.\n\nThere will be n problems. The i-th problem has initial score pi and it takes exactly ti minutes to solve it. Problems are sorted by difficulty — it's guaranteed that pi < pi + 1 and ti < ti + 1.\n\nA constant c is given too, representing the speed of loosing points. Then, submitting the i-th problem at time x (x minutes after the start of the contest) gives max(0,  pi - c·x) points.\n\nLimak is going to solve problems in order 1, 2, ..., n (sorted increasingly by pi). Radewoosh is going to solve them in order n, n - 1, ..., 1 (sorted decreasingly by pi). Your task is to predict the outcome — print the name of the winner (person who gets more points at the end) or a word \"Tie\" in case of a tie.\n\nYou may assume that the duration of the competition is greater or equal than the sum of all ti. That means both Limak and Radewoosh will accept all n problems.\n\nInput Format:\nThe first line contains two integers n and c (1 ≤ n ≤ 50, 1 ≤ c ≤ 1000) — the number of problems and the constant representing the speed of loosing points.\n\nThe second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000, pi < pi + 1) — initial scores.\n\nThe third line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1000, ti < ti + 1) where ti denotes the number of minutes one needs to solve the i-th problem.\n\nOutput Format:\nPrint \"Limak\" (without quotes) if Limak will get more points in total. Print \"Radewoosh\" (without quotes) if Radewoosh will get more points in total. Print \"Tie\" (without quotes) if Limak and Radewoosh will get the same total number of points.\n\nExamples:\nExample 1:\nInput:\n3 2\n50 85 250\n10 15 25\nOutput:\nLimak\n\nExample 2:\nInput:\n3 6\n50 85 250\n10 15 25\nOutput:\nRadewoosh\n\nExample 3:\nInput:\n8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76\nOutput:\nTie\n\nNote:\nIn the first sample, there are 3 problems. Limak solves them as follows:\n\n1. Limak spends 10 minutes on the 1-st problem and he gets 50 - c·10 = 50 - 2·10 = 30 points.\n2. Limak spends 15 minutes on the 2-nd problem so he submits it 10 + 15 = 25 minutes after the start of the contest. For the 2-nd problem he gets 85 - 2·25 = 35 points.\n3. He spends 25 minutes on the 3-rd problem so he submits it 10 + 15 + 25 = 50 minutes after the start. For this problem he gets 250 - 2·50 = 150 points.\n\nSo, Limak got 30 + 35 + 150 = 215 points.\n\nRadewoosh solves problem in the reversed order:\n\n1. Radewoosh solves 3-rd problem after 25 minutes so he gets 250 - 2·25 = 200 points.\n2. He spends 15 minutes on the 2-nd problem so he submits it 25 + 15 = 40 minutes after the start. He gets 85 - 2·40 = 5 points for this problem.\n3. He spends 10 minutes on the 1-st problem so he submits it 25 + 15 + 10 = 50 minutes after the start. He gets max(0, 50 - 2·50) = max(0,  - 50) = 0 points.\n\nRadewoosh got 200 + 5 + 0 = 205 points in total. Limak has 215 points so Limak wins.\n\nIn the second sample, Limak will get 0 points for each problem and Radewoosh will first solve the hardest problem and he will get 250 - 6·25 = 100 points for that. Radewoosh will get 0 points for other two problems but he is the winner anyway.\n\nIn the third sample, Limak will get 2 points for the 1-st problem and 2 points for the 2-nd problem. Radewoosh will get 4 points for the 8-th problem. They won't get points for other problems and thus there is a tie because 2 + 2 = 4.",
    "examples": [
      {
        "input": "3 2\n50 85 250\n10 15 25",
        "output": "Limak"
      },
      {
        "input": "3 6\n50 85 250\n10 15 25",
        "output": "Radewoosh"
      },
      {
        "input": "8 1\n10 20 30 40 50 60 70 80\n8 10 58 63 71 72 75 76",
        "output": "Tie"
      }
    ],
    "solution": "n,c=map(int,input().split())\r\np=list(map(int,input().split()))\r\nt=list(map(int,input().split()))\r\nq=[0,0]\r\ntm=0\r\nfor i in range(n):\r\n    tm+=t[i]\r\n    q[0]+=max(0,p[i]-c*tm)\r\ntm=0\r\nfor i in list(range(n))[::-1]:\r\n    tm+=t[i]\r\n    q[1]+=max(0,p[i]-c*tm)\r\nif q[0]>q[1]: print('Limak')\r\nelif q[1]>q[0]:print(\"Radewoosh\")\r\nelse: print(\"Tie\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "659/B",
    "problem": "Title: Qualifying Contest\n\nVery soon Berland will hold a School Team Programming Olympiad. From each of the m Berland regions a team of two people is invited to participate in the olympiad. The qualifying contest to form teams was held and it was attended by n Berland students. There were at least two schoolboys participating from each of the m regions of Berland. The result of each of the participants of the qualifying competition is an integer score from 0 to 800 inclusive.\n\nThe team of each region is formed from two such members of the qualifying competition of the region, that none of them can be replaced by a schoolboy of the same region, not included in the team and who received a greater number of points. There may be a situation where a team of some region can not be formed uniquely, that is, there is more than one school team that meets the properties described above. In this case, the region needs to undertake an additional contest. The two teams in the region are considered to be different if there is at least one schoolboy who is included in one team and is not included in the other team. It is guaranteed that for each region at least two its representatives participated in the qualifying contest.\n\nYour task is, given the results of the qualifying competition, to identify the team from each region, or to announce that in this region its formation requires additional contests.\n\nInput Format:\nThe first line of the input contains two integers n and m (2 ≤ n ≤ 100 000, 1 ≤ m ≤ 10 000, n ≥ 2m) — the number of participants of the qualifying contest and the number of regions in Berland.\n\nNext n lines contain the description of the participants of the qualifying contest in the following format: Surname (a string of length from 1 to 10 characters and consisting of large and small English letters), region number (integer from 1 to m) and the number of points scored by the participant (integer from 0 to 800, inclusive).\n\nIt is guaranteed that all surnames of all the participants are distinct and at least two people participated from each of the m regions. The surnames that only differ in letter cases, should be considered distinct.\n\nOutput Format:\nPrint m lines. On the i-th line print the team of the i-th region — the surnames of the two team members in an arbitrary order, or a single character \"?\" (without the quotes) if you need to spend further qualifying contests in the region.\n\nExamples:\nExample 1:\nInput:\n5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\nOutput:\nSidorov Ivanov\nAndreev Semenov\n\nExample 2:\nInput:\n5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\nOutput:\n?\nAndreev Semenov\n\nNote:\nIn the first sample region teams are uniquely determined.\n\nIn the second sample the team from region 2 is uniquely determined and the team from region 1 can have three teams: \"Petrov\"-\"Sidorov\", \"Ivanov\"-\"Sidorov\", \"Ivanov\" -\"Petrov\", so it is impossible to determine a team uniquely.",
    "examples": [
      {
        "input": "5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503",
        "output": "Sidorov Ivanov\nAndreev Semenov"
      },
      {
        "input": "5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503",
        "output": "?\nAndreev Semenov"
      }
    ],
    "solution": "import operator\r\n\r\nclass Participant:\r\n\tdef __init__(self,name,point):\r\n\t\tself.name=name\r\n\t\tself.point=point\r\n\r\nn,m=map(int,input().split())\r\ndes=[None]*m\r\nfor i in range(m):\r\n\tdes[i]=[]\r\nfor i in range(n):\r\n\tname,region,point=input().split()\r\n\tdes[int(region)-1].append(Participant(name,int(point)))\r\n\r\nresults=['?']*m\r\nfor i in range(m):\r\n\tcur_region=des[i]\r\n\tis_ok=False\r\n\tif len(cur_region)==2:\r\n\t\tis_ok=True\r\n\telse:\r\n\t\tcur_region.sort(key=operator.attrgetter('point'))\r\n\t\tif cur_region[-2].point!=cur_region[-3].point:\r\n\t\t\tis_ok=True\r\n\tif is_ok:\r\n\t\tresults[i]=' '.join([cur_region[-1].name,cur_region[-2].name])\r\nprint('\\n'.join(results))",
    "explanation": "Let's consider the participants from every region separately. So for every region we just need to sort all of its participants by their score in non-increasing order. The answer for a region is inconsistent if and only if the score of the second and the third participant in this order are equal, otherwise the answer is the first and the second participant in this order.\nThe solution complexity is $$O(n \\log n)$$."
  },
  {
    "id": "158/A",
    "problem": "Title: Next Round\n\n\"Contestant who earns a score equal to or greater than the k-th place finisher's score will advance to the next round, as long as the contestant earns a positive score...\" — an excerpt from contest rules.\n\nA total of n participants took part in the contest (n ≥ k), and you already know their scores. Calculate how many participants will advance to the next round.\n\nInput Format:\nThe first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) separated by a single space.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 100), where ai is the score earned by the participant who got the i-th place. The given sequence is non-increasing (that is, for all i from 1 to n - 1 the following condition is fulfilled: ai ≥ ai + 1).\n\nOutput Format:\nOutput the number of participants who advance to the next round.\n\nExamples:\nExample 1:\nInput:\n8 5\n10 9 8 7 7 7 5 5\nOutput:\n6\n\nExample 2:\nInput:\n4 2\n0 0 0 0\nOutput:\n0\n\nNote:\nIn the first example the participant on the 5th place earned 7 points. As the participant on the 6th place also earned 7 points, there are 6 advancers.\n\nIn the second example nobody got a positive score.",
    "examples": [
      {
        "input": "8 5\n10 9 8 7 7 7 5 5",
        "output": "6"
      },
      {
        "input": "4 2\n0 0 0 0",
        "output": "0"
      }
    ],
    "solution": "n, k = map(int, input().split())\r\nscores = list(map(int, input().split()))\r\n\r\nt = 0\r\nmin_score = scores[k-1]\r\nfor s in scores:\r\n    if s >= min_score and s > 0:\r\n        t += 1\r\nprint(t)\r\n        ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "989/B",
    "problem": "Title: A Tide of Riverscape\n\nThe records are expressed as a string $$$s$$$ of characters '0', '1' and '.', where '0' denotes a low tide, '1' denotes a high tide, and '.' denotes an unknown one (either high or low).\n\nYou are to help Mino determine whether it's possible that after replacing each '.' independently with '0' or '1', a given integer $$$p$$$ is not a period of the resulting string. In case the answer is yes, please also show such a replacement to Mino.\n\nIn this problem, a positive integer $$$p$$$ is considered a period of string $$$s$$$, if for all $$$1 \\leq i \\leq \\lvert s \\rvert - p$$$, the $$$i$$$-th and $$$(i + p)$$$-th characters of $$$s$$$ are the same. Here $$$\\lvert s \\rvert$$$ is the length of $$$s$$$.\n\nInput Format:\nThe first line contains two space-separated integers $$$n$$$ and $$$p$$$ ($$$1 \\leq p \\leq n \\leq 2000$$$) — the length of the given string and the supposed period, respectively.\n\nThe second line contains a string $$$s$$$ of $$$n$$$ characters — Mino's records. $$$s$$$ only contains characters '0', '1' and '.', and contains at least one '.' character.\n\nOutput Format:\nOutput one line — if it's possible that $$$p$$$ is not a period of the resulting string, output any one of such strings; otherwise output \"No\" (without quotes, you can print letters in any case (upper or lower)).\n\nExamples:\nExample 1:\nInput:\n10 7\n1.0.1.0.1.\nOutput:\n1000100010\n\nExample 2:\nInput:\n10 6\n1.0.1.1000\nOutput:\n1001101000\n\nExample 3:\nInput:\n10 9\n1........1\nOutput:\nNo\n\nNote:\nIn the first example, $$$7$$$ is not a period of the resulting string because the $$$1$$$-st and $$$8$$$-th characters of it are different.\n\nIn the second example, $$$6$$$ is not a period of the resulting string because the $$$4$$$-th and $$$10$$$-th characters of it are different.\n\nIn the third example, $$$9$$$ is always a period because the only constraint that the first and last characters are the same is already satisfied.\n\nNote that there are multiple acceptable answers for the first two examples, you can print any of them.",
    "examples": [
      {
        "input": "10 7\n1.0.1.0.1.",
        "output": "1000100010"
      },
      {
        "input": "10 6\n1.0.1.1000",
        "output": "1001101000"
      },
      {
        "input": "10 9\n1........1",
        "output": "No"
      }
    ],
    "solution": "n, p = map(int, input().split())\r\ns = input()\r\nA = [list() for i in range(p)]\r\nfor i in range(len(s)):\r\n    A[(i % p)].append(s[i])\r\nbad_index = -1\r\nchange = False\r\nchange1 = '0'\r\nchange2 = '0'\r\nfor i in range(p):\r\n    if '.' in A[i] and A[i] != ['.']:\r\n        bad_index = i\r\n        change = True\r\n        if '0' in A[i]:\r\n            change1 = '1'\r\n            change2 = '0'\r\n        else:\r\n            change1 = '0'\r\n            change2 = '1'\r\n        \r\n    if '0' in A[i] and '1' in A[i]:\r\n        bad_index = i\r\n        change = False\r\n\r\nif bad_index == -1:\r\n    print('No')\r\nelse:\r\n    ans = list(s)\r\n    cnt = 0\r\n    for i in range(len(s)):\r\n        if i % p == bad_index:\r\n            if not change:\r\n                if s[i] == '.':\r\n                    ans[i] = '0'\r\n            if change:\r\n                if s[i] == '.':\r\n                    if cnt == 0:\r\n                        ans[i] = change1\r\n                        cnt += 1\r\n                    else:\r\n                        ans[i] = change2\r\n        else:\r\n            if s[i] == '.':\r\n                ans[i] = change1\r\n    print(''.join(ans))",
    "explanation": "Our very first observation is that when $$$p \\leq \\frac n 2$$$, the answer can never be \"No\".\nUnder this case, find any dot $$$s_i = \\texttt{\".\"}$$$. At least one of $$$s_{i-p}$$$ and $$$s_{i+p}$$$ exists because $$$p \\leq \\frac n 2$$$ and $$$1 \\leq i \\leq n$$$. We want to make $$$s_i$$$ different from this character. In case this character is $$$\\texttt{\"0\"}$$$ or $$$\\texttt{\"1\"}$$$, replace the dot the other way round. In case it's a dot, replace the two dots differently with $$$\\texttt{\"0\"}$$$ and $$$\\texttt{\"1\"}$$$. After that, fill the remaining dots arbitrarily, and we obtain a valid answer.\nIf $$$p \\gt \\frac n 2$$$, we'd like to find a dot with a similiar property. That is, $$$s_i = \\texttt{\".\"}$$$, and $$$s_{i-p}$$$ or $$$s_{i+p}$$$ exists. Go over all dots, try find one, and carry out the same operation as above. If no such dot exists, the answer is \"No\".\nBonus. Prove the time complexity of the seemingly-brute-force solution below.\nBonus. In case the answer is \"Yes\", find the lexicographically smallest string that fulfill the requirements.\nBonus. Solve the bonus challenge with $$$n \\leq 10^5$$$. (Estimated difficulty: Div. 2 C)"
  },
  {
    "id": "615/A",
    "problem": "Title: Bulbs\n\nVasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it's connected to. Can Vasya light up all the bulbs?\n\nIf Vasya presses the button such that some bulbs connected to it are already turned on, they do not change their state, i.e. remain turned on.\n\nInput Format:\nThe first line of the input contains integers n and m (1 ≤ n, m ≤ 100) — the number of buttons and the number of bulbs respectively.\n\nEach of the next n lines contains xi (0 ≤ xi ≤ m) — the number of bulbs that are turned on by the i-th button, and then xi numbers yij (1 ≤ yij ≤ m) — the numbers of these bulbs.\n\nOutput Format:\nIf it's possible to turn on all m bulbs print \"YES\", otherwise print \"NO\".\n\nExamples:\nExample 1:\nInput:\n3 4\n2 1 4\n3 1 3 1\n1 2\nOutput:\nYES\n\nExample 2:\nInput:\n3 3\n1 1\n1 2\n1 1\nOutput:\nNO\n\nNote:\nIn the first sample you can press each button once and turn on all the bulbs. In the 2 sample it is impossible to turn on the 3-rd lamp.",
    "examples": [
      {
        "input": "3 4\n2 1 4\n3 1 3 1\n1 2",
        "output": "YES"
      },
      {
        "input": "3 3\n1 1\n1 2\n1 1",
        "output": "NO"
      }
    ],
    "solution": "a,b=map(int,input().split())\r\ng=set()\r\nfor i in range(a):\r\n    n=list(map(int,input().split()))\r\n    n.pop(0)\r\n    g.update(n)\r\nprint(['NO','YES'][len(g) == b])",
    "explanation": "Let's make a counter of number of buttons that switch every lamp off. If there is a lamp with zero counter, output NO, otherwise YES."
  },
  {
    "id": "681/B",
    "problem": "Title: Economy Game\n\nKolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to 0.\n\nKolya remembers that at the beginning of the game his game-coin score was equal to n and that he have bought only some houses (for 1 234 567 game-coins each), cars (for 123 456 game-coins each) and computers (for 1 234 game-coins each).\n\nKolya is now interested, whether he could have spent all of his initial n game-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers a, b and c such that a × 1 234 567 + b × 123 456 + c × 1 234 = n?\n\nPlease help Kolya answer this question.\n\nInput Format:\nThe first line of the input contains a single integer n (1 ≤ n ≤ 109) — Kolya's initial game-coin score.\n\nOutput Format:\nPrint \"YES\" (without quotes) if it's possible that Kolya spent all of his initial n coins buying only houses, cars and computers. Otherwise print \"NO\" (without quotes).\n\nExamples:\nExample 1:\nInput:\n1359257\nOutput:\nYES\n\nExample 2:\nInput:\n17851817\nOutput:\nNO\n\nNote:\nIn the first sample, one of the possible solutions is to buy one house, one car and one computer, spending 1 234 567 + 123 456 + 1234 = 1 359 257 game-coins in total.",
    "examples": [
      {
        "input": "1359257",
        "output": "YES"
      },
      {
        "input": "17851817",
        "output": "NO"
      }
    ],
    "solution": "n = int(input())\r\n\r\nfor i in range(0, n+1, 1234567):\r\n    for j in range(0, n-i+1, 123456):\r\n        if (n - i - j) % 1234 == 0:\r\n            print(\"YES\")\r\n            exit()\r\n\r\nprint(\"NO\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "817/C",
    "problem": "Title: Really Big Numbers\n\nIvan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are — in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\nInput Format:\nThe first (and the only) line contains two integers n and s (1 ≤ n, s ≤ 1018).\n\nOutput Format:\nPrint one integer — the quantity of really big numbers that are not greater than n.\n\nExamples:\nExample 1:\nInput:\n12 1\nOutput:\n3\n\nExample 2:\nInput:\n25 20\nOutput:\n0\n\nExample 3:\nInput:\n10 9\nOutput:\n1\n\nNote:\nIn the first example numbers 10, 11 and 12 are really big.\n\nIn the second example there are no really big numbers that are not greater than 25 (in fact, the first really big number is 30: 30 - 3 ≥ 20).\n\nIn the third example 10 is the only really big number (10 - 1 ≥ 9).",
    "examples": [
      {
        "input": "12 1",
        "output": "3"
      },
      {
        "input": "25 20",
        "output": "0"
      },
      {
        "input": "10 9",
        "output": "1"
      }
    ],
    "solution": "def main():\n   n, s  = map(int,input().split())\n   a = BS(1,n,s)\n   print(n-a+1)\n   \ndef BS(f,l,d):\n    if(f>l): \n        return f\n    mi = (f+l)//2\n    if(mi-sum([int(j) for j in str(mi)]) >= d):\n        return BS(f,mi-1,d)\n    else:\n        return BS(mi+1,l,d)\n\nif __name__ == \"__main__\":\n    main()\n",
    "explanation": "Let's prove that if x is really big, then x + 1 is really big too.\nSince the sum of digits of x + 1 (let's call it sumd(x + 1)) is not greater than sumd(x) + 1, then x + 1 - sumd(x + 1) ≥ x - sumd(x), and if x - sumd(x) ≥ s, then x + 1 - sumd(x + 1) ≥ s. So if x is really big, then x + 1 is really big.\nThis observation allows us to use binary search to find the minimum really big number (let's call it y). And if y ≤ n, then all numbers in the segment [y, n] are really big and not greater than n, so the quantity of these numbers is the answer to the problem."
  },
  {
    "id": "734/B",
    "problem": "Title: Anton and Digits\n\nRecently Anton found a box with digits in his room. There are k2 digits 2, k3 digits 3, k5 digits 5 and k6 digits 6.\n\nAnton's favorite integers are 32 and 256. He decided to compose this integers from digits he has. He wants to make the sum of these integers as large as possible. Help him solve this task!\n\nEach digit can be used no more than once, i.e. the composed integers should contain no more than k2 digits 2, k3 digits 3 and so on. Of course, unused digits are not counted in the sum.\n\nInput Format:\nThe only line of the input contains four integers k2, k3, k5 and k6 — the number of digits 2, 3, 5 and 6 respectively (0 ≤ k2, k3, k5, k6 ≤ 5·106).\n\nOutput Format:\nPrint one integer — maximum possible sum of Anton's favorite integers that can be composed using digits from the box.\n\nExamples:\nExample 1:\nInput:\n5 1 3 4\nOutput:\n800\n\nExample 2:\nInput:\n1 1 1 1\nOutput:\n256\n\nNote:\nIn the first sample, there are five digits 2, one digit 3, three digits 5 and four digits 6. Anton can compose three integers 256 and one integer 32 to achieve the value 256 + 256 + 256 + 32 = 800. Note, that there is one unused integer 2 and one unused integer 6. They are not counted in the answer.\n\nIn the second sample, the optimal answer is to create on integer 256, thus the answer is 256.",
    "examples": [
      {
        "input": "5 1 3 4",
        "output": "800"
      },
      {
        "input": "1 1 1 1",
        "output": "256"
      }
    ],
    "solution": "a, b, d, e = map(int, input().split())\r\nc = 0\r\nr = [a, d, e]\r\nc += min(r) * 256\r\na -= min(r)\r\nq = [a, b]\r\nc += min(q) * 32\r\nprint(c)\r\n",
    "explanation": "We will act greedily. At first we'll make maximal possible amount of 256 numbers. It will be equal to $$n_{256} = \\min(k_2, k_5, k_6)$$. From the rest of the digits we'll make maximal possible amount of 32 numbers. It will be equal to $$n_{32} = \\min(k_3, k_2 - n_{256})$$ (we use k2 - n256 instead of k2, because n256 twos we've already used to make 256 numbers. Now it's not hard to observe that the answer will be equal to $$32 \\cdot n_{32} + 256 \\cdot n_{256}$$.\nTime complexity is $${\\mathcal{O}}(1)$$."
  },
  {
    "id": "785/A",
    "problem": "Title: Anton and Polyhedrons\n\nAnton's favourite geometric figures are regular polyhedrons. Note that there are five kinds of regular polyhedrons:\n\n- Tetrahedron. Tetrahedron has 4 triangular faces.\n- Cube. Cube has 6 square faces.\n- Octahedron. Octahedron has 8 triangular faces.\n- Dodecahedron. Dodecahedron has 12 pentagonal faces.\n- Icosahedron. Icosahedron has 20 triangular faces.\n\nAll five kinds of polyhedrons are shown on the picture below:\n\nAnton has a collection of n polyhedrons. One day he decided to know, how many faces his polyhedrons have in total. Help Anton and find this number!\n\nInput Format:\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of polyhedrons in Anton's collection.\n\nEach of the following n lines of the input contains a string si — the name of the i-th polyhedron in Anton's collection. The string can look like this:\n\n- \"Tetrahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a tetrahedron.\n- \"Cube\" (without quotes), if the i-th polyhedron in Anton's collection is a cube.\n- \"Octahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an octahedron.\n- \"Dodecahedron\" (without quotes), if the i-th polyhedron in Anton's collection is a dodecahedron.\n- \"Icosahedron\" (without quotes), if the i-th polyhedron in Anton's collection is an icosahedron.\n\nOutput Format:\nOutput one number — the total number of faces in all the polyhedrons in Anton's collection.\n\nExamples:\nExample 1:\nInput:\n4\nIcosahedron\nCube\nTetrahedron\nDodecahedron\nOutput:\n42\n\nExample 2:\nInput:\n3\nDodecahedron\nOctahedron\nOctahedron\nOutput:\n28\n\nNote:\nIn the first sample Anton has one icosahedron, one cube, one tetrahedron and one dodecahedron. Icosahedron has 20 faces, cube has 6 faces, tetrahedron has 4 faces and dodecahedron has 12 faces. In total, they have 20 + 6 + 4 + 12 = 42 faces.",
    "examples": [
      {
        "input": "4\nIcosahedron\nCube\nTetrahedron\nDodecahedron",
        "output": "42"
      },
      {
        "input": "3\nDodecahedron\nOctahedron\nOctahedron",
        "output": "28"
      }
    ],
    "solution": "lists=[]\r\nfor _ in range(int(input())):\r\n    lists.append(input())\r\ns=0\r\nfor i in lists:\r\n    if i=='Tetrahedron':\r\n        s+=4\r\n    elif i=='Cube':\r\n        s+=6\r\n    elif i=='Octahedron':\r\n        s+=8\r\n    elif i=='Dodecahedron':\r\n        s+=12\r\n    elif i=='Icosahedron':\r\n        s+=20\r\nprint(s)",
    "explanation": "I think there's nothing to explain in this problem. Just check the polyhedron type, determine its number of faces and sum these numbers.\nTime complexity is $${\\mathcal{O}}(n)$$."
  },
  {
    "id": "703/B",
    "problem": "Title: Mishka and trip\n\nLittle Mishka is a great traveller and she visited many countries. After thinking about where to travel this time, she chose XXX — beautiful, but little-known northern country.\n\nHere are some interesting facts about XXX:\n\n1. XXX consists of n cities, k of whose (just imagine!) are capital cities.\n2. All of cities in the country are beautiful, but each is beautiful in its own way. Beauty value of i-th city equals to ci.\n3. All the cities are consecutively connected by the roads, including 1-st and n-th city, forming a cyclic route 1 — 2 — ... — n — 1. Formally, for every 1 ≤ i < n there is a road between i-th and i + 1-th city, and another one between 1-st and n-th city.\n4. Each capital city is connected with each other city directly by the roads. Formally, if city x is a capital city, then for every 1 ≤ i ≤ n,  i ≠ x, there is a road between cities x and i.\n5. There is at most one road between any two cities.\n6. Price of passing a road directly depends on beauty values of cities it connects. Thus if there is a road between cities i and j, price of passing it equals ci·cj.\n\nMishka started to gather her things for a trip, but didn't still decide which route to follow and thus she asked you to help her determine summary price of passing each of the roads in XXX. Formally, for every pair of cities a and b (a < b), such that there is a road between a and b you are to find sum of products ca·cb. Will you help her?\n\nInput Format:\nThe first line of the input contains two integers n and k (3 ≤ n ≤ 100 000, 1 ≤ k ≤ n) — the number of cities in XXX and the number of capital cities among them.\n\nThe second line of the input contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 10 000) — beauty values of the cities.\n\nThe third line of the input contains k distinct integers id1, id2, ..., idk (1 ≤ idi ≤ n) — indices of capital cities. Indices are given in ascending order.\n\nOutput Format:\nPrint the only integer — summary price of passing each of the roads in XXX.\n\nExamples:\nExample 1:\nInput:\n4 1\n2 3 1 2\n3\nOutput:\n17\n\nExample 2:\nInput:\n5 2\n3 5 2 2 4\n1 4\nOutput:\n71\n\nNote:\nThis image describes first sample case:\n\nIt is easy to see that summary price is equal to 17.\n\nThis image describes second sample case:\n\nIt is easy to see that summary price is equal to 71.",
    "examples": [
      {
        "input": "4 1\n2 3 1 2\n3",
        "output": "17"
      },
      {
        "input": "5 2\n3 5 2 2 4\n1 4",
        "output": "71"
      }
    ],
    "solution": "n, k = map(int, input().split())\nc = list(map(int, input().split()))\nv = set(map(int, input().split()))\ns=sum(c)\nr=0\nfor x in v :\n    s=s-c[x-1]\n    r=r+s*c[x-1]\n    c[x-1]=0\nfor i in range(n) :\n    r=r+c[i]* c[(i+1) % n]\nprint(r)\n        \n    \n    \n\n\t  \t \t \t\t   \t\t\t\t\t\t \t\t \t \t \t\t \t\t",
    "explanation": "Let's look at the first capital. Note that the total cost of the outgoing roads is cid1 · (sum - cid1), where sum — summary beauty of all cities. Thus iterating through the capitals we can count the summary cost of roads between capitals and all the other cities. But don't forget that in this case we count the roads between pairs of capitals twice. To avoid this on each step we should update sum = sum - cidcur , where idcur is the position of current capital. In the end we should add to the answer the cost of roads between \"non-capital\" neighbour cities. Complexity - O(n)."
  },
  {
    "id": "110/B",
    "problem": "Title: Lucky String\n\nPetya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya recently learned to determine whether a string of lowercase Latin letters is lucky. For each individual letter all its positions in the string are written out in the increasing order. This results in 26 lists of numbers; some of them can be empty. A string is considered lucky if and only if in each list the absolute difference of any two adjacent numbers is a lucky number.\n\nFor example, let's consider string \"zbcdzefdzc\". The lists of positions of equal letters are:\n\n- b: 2\n- c: 3, 10\n- d: 4, 8\n- e: 6\n- f: 7\n- z: 1, 5, 9\n- Lists of positions of letters a, g, h, ..., y are empty.\n\nThis string is lucky as all differences are lucky numbers. For letters z: 5 - 1 = 4, 9 - 5 = 4, for letters c: 10 - 3 = 7, for letters d: 8 - 4 = 4.\n\nNote that if some letter occurs only once in a string, it doesn't influence the string's luckiness after building the lists of positions of equal letters. The string where all the letters are distinct is considered lucky.\n\nFind the lexicographically minimal lucky string whose length equals n.\n\nInput Format:\nThe single line contains a positive integer n (1 ≤ n ≤ 105) — the length of the sought string.\n\nOutput Format:\nPrint on the single line the lexicographically minimal lucky string whose length equals n.\n\nExamples:\nExample 1:\nInput:\n5\nOutput:\nabcda\n\nExample 2:\nInput:\n3\nOutput:\nabc\n\nNote:\nThe lexical comparison of strings is performed by the < operator in modern programming languages. String a is lexicographically less than string b if exists such i (1 ≤ i ≤ n), that ai < bi, and for any j (1 ≤ j < i) aj = bj.",
    "examples": [
      {
        "input": "5",
        "output": "abcda"
      },
      {
        "input": "3",
        "output": "abc"
      }
    ],
    "solution": "n=int(input())\ns=(n//4+1)*\"abcd\"\nprint(s[:n])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "496/A",
    "problem": "Title: Minimum Difficulty\n\nMike is trying rock climbing but he is awful at it.\n\nThere are n holds on the wall, i-th hold is at height ai off the ground. Besides, let the sequence ai increase, that is, ai < ai + 1 for all i from 1 to n - 1; we will call such sequence a track. Mike thinks that the track a1, ..., an has difficulty $$d = \\max_{1 \\leq i \\leq n-1} (a_{i+1} - a_i)$$. In other words, difficulty equals the maximum distance between two holds that are adjacent in height.\n\nToday Mike decided to cover the track with holds hanging on heights a1, ..., an. To make the problem harder, Mike decided to remove one hold, that is, remove one element of the sequence (for example, if we take the sequence (1, 2, 3, 4, 5) and remove the third element from it, we obtain the sequence (1, 2, 4, 5)). However, as Mike is awful at climbing, he wants the final difficulty (i.e. the maximum difference of heights between adjacent holds after removing the hold) to be as small as possible among all possible options of removing a hold. The first and last holds must stay at their positions.\n\nHelp Mike determine the minimum difficulty of the track after removing one hold.\n\nInput Format:\nThe first line contains a single integer n (3 ≤ n ≤ 100) — the number of holds.\n\nThe next line contains n space-separated integers ai (1 ≤ ai ≤ 1000), where ai is the height where the hold number i hangs. The sequence ai is increasing (i.e. each element except for the first one is strictly larger than the previous one).\n\nOutput Format:\nPrint a single number — the minimum difficulty of the track after removing a single hold.\n\nExamples:\nExample 1:\nInput:\n3\n1 4 6\nOutput:\n5\n\nExample 2:\nInput:\n5\n1 2 3 4 5\nOutput:\n2\n\nExample 3:\nInput:\n5\n1 2 3 7 8\nOutput:\n4\n\nNote:\nIn the first sample you can remove only the second hold, then the sequence looks like (1, 6), the maximum difference of the neighboring elements equals 5.\n\nIn the second test after removing every hold the difficulty equals 2.\n\nIn the third test you can obtain sequences (1, 3, 7, 8), (1, 2, 7, 8), (1, 2, 3, 8), for which the difficulty is 4, 5 and 5, respectively. Thus, after removing the second element we obtain the optimal answer — 4.",
    "examples": [
      {
        "input": "3\n1 4 6",
        "output": "5"
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "2"
      },
      {
        "input": "5\n1 2 3 7 8",
        "output": "4"
      }
    ],
    "solution": "n = int(input())\r\n\r\nl = list(map(int,input().split()))\r\nm = 0\r\nfor i in range(0,n-1):\r\n  m = max(m,l[i+1]-l[i])\r\n\r\na = 10000\r\nfor i in range(1,n-1):\r\n    \r\n  a = min(a,l[i+1]-l[i-1])\r\n  \r\nprint([m,a][m<a])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "988/A",
    "problem": "Title: Diverse Team\n\nThere are $$$n$$$ students in a school class, the rating of the $$$i$$$-th student on Codehorses is $$$a_i$$$. You have to form a team consisting of $$$k$$$ students ($$$1 \\le k \\le n$$$) such that the ratings of all team members are distinct.\n\nIf it is impossible to form a suitable team, print \"NO\" (without quotes). Otherwise print \"YES\", and then print $$$k$$$ distinct numbers which should be the indices of students in the team you form. If there are multiple answers, print any of them.\n\nInput Format:\nThe first line contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 100$$$) — the number of students and the size of the team you have to form.\n\nThe second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 100$$$), where $$$a_i$$$ is the rating of $$$i$$$-th student.\n\nOutput Format:\nIf it is impossible to form a suitable team, print \"NO\" (without quotes). Otherwise print \"YES\", and then print $$$k$$$ distinct integers from $$$1$$$ to $$$n$$$ which should be the indices of students in the team you form. All the ratings of the students in the team should be distinct. You may print the indices in any order. If there are multiple answers, print any of them.\n\nAssume that the students are numbered from $$$1$$$ to $$$n$$$.\n\nExamples:\nExample 1:\nInput:\n5 3\n15 13 15 15 12\nOutput:\nYES\n1 2 5\n\nExample 2:\nInput:\n5 4\n15 13 15 15 12\nOutput:\nNO\n\nExample 3:\nInput:\n4 4\n20 10 40 30\nOutput:\nYES\n1 2 3 4\n\nNote:\nAll possible answers for the first example:\n\n- {1 2 5}\n- {2 3 5}\n- {2 4 5}\n\nNote that the order does not matter.",
    "examples": [
      {
        "input": "5 3\n15 13 15 15 12",
        "output": "YES\n1 2 5"
      },
      {
        "input": "5 4\n15 13 15 15 12",
        "output": "NO"
      },
      {
        "input": "4 4\n20 10 40 30",
        "output": "YES\n1 2 3 4"
      }
    ],
    "solution": "n,k=map(int,input().split())\r\nl=list(map(int,input().split()))\r\ns=set()\r\nfor i in range(len(l)):\r\n    s.add(l[i])\r\nl1=[i for i in s]\r\nl2=[]\r\nif len(s)>=k:\r\n    print(\"YES\")\r\n    for i in range(k):\r\n        if(l1[i] in l):\r\n            l2.append(l.index(l1[i])+1)\r\n    l2.sort()\r\n    for i in range(len(l2)):\r\n        print(l2[i],end=' ')\r\n\r\nelse:\r\n    print(\"NO\")\r\n",
    "explanation": "Let's write our \"unique\" function. Keep the array of the taken elements $$$used$$$. Iterate over all elements in the array $$$a$$$ and if the current element is not used ($$$used[a_i] = false$$$) then add its index $$$i$$$ to the answer and set $$$used[a_i] := true$$$. When finished, check the number of distinct values (that is the size of answer array). If it is less than $$$k$$$, print \"NO\". Otherwise print \"YES\" and output the first $$$k$$$ elements of the answer."
  },
  {
    "id": "171/B",
    "problem": "Title: Star\n\nInput Format:\nThe input contains a single integer a (1 ≤ a ≤ 18257).\n\nOutput Format:\nPrint a single integer output (1 ≤ output ≤ 2·109).\n\nExamples:\nExample 1:\nInput:\n2\nOutput:\n13",
    "examples": [
      {
        "input": "2",
        "output": "13"
      }
    ],
    "solution": "n = int(input())\r\nprint (6*n*(n-1)+1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "908/A",
    "problem": "Title: New Year and Counting Cards\n\nYour friend has n cards.\n\nYou know that each card has a lowercase English letter on one side and a digit on the other.\n\nCurrently, your friend has laid out the cards on a table so only one side of each card is visible.\n\nYou would like to know if the following statement is true for cards that your friend owns: \"If a card has a vowel on one side, then it has an even digit on the other side.\" More specifically, a vowel is one of 'a', 'e', 'i', 'o' or 'u', and even digit is one of '0', '2', '4', '6' or '8'.\n\nFor example, if a card has 'a' on one side, and '6' on the other side, then this statement is true for it. Also, the statement is true, for example, for a card with 'b' and '4', and for a card with 'b' and '3' (since the letter is not a vowel). The statement is false, for example, for card with 'e' and '5'. You are interested if the statement is true for all cards. In particular, if no card has a vowel, the statement is true.\n\nTo determine this, you can flip over some cards to reveal the other side. You would like to know what is the minimum number of cards you need to flip in the worst case in order to verify that the statement is true.\n\nInput Format:\nThe first and only line of input will contain a string s (1 ≤ |s| ≤ 50), denoting the sides of the cards that you can see on the table currently. Each character of s is either a lowercase English letter or a digit.\n\nOutput Format:\nPrint a single integer, the minimum number of cards you must turn over to verify your claim.\n\nExamples:\nExample 1:\nInput:\nee\nOutput:\n2\n\nExample 2:\nInput:\nz\nOutput:\n0\n\nExample 3:\nInput:\n0ay1\nOutput:\n2\n\nNote:\nIn the first sample, we must turn over both cards. Note that even though both cards have the same letter, they could possibly have different numbers on the other side.\n\nIn the second sample, we don't need to turn over any cards. The statement is vacuously true, since you know your friend has no cards with a vowel on them.\n\nIn the third sample, we need to flip the second and fourth cards.",
    "examples": [
      {
        "input": "ee",
        "output": "2"
      },
      {
        "input": "z",
        "output": "0"
      },
      {
        "input": "0ay1",
        "output": "2"
      }
    ],
    "solution": "from sys import stdin, stdout\n\ndef need_to_check(card, vowels=['a','e','i','o','u']):\n    return (ord(card) >= ord('0') and ord(card) <= ord('9') and int(card) % 2 == 1) or (card in vowels)\n\ndef number_of_reveals(cards):\n    count = 0\n    for card in cards:\n        count = count+1 if need_to_check(card) else count\n    return count\n\nstdout.write( str(number_of_reveals(stdin.readline())) +'\\n')\n \t   \t\t\t        \t\t   \t \t",
    "explanation": "Let's start off a bit more abstractly. We would like to know if the statement \"if P then Q\" is true, where P and Q are some statements (in this case, P is \"card has vowel\", and Q is \"card has even number\"). To do determine this, we need to flip over any cards which could be counter-examples (i.e. could make the statement false).\nLet's look at the truth table for if P then Q (see here: http://www.math.hawaii.edu/ ramsey/Logic/IfThen.html). The statement is only false when Q is false and P is true. Thus, it suffices to flip cards when P is true or Q is false.\nTo solve this problem, we need to print the count of vowels and odd digits in the string."
  },
  {
    "id": "56/A",
    "problem": "Title: Bar\n\nAccording to Berland laws it is only allowed to sell alcohol to people not younger than 18 years. Vasya's job is to monitor the law's enforcement. Tonight he entered a bar and saw n people sitting there. For every one of them Vasya happened to determine either the age or the drink the person is having. Vasya can check any person, i.e. learn his age and the drink he is having at the same time. What minimal number of people should Vasya check additionally to make sure that there are no clients under 18 having alcohol drinks?\n\nThe list of all alcohol drinks in Berland is: ABSINTH, BEER, BRANDY, CHAMPAGNE, GIN, RUM, SAKE, TEQUILA, VODKA, WHISKEY, WINE\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 100) which is the number of the bar's clients. Then follow n lines, each describing one visitor. A line either contains his age (an integer from 0 to 1000) or his drink (a string of capital Latin letters from 1 to 100 in length). It is guaranteed that the input data does not contain spaces and other unnecessary separators.\n\nOnly the drinks from the list given above should be considered alcohol.\n\nOutput Format:\nPrint a single number which is the number of people Vasya should check to guarantee the law enforcement.\n\nExamples:\nExample 1:\nInput:\n5\n18\nVODKA\nCOKE\n19\n17\nOutput:\n2\n\nNote:\nIn the sample test the second and fifth clients should be checked.",
    "examples": [
      {
        "input": "5\n18\nVODKA\nCOKE\n19\n17",
        "output": "2"
      }
    ],
    "solution": "a='ABSINTH BEER BRANDY CHAMPAGNE GIN RUM SAKE TEQUILA VODKA WHISKEY WINE'.split()\r\nn=int(input())\r\nans=0\r\nfor i in range(n):\r\n    x=input()\r\n    if x in a or x.isdigit() and int(x)<18:ans+=1\r\nprint(ans)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "161/B",
    "problem": "Title: Discounts\n\nOne day Polycarpus stopped by a supermarket on his way home. It turns out that the supermarket is having a special offer for stools. The offer is as follows: if a customer's shopping cart contains at least one stool, the customer gets a 50% discount on the cheapest item in the cart (that is, it becomes two times cheaper). If there are several items with the same minimum price, the discount is available for only one of them!\n\nPolycarpus has k carts, and he wants to buy up all stools and pencils from the supermarket. Help him distribute the stools and the pencils among the shopping carts, so that the items' total price (including the discounts) is the least possible.\n\nPolycarpus must use all k carts to purchase the items, no shopping cart can remain empty. Each shopping cart can contain an arbitrary number of stools and/or pencils.\n\nInput Format:\nThe first input line contains two integers n and k (1 ≤ k ≤ n ≤ 103) — the number of items in the supermarket and the number of carts, correspondingly. Next n lines describe the items as \"ci ti\" (without the quotes), where ci (1 ≤ ci ≤ 109) is an integer denoting the price of the i-th item, ti (1 ≤ ti ≤ 2) is an integer representing the type of item i (1 for a stool and 2 for a pencil). The numbers in the lines are separated by single spaces.\n\nOutput Format:\nIn the first line print a single real number with exactly one  decimal place — the minimum total price of the items, including the discounts.\n\nIn the following k lines print the descriptions of the items in the carts. In the i-th line print the description of the i-th cart as \"t b1 b2 ... bt\" (without the quotes), where t is the number of items in the i-th cart, and the sequence b1, b2, ..., bt (1 ≤ bj ≤ n) gives the indices of items to put in this cart in the optimal distribution. All indices of items in all carts should be pairwise different, each item must belong to exactly one cart. You can print the items in carts and the carts themselves in any order. The items are numbered from 1 to n in the order in which they are specified in the input.\n\nIf there are multiple optimal distributions, you are allowed to print any of them.\n\nExamples:\nExample 1:\nInput:\n3 2\n2 1\n3 2\n3 1\nOutput:\n5.5\n2 1 2\n1 3\n\nExample 2:\nInput:\n4 3\n4 1\n1 2\n2 2\n3 2\nOutput:\n8.0\n1 1\n2 4 2\n1 3\n\nNote:\nIn the first sample case the first cart should contain the 1st and 2nd items, and the second cart should contain the 3rd item. This way each cart has a stool and each cart has a 50% discount for the cheapest item. The total price of all items will be: 2·0.5 + (3 + 3·0.5) = 1 + 4.5 = 5.5.",
    "examples": [
      {
        "input": "3 2\n2 1\n3 2\n3 1",
        "output": "5.5\n2 1 2\n1 3"
      },
      {
        "input": "4 3\n4 1\n1 2\n2 2\n3 2",
        "output": "8.0\n1 1\n2 4 2\n1 3"
      }
    ],
    "solution": "n, k = list(map(int, input().split()))\n\np = [[], []]\n\nfor i in range(1, n + 1):\n\n    c, t = map(int, input().split())\n\n    p[t > 1].append((c, i))\n\nif k > len(p[0]):\n\n    l = k - len(p[0]) - 1\n\n    print(sum(c for c, i in p[0]) / 2 + sum(c for c, i in p[1]))\n\n    print('\\n'.join('1 ' + str(i) for c, i in p[0]))\n\n    print('\\n'.join('1 ' + str(i) for c, i in p[1][: l]))\n\n    print(len(p[1]) - l, ' '.join(str(i) for c, i in p[1][l: ]))\n\nelse:\n\n    p[1].sort()\n\n    p[0].sort(reverse = True)\n\n    print(sum(c for c, i in p[0][: k - 1]) / 2 + sum(c for c, i in p[0][k - 1: ]) + sum(c for c, i in p[1]) - min(c for c, i in p[1] + p[0][k - 1: ]) / 2)\n\n    print('\\n'.join('1 ' + str(i) for c, i in p[0][: k - 1]))\n\n    print(n - k + 1, ' '.join(str(i) for c, i in p[0][k - 1:]), ' '.join(str(i) for c, i in p[1]))\n\n\n\n# Made By Mostafa_Khaled",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "49/A",
    "problem": "Title: Sleuth\n\nVasya plays the sleuth with his friends. The rules of the game are as follows: those who play for the first time, that is Vasya is the sleuth, he should investigate a \"crime\" and find out what is happening. He can ask any questions whatsoever that can be answered with \"Yes\" or \"No\". All the rest agree beforehand to answer the questions like that: if the question’s last letter is a vowel, they answer \"Yes\" and if the last letter is a consonant, they answer \"No\". Of course, the sleuth knows nothing about it and his task is to understand that.\n\nUnfortunately, Vasya is not very smart. After 5 hours of endless stupid questions everybody except Vasya got bored. That’s why Vasya’s friends ask you to write a program that would give answers instead of them.\n\nThe English alphabet vowels are: A, E, I, O, U, Y\n\nThe English alphabet consonants are: B, C, D, F, G, H, J, K, L, M, N, P, Q, R, S, T, V, W, X, Z\n\nInput Format:\nThe single line contains a question represented by a non-empty line consisting of large and small Latin letters, spaces and a question mark. The line length does not exceed 100. It is guaranteed that the question mark occurs exactly once in the line — as the last symbol and that the line contains at least one letter.\n\nOutput Format:\nPrint answer for the question in a single line: YES if the answer is \"Yes\", NO if the answer is \"No\".\n\nRemember that in the reply to the question the last letter, not the last character counts. I. e. the spaces and the question mark do not count as letters.\n\nExamples:\nExample 1:\nInput:\nIs it a melon?\nOutput:\nNO\n\nExample 2:\nInput:\nIs it an apple?\nOutput:\nYES\n\nExample 3:\nInput:\nIs     it a banana ?\nOutput:\nYES\n\nExample 4:\nInput:\nIs   it an apple  and a  banana   simultaneouSLY?\nOutput:\nYES",
    "examples": [
      {
        "input": "Is it a melon?",
        "output": "NO"
      },
      {
        "input": "Is it an apple?",
        "output": "YES"
      },
      {
        "input": "Is     it a banana ?",
        "output": "YES"
      },
      {
        "input": "Is   it an apple  and a  banana   simultaneouSLY?",
        "output": "YES"
      }
    ],
    "solution": "n = input().lower()\r\nx = [97, 101, 105, 111, 117, 121]\r\ni = len(n) - 1\r\n\r\nwhile i+1:\r\n    on = ord(n[i])\r\n    if on in range(97, 123):\r\n        if on in x:\r\n            print('YES')\r\n        else:\r\n            print('NO')\r\n        break\r\n    i -= 1\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "80/B",
    "problem": "Title: Depression\n\nDo you remember a kind cartoon \"Beauty and the Beast\"? No, no, there was no firing from machine guns or radiation mutants time-travels!\n\nThere was a beauty named Belle. Once she had violated the Beast's order and visited the West Wing. After that she was banished from the castle...\n\nEverybody was upset. The beautiful Belle was upset, so was the Beast, so was Lumiere the candlestick. But the worst thing was that Cogsworth was upset. Cogsworth is not a human, but is the mantel clock, which was often used as an alarm clock.\n\nDue to Cogsworth's frustration all the inhabitants of the castle were in trouble: now they could not determine when it was time to drink morning tea, and when it was time for an evening stroll.\n\nFortunately, deep in the basement are lying digital clock showing the time in the format HH:MM. Now the residents of the castle face a difficult task. They should turn Cogsworth's hour and minute mustache hands in such a way, that Cogsworth began to show the correct time. Moreover they need to find turn angles in degrees for each mustache hands. The initial time showed by Cogsworth is 12:00.\n\nYou can only rotate the hands forward, that is, as is shown in the picture:\n\nAs since there are many ways too select such angles because of full rotations, choose the smallest angles in the right (non-negative) direction.\n\nNote that Cogsworth's hour and minute mustache hands move evenly and continuously. Hands are moving independently, so when turning one hand the other hand remains standing still.\n\nInput Format:\nThe only line of input contains current time according to the digital clock, formatted as HH:MM (00 ≤ HH ≤ 23, 00 ≤ MM ≤ 59). The mantel clock initially shows 12:00.\n\nPretests contain times of the beginning of some morning TV programs of the Channel One Russia.\n\nOutput Format:\nPrint two numbers x and y — the angles of turning the hour and minute hands, respectively (0 ≤ x, y < 360). The absolute or relative error in the answer should not exceed 10 - 9.\n\nExamples:\nExample 1:\nInput:\n12:00\nOutput:\n0 0\n\nExample 2:\nInput:\n04:30\nOutput:\n135 180\n\nExample 3:\nInput:\n08:17\nOutput:\n248.5 102\n\nNote:\nA note to the second example: the hour hand will be positioned exactly in the middle, between 4 and 5.",
    "examples": [
      {
        "input": "12:00",
        "output": "0 0"
      },
      {
        "input": "04:30",
        "output": "135 180"
      },
      {
        "input": "08:17",
        "output": "248.5 102"
      }
    ],
    "solution": "s=input()\r\n\r\nh=int(s[:2])\r\nm=int(s[3:])\r\nif h>=12:\r\n    h=h%12\r\nm1=6*m\r\nh1=30*h+(1/12)*m1\r\nprint(h1,m1)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "628/C",
    "problem": "Title: Bear and String Distance\n\nLimak is a little polar bear. He likes nice strings — strings of length n, consisting of lowercase English letters only.\n\nThe distance between two letters is defined as the difference between their positions in the alphabet. For example, $$\\operatorname{dist}(c,e)=\\operatorname{dist}(e,c)=2$$, and $$\\operatorname{dist}(a,z)=\\operatorname{dist}(z,a)=25$$.\n\nAlso, the distance between two nice strings is defined as the sum of distances of corresponding letters. For example, $$\\operatorname{dist}(af,db)=\\operatorname{dist}(a,d)+\\operatorname{dist}(f,b)=3+4=7$$, and $$\\operatorname{dist}(\\text{bear}, \\text{roar}) = 16 + 10 + 0 + 0 = 26$$.\n\nLimak gives you a nice string s and an integer k. He challenges you to find any nice string s' that $$\\text{dist}(s, s') = k$$. Find any s' satisfying the given conditions, or print \"-1\" if it's impossible to do so.\n\nAs input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use gets/scanf/printf instead of getline/cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 105, 0 ≤ k ≤ 106).\n\nThe second line contains a string s of length n, consisting of lowercase English letters.\n\nOutput Format:\nIf there is no string satisfying the given conditions then print \"-1\" (without the quotes).\n\nOtherwise, print any nice string s' that $$\\text{dist}(s, s') = k$$.\n\nExamples:\nExample 1:\nInput:\n4 26\nbear\nOutput:\nroar\n\nExample 2:\nInput:\n2 7\naf\nOutput:\ndb\n\nExample 3:\nInput:\n3 1000\nhey\nOutput:\n-1",
    "examples": [
      {
        "input": "4 26\nbear",
        "output": "roar"
      },
      {
        "input": "2 7\naf",
        "output": "db"
      },
      {
        "input": "3 1000\nhey",
        "output": "-1"
      }
    ],
    "solution": "n, k = map(int, input().split())\r\ns = input()\r\nans = ''\r\nfor j in range(n):\r\n    a = ord(s[j]) - 97\r\n    z = 25 - a\r\n    if a > z:\r\n        v = min(a, k)\r\n        ans += chr(ord(s[j]) - v)\r\n        k -= v\r\n    else:\r\n        v = min(z, k)\r\n        ans += chr(ord(s[j]) + v)\r\n        k -= v\r\nprint(ans if k == 0 else -1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "749/A",
    "problem": "Title: Bachgold Problem\n\nBachgold problem is very easy to formulate. Given a positive integer n represent it as a sum of maximum possible number of prime numbers. One can prove that such representation exists for any integer greater than 1.\n\nRecall that integer k is called prime if it is greater than 1 and has exactly two positive integer divisors — 1 and k.\n\nInput Format:\nThe only line of the input contains a single integer n (2 ≤ n ≤ 100 000).\n\nOutput Format:\nThe first line of the output contains a single integer k — maximum possible number of primes in representation.\n\nThe second line should contain k primes with their sum equal to n. You can print them in any order. If there are several optimal solution, print any of them.\n\nExamples:\nExample 1:\nInput:\n5\nOutput:\n2\n2 3\n\nExample 2:\nInput:\n6\nOutput:\n3\n2 2 2",
    "examples": [
      {
        "input": "5",
        "output": "2\n2 3"
      },
      {
        "input": "6",
        "output": "3\n2 2 2"
      }
    ],
    "solution": "def main():\r\n    a = int(input())\r\n    b = [2] * (a // 2)\r\n    print(a // 2)\r\n    if a % 2  != 0:\r\n        b[-1] = 3\r\n        \r\n\r\n    print(*b)\r\n        \r\nmain()",
    "explanation": "We need represent integer number N (1 < N) as a sum of maximum possible number of prime numbers, they don’t have to be different.\nIf N is even number, we can represent it as sum of only 2 - minimal prime number. It is minimal prime number, so number of primes in sum is maximal in this case.\nIf N is odd number, we can use representing of N - 1 as sum with only 2 and replace last summand from 2 to 3.\nUsing of any prime P > 3 as summand is not optimal, because it can be replaced by more than one 2 and 3."
  },
  {
    "id": "13/B",
    "problem": "Title: Letter A\n\nLittle Petya learns how to write. The teacher gave pupils the task to write the letter A on the sheet of paper. It is required to check whether Petya really had written the letter A.\n\nYou are given three segments on the plane. They form the letter A if the following conditions hold:\n\n- Two segments have common endpoint (lets call these segments first and second), while the third segment connects two points on the different segments.\n- The angle between the first and the second segments is greater than 0 and do not exceed 90 degrees.\n- The third segment divides each of the first two segments in proportion not less than 1 / 4 (i.e. the ratio of the length of the shortest part to the length of the longest part is not less than 1 / 4).\n\nInput Format:\nThe first line contains one integer t (1 ≤ t ≤ 10000) — the number of test cases to solve. Each case consists of three lines. Each of these three lines contains four space-separated integers — coordinates of the endpoints of one of the segments. All coordinates do not exceed 108 by absolute value. All segments have positive length.\n\nOutput Format:\nOutput one line for each test case. Print «YES» (without quotes), if the segments form the letter A and «NO» otherwise.\n\nExamples:\nExample 1:\nInput:\n3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 0 0 5\n0 5 2 -1\n1 2 0 1\nOutput:\nYES\nNO\nYES",
    "examples": [
      {
        "input": "3\n4 4 6 0\n4 1 5 2\n4 0 4 4\n0 0 0 6\n0 6 2 -4\n1 1 0 1\n0 0 0 5\n0 5 2 -1\n1 2 0 1",
        "output": "YES\nNO\nYES"
      }
    ],
    "solution": "__author__ = 'Darren'\r\n\r\n\r\ndef solve():\r\n    t = int(input())\r\n    while t:\r\n        run()\r\n        t -= 1\r\n\r\n\r\ndef run():\r\n    def check_condition_1():\r\n        record = {}\r\n        common, first, second = None, -1, -1\r\n        found = False\r\n        for i in range(3):\r\n            for j in range(2):\r\n                if segments[i][j] in record:\r\n                    if found:\r\n                        return False\r\n                    found = True\r\n                    common = segments[i][j]\r\n                    first, second = record[segments[i][j]], i\r\n                else:\r\n                    record[segments[i][j]] = i\r\n        if not found:\r\n            return False\r\n\r\n        segments[0], segments[first] = segments[first], segments[0]\r\n        segments[1], segments[second] = segments[second], segments[1]\r\n        if common != segments[0][0]:\r\n            segments[0][0], segments[0][1] = segments[0][1], segments[0][0]\r\n        if common != segments[1][0]:\r\n            segments[1][0], segments[1][1] = segments[1][1], segments[1][0]\r\n\r\n        nonlocal vector1, vector2, vector3, vector4\r\n        vector1 = Vector2D(segments[0][0], segments[0][1])\r\n        vector2 = Vector2D(segments[1][0], segments[1][1])\r\n        vector3 = Vector2D(segments[0][0], segments[2][0])\r\n        vector4 = Vector2D(segments[1][0], segments[2][1])\r\n        if vector1.parallel(vector3):\r\n            return vector2.parallel(vector4)\r\n        else:\r\n            vector3 = Vector2D(segments[0][0], segments[2][1])\r\n            vector4 = Vector2D(segments[1][0], segments[2][0])\r\n            return vector1.parallel(vector3) and vector2.parallel(vector4)\r\n\r\n    def check_condition_2():\r\n        return vector1.acute_or_perpendicular(vector2)\r\n\r\n    def check_condition_3():\r\n        return (0.2 <= vector1.dot_product(vector3) / vector1.distance_square() <= 0.8 and\r\n                0.2 <= vector2.dot_product(vector4) / vector2.distance_square() <= 0.8)\r\n\r\n    segments = []\r\n    for _i in range(3):\r\n        temp = [int(x) for x in input().split()]\r\n        segments.append([Point2D(temp[0], temp[1]), Point2D(temp[2], temp[3])])\r\n    vector1, vector2, vector3, vector4 = None, None, None, None\r\n    if check_condition_1() and check_condition_2() and check_condition_3():\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n\r\n\r\nclass Point2D:\r\n    def __init__(self, x, y):\r\n        self.x = x\r\n        self.y = y\r\n\r\n    def __eq__(self, other):\r\n        return self.x == other.x and self.y == other.y\r\n\r\n    def __ne__(self, other):\r\n        return self.x != other.x or self.y != other.y\r\n\r\n    def __hash__(self):\r\n        return self.x + self.y * 31\r\n\r\n\r\nclass Vector2D:\r\n    def __init__(self, p1, p2):\r\n        self.x = p2.x - p1.x\r\n        self.y = p2.y - p1.y\r\n\r\n    def distance_square(self):\r\n        return self.x ** 2 + self.y ** 2\r\n\r\n    def __sub__(self, other):\r\n        return Vector2D(self.x - other.x, self.y - other.y)\r\n\r\n    def dot_product(self, other):\r\n        return self.x * other.x + self.y * other.y\r\n\r\n    def cross_product(self, other):\r\n        return self.x * other.y - self.y * other.x\r\n\r\n    def parallel(self, other):\r\n        return self.cross_product(other) == 0\r\n\r\n    def acute_or_perpendicular(self, other):\r\n        return self.dot_product(other) >= 0 and not self.parallel(other)\r\n\r\n\r\nif __name__ == '__main__':\r\n    solve()",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "291/B",
    "problem": "Title: Command Line Arguments\n\nThe problem describes the properties of a command line. The description somehow resembles the one you usually see in real operating systems. However, there are differences in the behavior. Please make sure you've read the statement attentively and use it as a formal document.\n\nIn the Pindows operating system a strings are the lexemes of the command line — the first of them is understood as the name of the program to run and the following lexemes are its arguments. For example, as we execute the command \" run.exe one, two . \", we give four lexemes to the Pindows command line: \"run.exe\", \"one,\", \"two\", \".\". More formally, if we run a command that can be represented as string s (that has no quotes), then the command line lexemes are maximal by inclusion substrings of string s that contain no spaces.\n\nTo send a string with spaces or an empty string as a command line lexeme, we can use double quotes. The block of characters that should be considered as one lexeme goes inside the quotes. Embedded quotes are prohibited — that is, for each occurrence of character \"\"\" we should be able to say clearly that the quotes are opening or closing. For example, as we run the command \"\"run.exe o\" \"\" \" ne, \" two . \" \" \", we give six lexemes to the Pindows command line: \"run.exe o\", \"\" (an empty string), \" ne, \", \"two\", \".\", \" \" (a single space).\n\nIt is guaranteed that each lexeme of the command line is either surrounded by spaces on both sides or touches the corresponding command border. One of its consequences is: the opening brackets are either the first character of the string or there is a space to the left of them.\n\nYou have a string that consists of uppercase and lowercase English letters, digits, characters \".,?!\"\" and spaces. It is guaranteed that this string is a correct OS Pindows command line string. Print all lexemes of this command line string. Consider the character \"\"\" to be used only in order to denote a single block of characters into one command line lexeme. In particular, the consequence is that the given string has got an even number of such characters.\n\nInput Format:\nThe single line contains a non-empty string s. String s consists of at most 105 characters. Each character is either an uppercase or a lowercase English letter, or a digit, or one of the \".,?!\"\" signs, or a space.\n\nIt is guaranteed that the given string is some correct command line string of the OS Pindows. It is guaranteed that the given command line string contains at least one lexeme.\n\nOutput Format:\nIn the first line print the first lexeme, in the second line print the second one and so on. To make the output clearer, print the \"<\" (less) character to the left of your lexemes and the \">\" (more) character to the right. Print the lexemes in the order in which they occur in the command.\n\nPlease, follow the given output format strictly. For more clarifications on the output format see the test samples.\n\nExamples:\nExample 1:\nInput:\n\"RUn.exe O\" \"\" \"   2ne, \" two! . \" \"\nOutput:\n<RUn.exe O>\n<>\n<   2ne, >\n<two!>\n<.>\n< >\n\nExample 2:\nInput:\nfirstarg   second   \"\"\nOutput:\n<firstarg>\n<second>\n<>",
    "examples": [
      {
        "input": "\"RUn.exe O\" \"\" \"   2ne, \" two! . \" \"",
        "output": "<RUn.exe O>\n<>\n<   2ne, >\n<two!>\n<.>\n< >"
      },
      {
        "input": "firstarg   second   \"\"",
        "output": "<firstarg>\n<second>\n<>"
      }
    ],
    "solution": "def main():\r\n    string = input()\r\n\r\n    answer_arr = []\r\n    temp_string = \"\"\r\n    open_quote = False\r\n    for character in string:\r\n        if character == '\"':\r\n            if open_quote:\r\n                open_quote = False\r\n                answer_arr.append(temp_string)\r\n                temp_string = \"\"\r\n            else:\r\n                open_quote = True\r\n        else:\r\n            if open_quote:\r\n                temp_string += character\r\n            else:\r\n                if not character == \" \":\r\n                    temp_string += character\r\n                else:\r\n                    if temp_string != \"\":\r\n                        answer_arr.append(temp_string)\r\n                        temp_string = \"\"\r\n\r\n    if temp_string != \"\":\r\n        answer_arr.append(temp_string)\r\n\r\n    for element in answer_arr:\r\n        print(f\"<{element}>\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "46/B",
    "problem": "Title: T-shirts from Sponsor\n\nOne day a well-known sponsor of a well-known contest decided to give every participant of the contest a T-shirt as a present. A natural problem occurred: on the one hand, it is not clear how many T-shirts of what sizes should be ordered, and on the other hand, one doesn't want to order too many T-shirts (and we do not exactly paper the walls with the oversupply). After considerable brain racking and some pre-estimating, the sponsor representatives ordered a certain number of T-shirts of sizes S, M, L, XL and XXL. The T-shirts turned out to bring good luck, that's why on the contest day there built up a line of K participants willing to get one. Every contestant is characterized by his/her desired T-shirt size (so it happens that for all the participants it is also one of the sizes S, M, L, XL and XXL). The participants come up to get a T-shirt one by one and try to choose the most suitable one, choosing it like this. If there is still a T-shirt of the optimal size left, that he/she takes it without further ado. Otherwise the contestant would prefer to choose a T-shirt with the size as close to the optimal one as possible (the distance between neighboring sizes is considered equal to one). If the variant of choice is not unique, the contestant will take a T-shirt of a bigger size (in case he/she grows more). For example, for a person whose optimal size is L the preference list looks like this: L, XL, M, XXL, S. Using the data on how many T-shirts of every size had been ordered by the organizers, on the size of contestants in the line determine who got a T-shirt of what size.\n\nInput Format:\nThe first line contains five non-negative integers NS, NM, NL, NXL, NXXL not exceeding 1000 which represent the number of T-shirts of the corresponding sizes. The second line contains an integer K (1 ≤ K ≤ 1000) which represents the number of participants. The next K lines contain the optimal T-shirt sizes for the contestants. The sizes are given in the order in which the participants stand in the line. It is guaranteed that NS + NM + NL + NXL + NXXL ≥ K.\n\nOutput Format:\nFor each contestant, print a line containing the size of the T-shirt he/she got.\n\nExamples:\nExample 1:\nInput:\n1 0 2 0 1\n3\nXL\nXXL\nM\nOutput:\nXXL\nL\nL",
    "examples": [
      {
        "input": "1 0 2 0 1\n3\nXL\nXXL\nM",
        "output": "XXL\nL\nL"
      }
    ],
    "solution": "l = list(map(int,input().split()))\r\nk = int(input())\r\nd = {\"S\":0,\"M\":1,\"L\":2,\"XL\":3,\"XXL\":4}\r\nd1 = {0:\"S\",1:\"M\",2:\"L\",3:\"XL\",4:\"XXL\"}\r\npref = [[0,1,2,3,4],[1,2,0,3,4],[2,3,1,4,0],[3,4,2,1,0],[4,3,2,1,0]]\r\nfor i in range(k):\r\n    s = input()\r\n    x = d[s]\r\n    for j in pref[x]:\r\n        if(l[j]>0):\r\n            l[j]-=1\r\n            print(d1[j])\r\n            break",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "225/B",
    "problem": "Title: Well-known Numbers\n\nNumbers k-bonacci (k is integer, k > 1) are a generalization of Fibonacci numbers and are determined as follows:\n\n- F(k, n) = 0, for integer n, 1 ≤ n < k;\n- F(k, k) = 1;\n- F(k, n) = F(k, n - 1) + F(k, n - 2) + ... + F(k, n - k), for integer n, n > k.\n\nNote that we determine the k-bonacci numbers, F(k, n), only for integer values of n and k.\n\nYou've got a number s, represent it as a sum of several (at least two) distinct k-bonacci numbers.\n\nInput Format:\nThe first line contains two integers s and k (1 ≤ s, k ≤ 109; k > 1).\n\nOutput Format:\nIn the first line print an integer m (m ≥ 2) that shows how many numbers are in the found representation. In the second line print m distinct integers a1, a2, ..., am. Each printed integer should be a k-bonacci number. The sum of printed integers must equal s.\n\nIt is guaranteed that the answer exists. If there are several possible answers, print any of them.\n\nExamples:\nExample 1:\nInput:\n5 2\nOutput:\n3\n0 2 3\n\nExample 2:\nInput:\n21 5\nOutput:\n3\n4 1 16",
    "examples": [
      {
        "input": "5 2",
        "output": "3\n0 2 3"
      },
      {
        "input": "21 5",
        "output": "3\n4 1 16"
      }
    ],
    "solution": "s,k=map(int,input().split())\r\nf=[0]\r\nf.append(1)\r\nwhile(True):\r\n    cur=sum(f[-k:])\r\n    if cur>s:\r\n        break\r\n    f.append(cur)\r\nf=list(set(f))\r\nf.sort()\r\nans=[]\r\ni=len(f)-1\r\nwhile(s and i>0):\r\n    if f[i]<=s:\r\n        s-=f[i]\r\n        ans.append(f[i])\r\n    i-=1\r\nprint(len(ans)+1)\r\nprint(*(ans+[0]))\r\n\r\n#Copied\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1005/A",
    "problem": "Title: Tanya and Stairways\n\nLittle girl Tanya climbs the stairs inside a multi-storey building. Every time Tanya climbs a stairway, she starts counting steps from $$$1$$$ to the number of steps in this stairway. She speaks every number aloud. For example, if she climbs two stairways, the first of which contains $$$3$$$ steps, and the second contains $$$4$$$ steps, she will pronounce the numbers $$$1, 2, 3, 1, 2, 3, 4$$$.\n\nYou are given all the numbers pronounced by Tanya. How many stairways did she climb? Also, output the number of steps in each stairway.\n\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.\n\nInput Format:\nThe first line contains $$$n$$$ ($$$1 \\le n \\le 1000$$$) — the total number of numbers pronounced by Tanya.\n\nThe second line contains integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 1000$$$) — all the numbers Tanya pronounced while climbing the stairs, in order from the first to the last pronounced number. Passing a stairway with $$$x$$$ steps, she will pronounce the numbers $$$1, 2, \\dots, x$$$ in that order.\n\nThe given sequence will be a valid sequence that Tanya could have pronounced when climbing one or more stairways.\n\nOutput Format:\nIn the first line, output $$$t$$$ — the number of stairways that Tanya climbed. In the second line, output $$$t$$$ numbers — the number of steps in each stairway she climbed. Write the numbers in the correct order of passage of the stairways.\n\nExamples:\nExample 1:\nInput:\n7\n1 2 3 1 2 3 4\nOutput:\n2\n3 4\n\nExample 2:\nInput:\n4\n1 1 1 1\nOutput:\n4\n1 1 1 1\n\nExample 3:\nInput:\n5\n1 2 3 4 5\nOutput:\n1\n5\n\nExample 4:\nInput:\n5\n1 2 1 2 1\nOutput:\n3\n2 2 1",
    "examples": [
      {
        "input": "7\n1 2 3 1 2 3 4",
        "output": "2\n3 4"
      },
      {
        "input": "4\n1 1 1 1",
        "output": "4\n1 1 1 1"
      },
      {
        "input": "5\n1 2 3 4 5",
        "output": "1\n5"
      },
      {
        "input": "5\n1 2 1 2 1",
        "output": "3\n2 2 1"
      }
    ],
    "solution": "n=int(input())\r\na=input()\r\na1=a.split()\r\nfor i in range(n): a1[i]=int(a1[i])\r\ns=0\r\nfor i in range(n):\r\n    if a1[i]==1: s=s+1\r\nprint(s)\r\nfor i in range(n-1):\r\n    if a1[i]>=a1[i+1]: print(a1[i],end=\" \")\r\nprint(a1[-1])\r\n    \r\n",
    "explanation": "The answer contains such elements $$$a_i$$$ that $$$a_{i+1}=1$$$. Also add to the answer the last element $$$a_n$$$."
  },
  {
    "id": "632/C",
    "problem": "Title: The Smallest String Concatenation\n\nYou're given a list of n strings a1, a2, ..., an. You'd like to concatenate them together in some order such that the resulting string would be lexicographically smallest.\n\nGiven the list of strings, output the lexicographically smallest concatenation.\n\nInput Format:\nThe first line contains integer n — the number of strings (1 ≤ n ≤ 5·104).\n\nEach of the next n lines contains one string ai (1 ≤ |ai| ≤ 50) consisting of only lowercase English letters. The sum of string lengths will not exceed 5·104.\n\nOutput Format:\nPrint the only string a — the lexicographically smallest string concatenation.\n\nExamples:\nExample 1:\nInput:\n4\nabba\nabacaba\nbcd\ner\nOutput:\nabacabaabbabcder\n\nExample 2:\nInput:\n5\nx\nxx\nxxa\nxxaa\nxxaaa\nOutput:\nxxaaaxxaaxxaxxx\n\nExample 3:\nInput:\n3\nc\ncb\ncba\nOutput:\ncbacbc",
    "examples": [
      {
        "input": "4\nabba\nabacaba\nbcd\ner",
        "output": "abacabaabbabcder"
      },
      {
        "input": "5\nx\nxx\nxxa\nxxaa\nxxaaa",
        "output": "xxaaaxxaaxxaxxx"
      },
      {
        "input": "3\nc\ncb\ncba",
        "output": "cbacbc"
      }
    ],
    "solution": "from functools import cmp_to_key\ndef cmp(x,y):\n    if x+y>y+x:\n        return 1\n    else:\n        return -1\na=[]\nn=int(input())\nfor i in range(n):\n\ta.append(input())\nans=\"\"\nfor s in sorted(a,key=cmp_to_key(cmp)):\n\tans+=s\nprint(ans)\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "234/B",
    "problem": "Title: Reading\n\nVasya is going to the Olympics in the city Ntown by train. The boy wants to read the textbook to prepare for the Olympics. He counted that he needed k hours for this. He also found that the light in the train changes every hour. The light is measured on a scale from 0 to 100, where 0 is very dark, and 100 is very light.\n\nVasya has a train lighting schedule for all n hours of the trip — n numbers from 0 to 100 each (the light level in the first hour, the second hour and so on). During each of those hours he will either read the whole time, or not read at all. He wants to choose k hours to read a book, not necessarily consecutive, so that the minimum level of light among the selected hours were maximum. Vasya is very excited before the upcoming contest, help him choose reading hours.\n\nInput Format:\nThe first input line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n) — the number of hours on the train and the number of hours to read, correspondingly. The second line contains n space-separated integers ai (0 ≤ ai ≤ 100), ai is the light level at the i-th hour.\n\nOutput Format:\nIn the first output line print the minimum light level Vasya will read at. In the second line print k distinct space-separated integers b1, b2, ..., bk, — the indexes of hours Vasya will read at (1 ≤ bi ≤ n). The hours are indexed starting from 1. If there are multiple optimal solutions, print any of them. Print the numbers bi in an arbitrary order.\n\nExamples:\nExample 1:\nInput:\n5 3\n20 10 30 40 10\nOutput:\n20\n1 3 4\n\nExample 2:\nInput:\n6 5\n90 20 35 40 60 100\nOutput:\n35\n1 3 4 5 6\n\nNote:\nIn the first sample Vasya should read at the first hour (light 20), third hour (light 30) and at the fourth hour (light 40). The minimum light Vasya will have to read at is 20.",
    "examples": [
      {
        "input": "5 3\n20 10 30 40 10",
        "output": "20\n1 3 4"
      },
      {
        "input": "6 5\n90 20 35 40 60 100",
        "output": "35\n1 3 4 5 6"
      }
    ],
    "solution": "F=open('input.txt','r')\nW=open('output.txt','w')\nI=lambda:map(int,F.readline().split())\nn,k=I()\na=sorted(zip(I(),range(n)))[::-1]\nW.write(str(a[k-1][0])+'\\n'+' '.join(map(str,[y+1 for x,y in a[:k]])))\nW.close()\n\t  \t \t\t\t\t \t \t\t \t\t  \t  \t\t \t  \t\t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "400/B",
    "problem": "Title: Inna and New Matrix of Candies\n\nInna likes sweets and a game called the \"Candy Matrix\". Today, she came up with the new game \"Candy Matrix 2: Reload\".\n\nThe field for the new game is a rectangle table of size n × m. Each line of the table contains one cell with a dwarf figurine, one cell with a candy, the other cells of the line are empty. The game lasts for several moves. During each move the player should choose all lines of the matrix where dwarf is not on the cell with candy and shout \"Let's go!\". After that, all the dwarves from the chosen lines start to simultaneously move to the right. During each second, each dwarf goes to the adjacent cell that is located to the right of its current cell. The movement continues until one of the following events occurs:\n\n- some dwarf in one of the chosen lines is located in the rightmost cell of his row;\n- some dwarf in the chosen lines is located in the cell with the candy.\n\nThe point of the game is to transport all the dwarves to the candy cells.\n\nInna is fabulous, as she came up with such an interesting game. But what about you? Your task is to play this game optimally well. Specifically, you should say by the given game field what minimum number of moves the player needs to reach the goal of the game.\n\nInput Format:\nThe first line of the input contains two integers n and m (1 ≤ n ≤ 1000; 2 ≤ m ≤ 1000).\n\nNext n lines each contain m characters — the game field for the \"Candy Martix 2: Reload\". Character \"*\" represents an empty cell of the field, character \"G\" represents a dwarf and character \"S\" represents a candy. The matrix doesn't contain other characters. It is guaranteed that each line contains exactly one character \"G\" and one character \"S\".\n\nOutput Format:\nIn a single line print a single integer — either the minimum number of moves needed to achieve the aim of the game, or -1, if the aim cannot be achieved on the given game field.\n\nExamples:\nExample 1:\nInput:\n3 4\n*G*S\nG**S\n*G*S\nOutput:\n2\n\nExample 2:\nInput:\n1 3\nS*G\nOutput:\n-1",
    "examples": [
      {
        "input": "3 4\n*G*S\nG**S\n*G*S",
        "output": "2"
      },
      {
        "input": "1 3\nS*G",
        "output": "-1"
      }
    ],
    "solution": "temp=list(map(int,input().split()))\r\nn=temp[0]\r\nm=temp[1]\r\narr=[]\r\n\r\ndef combo(arr,n,c):\r\n    arr1=[x for x in arr if x!=0]\r\n    if len(arr1)==0:\r\n        return c\r\n    else:\r\n        t=min(arr1)\r\n    if max(arr)==0:\r\n        return c\r\n    else:\r\n        for i in range(n):\r\n            if arr[i]!=0:\r\n                arr[i]=arr[i]-t\r\n        c+=1\r\n        return combo(arr,n,c)\r\n\r\nfor i in range(n):\r\n    str1=input()\r\n    a=str1.find('S')\r\n    b=str1.find('G')\r\n    arr.append(a-b)\r\nif min(arr)<0:\r\n    print(-1)\r\nelse:\r\n    print(combo(arr,n,0))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "69/B",
    "problem": "Title: Bets\n\nIn Chelyabinsk lives a much respected businessman Nikita with a strange nickname \"Boss\". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.\n\nTo begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:\n\n- li — the number of the starting section,\n- ri — the number of the finishing section (li ≤ ri),\n- ti — the time a biathlete needs to complete an section of the path,\n- ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.\n\nThe i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.\n\nIn each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.\n\nWe should also add that Nikita can bet on each section and on any contestant running in this section.\n\nHelp the friends find the maximum possible profit.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).\n\nOutput Format:\nPrint a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.\n\nExamples:\nExample 1:\nInput:\n4 4\n1 4 20 5\n1 3 21 10\n3 3 4 30\n3 4 4 20\nOutput:\n60\n\nExample 2:\nInput:\n8 4\n1 5 24 10\n2 4 6 15\n4 6 30 50\n6 7 4 20\nOutput:\n105\n\nNote:\nIn the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.\n\nIn the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.",
    "examples": [
      {
        "input": "4 4\n1 4 20 5\n1 3 21 10\n3 3 4 30\n3 4 4 20",
        "output": "60"
      },
      {
        "input": "8 4\n1 5 24 10\n2 4 6 15\n4 6 30 50\n6 7 4 20",
        "output": "105"
      }
    ],
    "solution": "n, m = map(int, input().split())\r\ntab = []\r\nfor _ in range(m):\r\n  l = list(map(int, input().split()))\r\n  tab.append(l)\r\n\r\np = 0\r\nfor i in range(1, n+1):\r\n  s = 0\r\n  t = 1001\r\n  for j in range(m):\r\n    if i in range(tab[j][0], tab[j][1]+1):\r\n      if tab[j][2] < t:\r\n        s = tab[j][3]\r\n        t = tab[j][2]\r\n  p += s\r\nprint(p)  ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "462/B",
    "problem": "Title: Appleman and Card Game\n\nAppleman has n cards. Each card has an uppercase letter written on it. Toastman must choose k cards from Appleman's cards. Then Appleman should give Toastman some coins depending on the chosen cards. Formally, for each Toastman's card i you should calculate how much Toastman's cards have the letter equal to letter on ith, then sum up all these quantities, such a number of coins Appleman should give to Toastman.\n\nGiven the description of Appleman's cards. What is the maximum number of coins Toastman can get?\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The next line contains n uppercase letters without spaces — the i-th letter describes the i-th card of the Appleman.\n\nOutput Format:\nPrint a single integer – the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n15 10\nDZFDFZDFDDDDDDF\nOutput:\n82\n\nExample 2:\nInput:\n6 4\nYJSNPI\nOutput:\n4\n\nNote:\nIn the first test example Toastman can choose nine cards with letter D and one additional card with any letter. For each card with D he will get 9 coins and for the additional card he will get 1 coin.",
    "examples": [
      {
        "input": "15 10\nDZFDFZDFDDDDDDF",
        "output": "82"
      },
      {
        "input": "6 4\nYJSNPI",
        "output": "4"
      }
    ],
    "solution": "firstLine = input();\nn, k = firstLine.split();\nn = int(n);\nk = int(k);\n\ns = input();\n\nresult = 0;\ncount = [0] * 26\n\nfor i in range(0, len(s)):\n    index = ord(s[i]) - 65;\n    count[index] = count[index] + 1;\n    \ncount.sort(reverse=True)\n\n\n\nfor j in range(0, len(count)):\n\n    if(count[j] <= k):\n        result = result + (count[j]*count[j]);\n        k = k - count[j];\n        if(k==0): break\n    else:\n        result = result + (k*k);\n        break\n    \nprint(result)\n\t\t\t\t  \t \t \t \t\t   \t    \t\t \t   \t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "773/B",
    "problem": "Title: Dynamic Problem Scoring\n\nVasya and Petya take part in a Codeforces round. The round lasts for two hours and contains five problems.\n\nFor this round the dynamic problem scoring is used. If you were lucky not to participate in any Codeforces round with dynamic problem scoring, here is what it means. The maximum point value of the problem depends on the ratio of the number of participants who solved the problem to the total number of round participants. Everyone who made at least one submission is considered to be participating in the round.\n\n$$\\begin{array}{|c|c|}\n\\hline\n\\text{Solvers fraction} & \\text{Maximum point value} \\\\\n\\hline\n(1/2, 1] & 500 \\\\\n(1/4, 1/2] & 1000 \\\\\n(1/8, 1/4] & 1500 \\\\\n(1/16, 1/8] & 2000 \\\\\n(1/32, 1/16] & 2500 \\\\\n[0, 1/32] & 3000 \\\\\n\\hline\n\\end{array}$$\n\nPay attention to the range bounds. For example, if 40 people are taking part in the round, and 10 of them solve a particular problem, then the solvers fraction is equal to 1 / 4, and the problem's maximum point value is equal to 1500.\n\nIf the problem's maximum point value is equal to x, then for each whole minute passed from the beginning of the contest to the moment of the participant's correct submission, the participant loses x / 250 points. For example, if the problem's maximum point value is 2000, and the participant submits a correct solution to it 40 minutes into the round, this participant will be awarded with 2000·(1 - 40 / 250) = 1680 points for this problem.\n\nThere are n participants in the round, including Vasya and Petya. For each participant and each problem, the number of minutes which passed between the beginning of the contest and the submission of this participant to this problem is known. It's also possible that this participant made no submissions to this problem.\n\nWith two seconds until the end of the round, all participants' submissions have passed pretests, and not a single hack attempt has been made. Vasya believes that no more submissions or hack attempts will be made in the remaining two seconds, and every submission will pass the system testing.\n\nUnfortunately, Vasya is a cheater. He has registered 109 + 7 new accounts for the round. Now Vasya can submit any of his solutions from these new accounts in order to change the maximum point values of the problems. Vasya can also submit any wrong solutions to any problems. Note that Vasya can not submit correct solutions to the problems he hasn't solved.\n\nVasya seeks to score strictly more points than Petya in the current round. Vasya has already prepared the scripts which allow to obfuscate his solutions and submit them into the system from any of the new accounts in just fractions of seconds. However, Vasya doesn't want to make his cheating too obvious, so he wants to achieve his goal while making submissions from the smallest possible number of new accounts.\n\nFind the smallest number of new accounts Vasya needs in order to beat Petya (provided that Vasya's assumptions are correct), or report that Vasya can't achieve his goal.\n\nInput Format:\nThe first line contains a single integer n (2 ≤ n ≤ 120) — the number of round participants, including Vasya and Petya.\n\nEach of the next n lines contains five integers ai, 1, ai, 2..., ai, 5 ( - 1 ≤ ai, j ≤ 119) — the number of minutes passed between the beginning of the round and the submission of problem j by participant i, or -1 if participant i hasn't solved problem j.\n\nIt is guaranteed that each participant has made at least one successful submission.\n\nVasya is listed as participant number 1, Petya is listed as participant number 2, all the other participants are listed in no particular order.\n\nOutput Format:\nOutput a single integer — the number of new accounts Vasya needs to beat Petya, or -1 if Vasya can't achieve his goal.\n\nExamples:\nExample 1:\nInput:\n2\n5 15 40 70 115\n50 45 40 30 15\nOutput:\n2\n\nExample 2:\nInput:\n3\n55 80 10 -1 -1\n15 -1 79 60 -1\n42 -1 13 -1 -1\nOutput:\n3\n\nExample 3:\nInput:\n5\n119 119 119 119 119\n0 0 0 0 -1\n20 65 12 73 77\n78 112 22 23 11\n1 78 60 111 62\nOutput:\n27\n\nExample 4:\nInput:\n4\n-1 20 40 77 119\n30 10 73 50 107\n21 29 -1 64 98\n117 65 -1 -1 -1\nOutput:\n-1\n\nNote:\nIn the first example, Vasya's optimal strategy is to submit the solutions to the last three problems from two new accounts. In this case the first two problems will have the maximum point value of 1000, while the last three problems will have the maximum point value of 500. Vasya's score will be equal to 980 + 940 + 420 + 360 + 270 = 2970 points, while Petya will score just 800 + 820 + 420 + 440 + 470 = 2950 points.\n\nIn the second example, Vasya has to make a single unsuccessful submission to any problem from two new accounts, and a single successful submission to the first problem from the third new account. In this case, the maximum point values of the problems will be equal to 500, 1500, 1000, 1500, 3000. Vasya will score 2370 points, while Petya will score just 2294 points.\n\nIn the third example, Vasya can achieve his goal by submitting the solutions to the first four problems from 27 new accounts. The maximum point values of the problems will be equal to 500, 500, 500, 500, 2000. Thanks to the high cost of the fifth problem, Vasya will manage to beat Petya who solved the first four problems very quickly, but couldn't solve the fifth one.",
    "examples": [
      {
        "input": "2\n5 15 40 70 115\n50 45 40 30 15",
        "output": "2"
      },
      {
        "input": "3\n55 80 10 -1 -1\n15 -1 79 60 -1\n42 -1 13 -1 -1",
        "output": "3"
      },
      {
        "input": "5\n119 119 119 119 119\n0 0 0 0 -1\n20 65 12 73 77\n78 112 22 23 11\n1 78 60 111 62",
        "output": "27"
      },
      {
        "input": "4\n-1 20 40 77 119\n30 10 73 50 107\n21 29 -1 64 98\n117 65 -1 -1 -1",
        "output": "-1"
      }
    ],
    "solution": "def f(v, x, n):\n\tif v<0:\n\t\treturn 0\n\tfor i in range(1, 7):\n\t\tif x<<i>n or i==6:\n\t\t\treturn (250-v)*i<<1\n\nn=int(input())\na=[list(map(int, input().split())) for _ in range(n)]\nc=[sum(_[i]>=0 for _ in a) for i in range(5)]\nans=-1\nfor i in range(10000):\n\tp, q=0, 0\n\tfor j in range(5):\n\t\tif a[0][j]>a[1][j] and a[1][j]>=0:\n\t\t\tc[j]+=1\n\t\tp+=f(a[0][j], c[j], n+i)\n\t\tq+=f(a[1][j], c[j], n+i)\n\tif p>q:\n\t\tans=i\n\t\tbreak\nprint(ans)\n\n\n\t\t  \t  \t\t\t \t \t \t\t\t\t  \t   \t  \t\t\t",
    "explanation": "Dynamic problem scoring used to be used more often in Codeforces rounds, including some tournament rounds like VK Cup 2015 Finals.\nOnce you read the problem statement carefully, the problem itself isn't overly difficult.\nConsider new accounts Vasya puts into play. Correct solutions to which problems does he submit from these new accounts?\n• If Vasya hasn't solved a problem, he can't submit correct solutions to it.\n• If Vasya has solved a problem which Petya hasn't solved, then clearly Vasya wants the maximum point value of this problem to be as high as possible, thus it doesn't make sense to submit its solution from the new accounts.\n• Suppose Vasya solved the problem at minute v, Petya solved it at minute p and the problem's maximum point value is m, then Vasya's and Petya's scores for this problem are m·(1 - v / 250) and m·(1 - p / 250), respectively. Let's denote the difference between these values by d = m·(p - v) / 250. Vasya wants to maximize this value.   If p - v is positive (that is, Vasya solved the problem faster than Petya), then d is maximized when m is maximized. To maximize m, Vasya shouldn't submit correct solutions to this problem from the new accounts.  On the other hand, if p - v is negative (that is, Petya solved the problem faster than Vasya), then d is maximized when m is minimized. To minimize m, Vasya should submit correct solutions to this problem from the new accounts.  Finally, if p - v is zero (that is, Petya and Vasya solved the problem at the same moment), then d = 0 for any value of m, so it doesn't matter if Vasya submits correct solutions to this problem or not.\n• If p - v is positive (that is, Vasya solved the problem faster than Petya), then d is maximized when m is maximized. To maximize m, Vasya shouldn't submit correct solutions to this problem from the new accounts.\n• On the other hand, if p - v is negative (that is, Petya solved the problem faster than Vasya), then d is maximized when m is minimized. To minimize m, Vasya should submit correct solutions to this problem from the new accounts.\n• Finally, if p - v is zero (that is, Petya and Vasya solved the problem at the same moment), then d = 0 for any value of m, so it doesn't matter if Vasya submits correct solutions to this problem or not.\nIt follows from the above that Vasya should always do the same for all new accounts he puts into play.\nLet's iterate over x — the number of new accounts Vasya puts into play, starting from 0. Then we can determine what solutions Vasya should submit from these accounts using the reasoning above. Then we can calculate the maximum point values of the problems, and then the number of points Vasya and Petya will score. If Vasya's score is higher than Petya's score, then the answer is x, otherwise we increase x by one and continue.\nWhen do we stop? If Vasya submits solutions to a problem from the new accounts, then after putting at least n accounts into play the maximum point value of this problem will reach 500 and won't change anymore. If Vasya doesn't, then after putting at least 31n accounts into play the maximum point value of this problem will reach 3000 and won't change anymore. Therefore, if x exceeds 31n, we can stop and output -1.\nNote that we can't find the value of x using binary search due to the fact that Vasya can't submit solutions to the problems he hasn't solved. That is, more accounts do not mean more profit. For example, consider the following test case:\nIf Vasya doesn't use any new accounts, his score will be 1000, while Petya's score will be 500. If Vasya uses at least 61 accounts, both his and Petya's score will be 3000."
  },
  {
    "id": "131/B",
    "problem": "Title: Opposites Attract\n\nEverybody knows that opposites attract. That is the key principle of the \"Perfect Matching\" dating agency. The \"Perfect Matching\" matchmakers have classified each registered customer by his interests and assigned to the i-th client number ti ( - 10 ≤ ti ≤ 10). Of course, one number can be assigned to any number of customers.\n\n\"Perfect Matching\" wants to advertise its services and publish the number of opposite couples, that is, the couples who have opposite values of t. Each couple consists of exactly two clients. The customer can be included in a couple an arbitrary number of times. Help the agency and write the program that will find the sought number by the given sequence t1, t2, ..., tn. For example, if t = (1,  - 1, 1,  - 1), then any two elements ti and tj form a couple if i and j have different parity. Consequently, in this case the sought number equals 4.\n\nOf course, a client can't form a couple with him/herself.\n\nInput Format:\nThe first line of the input data contains an integer n (1 ≤ n ≤ 105) which represents the number of registered clients of the \"Couple Matching\". The second line contains a sequence of integers t1, t2, ..., tn ( - 10 ≤ ti ≤ 10), ti — is the parameter of the i-th customer that has been assigned to the customer by the result of the analysis of his interests.\n\nOutput Format:\nPrint the number of couples of customs with opposite t. The opposite number for x is number  - x (0 is opposite to itself). Couples that only differ in the clients' order are considered the same.\n\nNote that the answer to the problem can be large enough, so you must use the 64-bit integer type for calculations. Please, do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specificator.\n\nExamples:\nExample 1:\nInput:\n5\n-3 3 0 0 3\nOutput:\n3\n\nExample 2:\nInput:\n3\n0 0 0\nOutput:\n3\n\nNote:\nIn the first sample the couples of opposite clients are: (1,2), (1,5) и (3,4).\n\nIn the second sample any couple of clients is opposite.",
    "examples": [
      {
        "input": "5\n-3 3 0 0 3",
        "output": "3"
      },
      {
        "input": "3\n0 0 0",
        "output": "3"
      }
    ],
    "solution": "from collections import defaultdict\r\n\r\n\r\nn = int(input())\r\nnums = input()\r\n\r\npos = defaultdict(int)\r\nneg = defaultdict(int)\r\nzeroes = 0\r\n\r\nfor num in nums.split(\" \"):\r\n    if int(num) > 0:\r\n        pos[int(num)] += 1\r\n    elif int(num) < 0:\r\n        neg[int(num)] += 1\r\n    else:\r\n        zeroes += 1\r\n\r\n# Since 0 can be matches with any other zero, this can be achieved with the combinations formula\r\nmatches = zeroes * (zeroes - 1) // 2\r\n\r\n# Now for postitive and negative numbers\r\nfor key in pos:\r\n    matches += neg[-key] * pos[key]\r\nprint(matches)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "90/A",
    "problem": "Title: Cableway\n\nA group of university students wants to get to the top of a mountain to have a picnic there. For that they decided to use a cableway.\n\nA cableway is represented by some cablecars, hanged onto some cable stations by a cable. A cable is scrolled cyclically between the first and the last cable stations (the first of them is located at the bottom of the mountain and the last one is located at the top). As the cable moves, the cablecar attached to it move as well.\n\nThe number of cablecars is divisible by three and they are painted three colors: red, green and blue, in such manner that after each red cablecar goes a green one, after each green cablecar goes a blue one and after each blue cablecar goes a red one. Each cablecar can transport no more than two people, the cablecars arrive with the periodicity of one minute (i. e. every minute) and it takes exactly 30 minutes for a cablecar to get to the top.\n\nAll students are divided into three groups: r of them like to ascend only in the red cablecars, g of them prefer only the green ones and b of them prefer only the blue ones. A student never gets on a cablecar painted a color that he doesn't like,\n\nThe first cablecar to arrive (at the moment of time 0) is painted red. Determine the least time it will take all students to ascend to the mountain top.\n\nInput Format:\nThe first line contains three integers r, g and b (0 ≤ r, g, b ≤ 100). It is guaranteed that r + g + b > 0, it means that the group consists of at least one student.\n\nOutput Format:\nPrint a single number — the minimal time the students need for the whole group to ascend to the top of the mountain.\n\nExamples:\nExample 1:\nInput:\n1 3 2\nOutput:\n34\n\nExample 2:\nInput:\n3 2 1\nOutput:\n33\n\nNote:\nLet's analyze the first sample.\n\nAt the moment of time 0 a red cablecar comes and one student from the r group get on it and ascends to the top at the moment of time 30.\n\nAt the moment of time 1 a green cablecar arrives and two students from the g group get on it; they get to the top at the moment of time 31.\n\nAt the moment of time 2 comes the blue cablecar and two students from the b group get on it. They ascend to the top at the moment of time 32.\n\nAt the moment of time 3 a red cablecar arrives but the only student who is left doesn't like red and the cablecar leaves empty.\n\nAt the moment of time 4 a green cablecar arrives and one student from the g group gets on it. He ascends to top at the moment of time 34.\n\nThus, all the students are on the top, overall the ascension took exactly 34 minutes.",
    "examples": [
      {
        "input": "1 3 2",
        "output": "34"
      },
      {
        "input": "3 2 1",
        "output": "33"
      }
    ],
    "solution": "import math\r\n\r\nm = 0\r\np = 0\r\nfor pos, i in enumerate(map(int, input().split())):\r\n    if math.ceil(i/2) >= m:\r\n        m = math.ceil(i/2)\r\n        p = pos\r\n\r\nres = 0\r\nm -= 1\r\nwhile m > 0:\r\n    res += 3\r\n    m -= 1\r\n\r\nprint(res + p + 30)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "600/A",
    "problem": "Title: Extract Numbers\n\nYou are given string s. Let's call word any largest sequence of consecutive symbols without symbols ',' (comma) and ';' (semicolon). For example, there are four words in string \"aba,123;1a;0\": \"aba\", \"123\", \"1a\", \"0\". A word can be empty: for example, the string s=\";;\" contains three empty words separated by ';'.\n\nYou should find all words in the given string that are nonnegative INTEGER numbers without leading zeroes and build by them new string a. String a should contain all words that are numbers separating them by ',' (the order of numbers should remain the same as in the string s). By all other words you should build string b in the same way (the order of numbers should remain the same as in the string s).\n\nHere strings \"101\", \"0\" are INTEGER numbers, but \"01\" and \"1.0\" are not.\n\nFor example, for the string aba,123;1a;0 the string a would be equal to \"123,0\" and string b would be equal to \"aba,1a\".\n\nInput Format:\nThe only line of input contains the string s (1 ≤ |s| ≤ 105). The string contains only symbols '.' (ASCII 46), ',' (ASCII 44), ';' (ASCII 59), digits, lowercase and uppercase latin letters.\n\nOutput Format:\nPrint the string a to the first line and string b to the second line. Each string should be surrounded by quotes (ASCII 34).\n\nIf there are no words that are numbers print dash (ASCII 45) on the first line. If all words are numbers print dash on the second line.\n\nExamples:\nExample 1:\nInput:\naba,123;1a;0\nOutput:\n\"123,0\"\n\"aba,1a\"\n\nExample 2:\nInput:\n1;;01,a0,\nOutput:\n\"1\"\n\",01,a0,\"\n\nExample 3:\nInput:\n1\nOutput:\n\"1\"\n-\n\nExample 4:\nInput:\na\nOutput:\n-\n\"a\"\n\nNote:\nIn the second example the string s contains five words: \"1\", \"\", \"01\", \"a0\", \"\".",
    "examples": [
      {
        "input": "aba,123;1a;0",
        "output": "\"123,0\"\n\"aba,1a\""
      },
      {
        "input": "1;;01,a0,",
        "output": "\"1\"\n\",01,a0,\""
      },
      {
        "input": "1",
        "output": "\"1\"\n-"
      },
      {
        "input": "a",
        "output": "-\n\"a\""
      }
    ],
    "solution": "import re\r\n\r\nstr = input()\r\n\r\nlst = re.split('[,;]', str)\r\n\r\nans1 = []\r\nans2 = []\r\n\r\nfor s in lst:\r\n    if s.isdigit() and (s == '0' or s[0] != '0') and s[0] != '-':\r\n        ans1.append(s)\r\n    else:\r\n        ans2.append(s)\r\n\r\n\r\nif len(ans1) == 0:\r\n    print('-')\r\nelse:\r\n    print(\"\\\"\", end=\"\")\r\n    print(','.join(ans1), end=\"\")\r\n    print(\"\\\"\")\r\n\r\n\r\nif len(ans2) == 0:\r\n    print('-')\r\nelse:\r\n    print(\"\\\"\", end=\"\")\r\n    print(','.join(ans2), end=\"\")\r\n    print(\"\\\"\")\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "849/B",
    "problem": "Title: Tell Your World\n\nConnect the countless points with lines, till we reach the faraway yonder.\n\nThere are n points on a coordinate plane, the i-th of which being (i, yi).\n\nDetermine whether it's possible to draw two parallel and non-overlapping lines, such that every point in the set lies on exactly one of them, and each of them passes through at least one point in the set.\n\nInput Format:\nThe first line of input contains a positive integer n (3 ≤ n ≤ 1 000) — the number of points.\n\nThe second line contains n space-separated integers y1, y2, ..., yn ( - 109 ≤ yi ≤ 109) — the vertical coordinates of each point.\n\nOutput Format:\nOutput \"Yes\" (without quotes) if it's possible to fulfill the requirements, and \"No\" otherwise.\n\nYou can print each letter in any case (upper or lower).\n\nExamples:\nExample 1:\nInput:\n5\n7 5 8 6 9\nOutput:\nYes\n\nExample 2:\nInput:\n5\n-1 -2 0 0 -5\nOutput:\nNo\n\nExample 3:\nInput:\n5\n5 4 3 2 1\nOutput:\nNo\n\nExample 4:\nInput:\n5\n1000000000 0 0 0 0\nOutput:\nYes\n\nNote:\nIn the first example, there are five points: (1, 7), (2, 5), (3, 8), (4, 6) and (5, 9). It's possible to draw a line that passes through points 1, 3, 5, and another one that passes through points 2, 4 and is parallel to the first one.\n\nIn the second example, while it's possible to draw two lines that cover all points, they cannot be made parallel.\n\nIn the third example, it's impossible to satisfy both requirements at the same time.",
    "examples": [
      {
        "input": "5\n7 5 8 6 9",
        "output": "Yes"
      },
      {
        "input": "5\n-1 -2 0 0 -5",
        "output": "No"
      },
      {
        "input": "5\n5 4 3 2 1",
        "output": "No"
      },
      {
        "input": "5\n1000000000 0 0 0 0",
        "output": "Yes"
      }
    ],
    "solution": "input()\ny = list(map(int, input().split()))\n\n\ndef check(d):\n    return len(set(j - d * i for i, j in enumerate(y))) == 2\n\n\nd = (y[2] - y[0]) / 2, y[1] - y[0], y[2] - y[1]\n\nprint('yes' if any(check(dx) for dx in d) else 'no')\n",
    "explanation": "First way: consider the first three points. What cases are there?\nDenote them as P1(1, y1), P2(2, y2) and P3(3, y3).\nA possible Yes solution falls into one of these three cases: one of the lines pass through P1 and P2; passes through P1 and P3; or passes through P2 and P3. With each case, find out all the points that will be covered if the line is extended infinitely, and if there are still remaining points and all of them are collinear, then the answer is Yes. Time complexity is O(n).\nSecond way: consider the first point.\nA possible Yes solution falls into one of these two cases: P1 lies alone on a line; or some i exists such that one of the lines passes through P1 and Pi. For the second case, iterate over this i, and do it similarly as above to check whether a possible solution exists; for the first case, either check it specially, or reverse the array and apply the check for second case again. Time complexity is O(n2).\nNote that in this problem, there is no need to worry about floating point errors, since all possible slopes are either integers, or 0.5, which can be precisely stored with IEEE doubles."
  },
  {
    "id": "665/A",
    "problem": "Title: Buses Between Cities\n\nBuses run between the cities A and B, the first one is at 05:00 AM and the last one departs not later than at 11:59 PM. A bus from the city A departs every a minutes and arrives to the city B in a ta minutes, and a bus from the city B departs every b minutes and arrives to the city A in a tb minutes.\n\nThe driver Simion wants to make his job diverse, so he counts the buses going towards him. Simion doesn't count the buses he meet at the start and finish.\n\nYou know the time when Simion departed from the city A to the city B. Calculate the number of buses Simion will meet to be sure in his counting.\n\nInput Format:\nThe first line contains two integers a, ta (1 ≤ a, ta ≤ 120) — the frequency of the buses from the city A to the city B and the travel time. Both values are given in minutes.\n\nThe second line contains two integers b, tb (1 ≤ b, tb ≤ 120) — the frequency of the buses from the city B to the city A and the travel time. Both values are given in minutes.\n\nThe last line contains the departure time of Simion from the city A in the format hh:mm. It is guaranteed that there are a bus from the city A at that time. Note that the hours and the minutes are given with exactly two digits.\n\nOutput Format:\nPrint the only integer z — the number of buses Simion will meet on the way. Note that you should not count the encounters in cities A and B.\n\nExamples:\nExample 1:\nInput:\n10 30\n10 35\n05:20\nOutput:\n5\n\nExample 2:\nInput:\n60 120\n24 100\n13:00\nOutput:\n9\n\nNote:\nIn the first example Simion departs form the city A at 05:20 AM and arrives to the city B at 05:50 AM. He will meet the first 5 buses from the city B that departed in the period [05:00 AM - 05:40 AM]. Also Simion will meet a bus in the city B at 05:50 AM, but he will not count it.\n\nAlso note that the first encounter will be between 05:26 AM and 05:27 AM (if we suggest that the buses are go with the sustained speed).",
    "examples": [
      {
        "input": "10 30\n10 35\n05:20",
        "output": "5"
      },
      {
        "input": "60 120\n24 100\n13:00",
        "output": "9"
      }
    ],
    "solution": "a, ta = map(int, input().split())\nb, tb = map(int, input().split())\nh, m = map(int, input().split(':'))\n\nstart = 5 * 60\nend = 24 * 60\ndepart = h * 60 + m\nnot_before = max(start, depart - tb + 1)\nnot_after = min(end, depart + ta)\n\nfirst_b = (not_before - start + b - 1) // b\nfirst_time = start + first_b * b\n\nprint(1 + (not_after - first_time - 1) // b)\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "637/C",
    "problem": "Title: Promocodes with Mistakes\n\nDuring a New Year special offer the \"Sudislavl Bars\" offered n promo codes. Each promo code consists of exactly six digits and gives right to one free cocktail at the bar \"Mosquito Shelter\". Of course, all the promocodes differ.\n\nAs the \"Mosquito Shelter\" opens only at 9, and partying in Sudislavl usually begins at as early as 6, many problems may arise as to how to type a promotional code without errors. It is necessary to calculate such maximum k, that the promotional code could be uniquely identified if it was typed with no more than k errors. At that, k = 0 means that the promotional codes must be entered exactly.\n\nA mistake in this problem should be considered as entering the wrong numbers. For example, value \"123465\" contains two errors relative to promocode \"123456\". Regardless of the number of errors the entered value consists of exactly six digits.\n\nInput Format:\nThe first line of the output contains number n (1 ≤ n ≤ 1000) — the number of promocodes.\n\nEach of the next n lines contains a single promocode, consisting of exactly 6 digits. It is guaranteed that all the promocodes are distinct. Promocodes can start from digit \"0\".\n\nOutput Format:\nPrint the maximum k (naturally, not exceeding the length of the promocode), such that any promocode can be uniquely identified if it is typed with at most k mistakes.\n\nExamples:\nExample 1:\nInput:\n2\n000000\n999999\nOutput:\n2\n\nExample 2:\nInput:\n6\n211111\n212111\n222111\n111111\n112111\n121111\nOutput:\n0\n\nNote:\nIn the first sample k < 3, so if a bar customer types in value \"090909\", then it will be impossible to define which promocode exactly corresponds to it.",
    "examples": [
      {
        "input": "2\n000000\n999999",
        "output": "2"
      },
      {
        "input": "6\n211111\n212111\n222111\n111111\n112111\n121111",
        "output": "0"
      }
    ],
    "solution": "s, r = [13], range(int(input()))\r\nt = [input() for i in r]\r\nfor i in r: s += [sum(x != y for x, y in zip(t[i], t[j])) for j in r[i + 1:]]\r\nprint(min(s) - 1 >> 1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "337/A",
    "problem": "Title: Puzzles\n\nThe end of the school year is near and Ms. Manana, the teacher, will soon have to say goodbye to a yet another class. She decided to prepare a goodbye present for her n students and give each of them a jigsaw puzzle (which, as wikipedia states, is a tiling puzzle that requires the assembly of numerous small, often oddly shaped, interlocking and tessellating pieces).\n\nThe shop assistant told the teacher that there are m puzzles in the shop, but they might differ in difficulty and size. Specifically, the first jigsaw puzzle consists of f1 pieces, the second one consists of f2 pieces and so on.\n\nMs. Manana doesn't want to upset the children, so she decided that the difference between the numbers of pieces in her presents must be as small as possible. Let A be the number of pieces in the largest puzzle that the teacher buys and B be the number of pieces in the smallest such puzzle. She wants to choose such n puzzles that A - B is minimum possible. Help the teacher and find the least possible value of A - B.\n\nInput Format:\nThe first line contains space-separated integers n and m (2 ≤ n ≤ m ≤ 50). The second line contains m space-separated integers f1, f2, ..., fm (4 ≤ fi ≤ 1000) — the quantities of pieces in the puzzles sold in the shop.\n\nOutput Format:\nPrint a single integer — the least possible difference the teacher can obtain.\n\nExamples:\nExample 1:\nInput:\n4 6\n10 12 10 7 5 22\nOutput:\n5\n\nNote:\nSample 1. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.",
    "examples": [
      {
        "input": "4 6\n10 12 10 7 5 22",
        "output": "5"
      }
    ],
    "solution": "n,m = map(int, input().split())\nlst = list(map(int, input().split()))\nlst.sort()\ni = 0\nj = n-1\nmn = 1000000000\nwhile j<m:\n    mn = min(mn, lst[j]-lst[i])\n    i += 1\n    j += 1\nprint(mn)\n    \t\t  \t\t\t   \t \t\t\t\t\t \t \t\t  \t\t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "822/A",
    "problem": "Title: I'm bored with life\n\nHolidays have finished. Thanks to the help of the hacker Leha, Noora managed to enter the university of her dreams which is located in a town Pavlopolis. It's well known that universities provide students with dormitory for the period of university studies. Consequently Noora had to leave Vičkopolis and move to Pavlopolis. Thus Leha was left completely alone in a quiet town Vičkopolis. He almost even fell into a depression from boredom!\n\nLeha came up with a task for himself to relax a little. He chooses two integers A and B and then calculates the greatest common divisor of integers \"A factorial\" and \"B factorial\". Formally the hacker wants to find out GCD(A!, B!). It's well known that the factorial of an integer x is a product of all positive integers less than or equal to x. Thus x! = 1·2·3·...·(x - 1)·x. For example 4! = 1·2·3·4 = 24. Recall that GCD(x, y) is the largest positive integer q that divides (without a remainder) both x and y.\n\nLeha has learned how to solve this task very effective. You are able to cope with it not worse, aren't you?\n\nInput Format:\nThe first and single line contains two integers A and B (1 ≤ A, B ≤ 109, min(A, B) ≤ 12).\n\nOutput Format:\nPrint a single integer denoting the greatest common divisor of integers A! and B!.\n\nExamples:\nExample 1:\nInput:\n4 3\nOutput:\n6\n\nNote:\nConsider the sample.\n\n4! = 1·2·3·4 = 24. 3! = 1·2·3 = 6. The greatest common divisor of integers 24 and 6 is exactly 6.",
    "examples": [
      {
        "input": "4 3",
        "output": "6"
      }
    ],
    "solution": "import math as m\r\na,b=map(int,input().split())\r\nc=min(a,b)\r\nprint(m.factorial(c))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "957/A",
    "problem": "Title: Tritonic Iridescence\n\nOverlooking the captivating blend of myriads of vernal hues, Arkady the painter lays out a long, long canvas.\n\nArkady has a sufficiently large amount of paint of three colours: cyan, magenta, and yellow. On the one-dimensional canvas split into n consecutive segments, each segment needs to be painted in one of the colours.\n\nArkady has already painted some (possibly none or all) segments and passes the paintbrush to you. You are to determine whether there are at least two ways of colouring all the unpainted segments so that no two adjacent segments are of the same colour. Two ways are considered different if and only if a segment is painted in different colours in them.\n\nInput Format:\nThe first line contains a single positive integer n (1 ≤ n ≤ 100) — the length of the canvas.\n\nThe second line contains a string s of n characters, the i-th of which is either 'C' (denoting a segment painted in cyan), 'M' (denoting one painted in magenta), 'Y' (one painted in yellow), or '?' (an unpainted one).\n\nOutput Format:\nIf there are at least two different ways of painting, output \"Yes\"; otherwise output \"No\" (both without quotes).\n\nYou can print each character in any case (upper or lower).\n\nExamples:\nExample 1:\nInput:\n5\nCY??Y\nOutput:\nYes\n\nExample 2:\nInput:\n5\nC?C?Y\nOutput:\nYes\n\nExample 3:\nInput:\n5\n?CYC?\nOutput:\nYes\n\nExample 4:\nInput:\n5\nC??MM\nOutput:\nNo\n\nExample 5:\nInput:\n3\nMMY\nOutput:\nNo\n\nNote:\nFor the first example, there are exactly two different ways of colouring: CYCMY and CYMCY.\n\nFor the second example, there are also exactly two different ways of colouring: CMCMY and CYCMY.\n\nFor the third example, there are four ways of colouring: MCYCM, MCYCY, YCYCM, and YCYCY.\n\nFor the fourth example, no matter how the unpainted segments are coloured, the existing magenta segments will prevent the painting from satisfying the requirements. The similar is true for the fifth example.",
    "examples": [
      {
        "input": "5\nCY??Y",
        "output": "Yes"
      },
      {
        "input": "5\nC?C?Y",
        "output": "Yes"
      },
      {
        "input": "5\n?CYC?",
        "output": "Yes"
      },
      {
        "input": "5\nC??MM",
        "output": "No"
      },
      {
        "input": "3\nMMY",
        "output": "No"
      }
    ],
    "solution": "while True:\r\n    n=int(input())\r\n    s=input()\r\n\r\n    for i in range(0, n-1):\r\n        if s[i]==s[i+1] and s[i]!='?':\r\n            print('No')\r\n            break\r\n\r\n    else:\r\n        if '??' in s or 'Y?Y' in s or 'C?C' in s or 'M?M' in s or s[0]=='?' or s[-1]=='?':\r\n            print('Yes')\r\n        else:\r\n            print('No')\r\n\r\n    break\r\n",
    "explanation": "The problem can be solved in different approaches. Here we describe one based on manually finding out all cases.\nWhat causes the answer to be \"Yes\"? Of course, there cannot be adjacent segments that already have the same colour; but what else?\nWe can figure out that whenever two consecutive question marks appear, there are at least two ways to fill them.\nBut the samples lead us to ponder over cases with one single question mark: a question mark can be coloured in two different colours if it lies on the boundary of the canvas, or is between two adjacent segments of the same colour.\nPutting it all together, we get a simple but correct solution.\nThere surely are dynamic programming solutions to this problem, and if you'd like a harder version, try this USACO problem. So to me seems like a notorious coincidence ._."
  },
  {
    "id": "454/B",
    "problem": "Title: Little Pony and Sort by Shift\n\nOne day, Twilight Sparkle is interested in how to sort a sequence of integers a1, a2, ..., an in non-decreasing order. Being a young unicorn, the only operation she can perform is a unit shift. That is, she can move the last element of the sequence to its beginning:\n\na1, a2, ..., an → an, a1, a2, ..., an - 1.\n\nHelp Twilight Sparkle to calculate: what is the minimum number of operations that she needs to sort the sequence?\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 105). The second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 105).\n\nOutput Format:\nIf it's impossible to sort the sequence output -1. Otherwise output the minimum number of operations Twilight Sparkle needs to sort it.\n\nExamples:\nExample 1:\nInput:\n2\n2 1\nOutput:\n1\n\nExample 2:\nInput:\n3\n1 3 2\nOutput:\n-1\n\nExample 3:\nInput:\n2\n1 2\nOutput:\n0",
    "examples": [
      {
        "input": "2\n2 1",
        "output": "1"
      },
      {
        "input": "3\n1 3 2",
        "output": "-1"
      },
      {
        "input": "2\n1 2",
        "output": "0"
      }
    ],
    "solution": "n=int(input())\r\na=[int(i) for i in input().split()]\r\nc=0\r\nind=-1\r\nfor i in range(1,n):\r\n    if a[i]<a[i-1]:\r\n        c+=1\r\n        s=i\r\nif c==0:\r\n    print(0)\r\nelif a[0]>=a[n-1]and c==1:\r\n    print(n-s)\r\nelse:\r\n    print(-1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "171/C",
    "problem": "Title: A Piece of Cake\n\nHow to make a cake you'll never eat.\n\nIngredients.\n\n- 2 carrots\n- 0 calories\n- 100 g chocolate spread\n- 1 pack of flour\n- 1 egg\n\nMethod.\n\n1. Put calories into the mixing bowl.\n2. Take carrots from refrigerator.\n3. Chop carrots.\n4. Take chocolate spread from refrigerator.\n5. Put chocolate spread into the mixing bowl.\n6. Combine pack of flour into the mixing bowl.\n7. Fold chocolate spread into the mixing bowl.\n8. Add chocolate spread into the mixing bowl.\n9. Put pack of flour into the mixing bowl.\n10. Add egg into the mixing bowl.\n11. Fold pack of flour into the mixing bowl.\n12. Chop carrots until choped.\n13. Pour contents of the mixing bowl into the baking dish.\n\nServes 1.\n\nInput Format:\nThe only line of input contains a sequence of integers a0, a1, ... (1 ≤ a0 ≤ 100, 0 ≤ ai ≤ 1000 for i ≥ 1).\n\nOutput Format:\nOutput a single integer.\n\nExamples:\nExample 1:\nInput:\n4 1 2 3 4\nOutput:\n30",
    "examples": [
      {
        "input": "4 1 2 3 4",
        "output": "30"
      }
    ],
    "solution": "s = input().split()\r\nans = 0\r\npos = 0\r\nfor i in s:\r\n    ans += int(i) * pos\r\n    pos += 1; \r\nprint(ans)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "952/C",
    "problem": "Title: Ravioli Sort\n\nEverybody knows of spaghetti sort. You decided to implement an analog sorting algorithm yourself, but as you survey your pantry you realize you're out of spaghetti! The only type of pasta you have is ravioli, but you are not going to let this stop you...\n\nYou come up with the following algorithm. For each number in the array ai, build a stack of ai ravioli. The image shows the stack for ai = 4.\n\nArrange the stacks in one row in the order in which the corresponding numbers appear in the input array. Find the tallest one (if there are several stacks of maximal height, use the leftmost one). Remove it and add its height to the end of the output array. Shift the stacks in the row so that there is no gap between them. Repeat the procedure until all stacks have been removed.\n\nAt first you are very happy with your algorithm, but as you try it on more inputs you realize that it doesn't always produce the right sorted array. Turns out when two stacks of ravioli are next to each other (at any step of the process) and differ in height by two or more, the top ravioli of the taller stack slides down on top of the lower stack.\n\nGiven an input array, figure out whether the described algorithm will sort it correctly.\n\nInput Format:\nThe first line of input contains a single number n (1 ≤ n ≤ 10) — the size of the array.\n\nThe second line of input contains n space-separated integers ai (1 ≤ ai ≤ 100) — the elements of the array.\n\nOutput Format:\nOutput \"YES\" if the array can be sorted using the described procedure and \"NO\" if it can not.\n\nExamples:\nExample 1:\nInput:\n3\n1 2 3\nOutput:\nYES\n\nExample 2:\nInput:\n3\n3 1 2\nOutput:\nNO\n\nNote:\nIn the second example the array will change even before the tallest stack is chosen for the first time: ravioli from stack of height 3 will slide on the stack of height 1, and the algorithm will output an array {2, 2, 2}.",
    "examples": [
      {
        "input": "3\n1 2 3",
        "output": "YES"
      },
      {
        "input": "3\n3 1 2",
        "output": "NO"
      }
    ],
    "solution": "n=int(input())\r\nx=list(map(int,input().split()))\r\ncount=0\r\nfor i in range(n-1):\r\n    if x[i]+1==x[i+1] or x[i]-1==x[i+1] or x[i]==x[i+1]: count+=1\r\n    else: break\r\nif count==n-1: print('YES')\r\nelse: print('NO')",
    "explanation": "Let's call the row of stacks \"stable\" if each adjacent pair of stacks in it differs in height by at most one (so no ravioli are going to slide to a different stack). It is easy to show that if a row is stable, then after removal of the tallest stack the resulting row is also stable. Indeed, after removing stack ai the only new pair of adjacent stacks is ai - 1 and ai + 1. The row was stable, so |ai - ai - 1| ≤ 1 and |ai - ai + 1| ≤ 1. But ai was the tallest stack, so ai - 1 ≤ ai - 1, ai + 1 ≤ ai. Thus the difference in height between ai - 1 and ai + 1 is at most 1, and the resulting row is also stable.\nThis means that the output will be correct if and only if the original array was stable (obviously, if the original array was not stable, at least one of the stacks would change even before the first tallest stack is chosen, and once some stacks change it's impossible to fix all of them)."
  },
  {
    "id": "924/A",
    "problem": "Title: Mystical Mosaic\n\nThere is a rectangular grid of n rows of m initially-white cells each.\n\nArkady performed a certain number (possibly zero) of operations on it. In the i-th operation, a non-empty subset of rows Ri and a non-empty subset of columns Ci are chosen. For each row r in Ri and each column c in Ci, the intersection of row r and column c is coloured black.\n\nThere's another constraint: a row or a column can only be chosen at most once among all operations. In other words, it means that no pair of (i, j) (i < j) exists such that $$R_i \\cap R_j \\neq \\varnothing$$ or $$C_i \\cap C_j \\neq \\varnothing$$, where ? denotes intersection of sets, and $$\\phi$$ denotes the empty set.\n\nYou are to determine whether a valid sequence of operations exists that produces a given final grid.\n\nInput Format:\nThe first line contains two space-separated integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid, respectively.\n\nEach of the following n lines contains a string of m characters, each being either '.' (denoting a white cell) or '#' (denoting a black cell), representing the desired setup.\n\nOutput Format:\nIf the given grid can be achieved by any valid sequence of operations, output \"Yes\"; otherwise output \"No\" (both without quotes).\n\nYou can print each character in any case (upper or lower).\n\nExamples:\nExample 1:\nInput:\n5 8\n.#.#..#.\n.....#..\n.#.#..#.\n#.#....#\n.....#..\nOutput:\nYes\n\nExample 2:\nInput:\n5 5\n..#..\n..#..\n#####\n..#..\n..#..\nOutput:\nNo\n\nExample 3:\nInput:\n5 9\n........#\n#........\n..##.#...\n.......#.\n....#.#.#\nOutput:\nNo\n\nNote:\nFor the first example, the desired setup can be produced by 3 operations, as is shown below.\n\nFor the second example, the desired setup cannot be produced, since in order to colour the center row, the third row and all columns must be selected in one operation, but after that no column can be selected again, hence it won't be possible to colour the other cells in the center column.",
    "examples": [
      {
        "input": "5 8\n.#.#..#.\n.....#..\n.#.#..#.\n#.#....#\n.....#..",
        "output": "Yes"
      },
      {
        "input": "5 5\n..#..\n..#..\n#####\n..#..\n..#..",
        "output": "No"
      },
      {
        "input": "5 9\n........#\n#........\n..##.#...\n.......#.\n....#.#.#",
        "output": "No"
      }
    ],
    "solution": "a,b=map(int,input().split())\r\nz=[0]*b\r\nk=[input() for _ in \" \"*a]\r\nok=1\r\nfor i in range(a):\r\n    t=[0]*b\r\n    for j in range(b):\r\n        t[j]+=0+(k[i][j]=='#')\r\n    for j in range(i+1,a):\r\n        o=[0]*b\r\n        for x in range(b):\r\n            o[x]+=0+(k[j][x]=='#')\r\n        p=0\r\n        for x in range(b):\r\n            p+=0+(o[x]==t[x]==1)\r\n        if p!=0 :\r\n            if p!=t.count(1) or p!=o.count(1):ok=0\r\nif ok:print(\"yes\")\r\nelse:print(\"no\")",
    "explanation": "No row or column can be selected more than once, hence whenever a row r is selected in an operation, all cells in it uniquely determine the set of columns that need to be selected — let's call it Sr.\nLet's assume a valid set of operations exists. Take out any two rows, i and j. If rows i and j are selected in the same operation, we can deduce that Si = Sj; if they're in different operations, we get $$S_i \\cap S_j = \\varnothing$$. Therefore, if Si ≠ Sj and $$S_{i} \\cap S_{j} \\neq \\varnothing$$ hold for any pair of rows (i, j), no valid operation sequence can be found.\nOtherwise (no pair violates the condition above), a valid sequence of operations can be constructed: group all rows with the same S's and carry out an operation with each group.\nThus, it's a necessary and sufficient condition for the answer to be \"Yes\", that for each pair of rows (i, j), either Si = Sj or $$S_i \\cap S_j = \\varnothing$$ holds.\nThe overall complexity is O(n2m). It can be divided by the system's word size if you're a bitset enthusiast, and a lot more if hashes and hash tables release their full power."
  },
  {
    "id": "469/B",
    "problem": "Title: Chat Online\n\nLittle X and Little Z are good friends. They always chat online. But both of them have schedules.\n\nLittle Z has fixed schedule. He always online at any moment of time between a1 and b1, between a2 and b2, ..., between ap and bp (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c1 and d1, between c2 and d2, ..., between cq and dq (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [ci + t, di + t] (for all i).\n\nIf at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?\n\nInput Format:\nThe first line contains four space-separated integers p, q, l, r (1 ≤  p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).\n\nEach of the next p lines contains two space-separated integers ai, bi (0 ≤ ai < bi ≤ 1000). Each of the next q lines contains two space-separated integers cj, dj (0 ≤ cj < dj ≤ 1000).\n\nIt's guaranteed that bi < ai + 1 and dj < cj + 1 for all valid i and j.\n\nOutput Format:\nOutput a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.\n\nExamples:\nExample 1:\nInput:\n1 1 0 4\n2 3\n0 1\nOutput:\n3\n\nExample 2:\nInput:\n2 3 0 20\n15 17\n23 26\n1 4\n7 11\n15 17\nOutput:\n20",
    "examples": [
      {
        "input": "1 1 0 4\n2 3\n0 1",
        "output": "3"
      },
      {
        "input": "2 3 0 20\n15 17\n23 26\n1 4\n7 11\n15 17",
        "output": "20"
      }
    ],
    "solution": "p,q,l,r=map(int,input().split());\r\nap=set();aq=set();count=0\r\nfor i in range(p):\r\n    a,b=map(int,input().split())\r\n    for i in range(a,b+1):\r\n        ap.add(i)\r\nfor i in range(q):\r\n    c,d=map(int,input().split())\r\n    for i in range(c,d+1):\r\n        aq.add(i)\r\nfor h in range(l,r+1):\r\n    for i in aq:\r\n        if (h+i) in ap:\r\n            count+=1\r\n            break\r\nprint(count)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "268/A",
    "problem": "Title: Games\n\nManao works on a sports TV. He's spent much time watching the football games of some country. After a while he began to notice different patterns. For example, each team has two sets of uniforms: home uniform and guest uniform. When a team plays a game at home, the players put on the home uniform. When a team plays as a guest on somebody else's stadium, the players put on the guest uniform. The only exception to that rule is: when the home uniform color of the host team matches the guests' uniform, the host team puts on its guest uniform as well. For each team the color of the home and guest uniform is different.\n\nThere are n teams taking part in the national championship. The championship consists of n·(n - 1) games: each team invites each other team to its stadium. At this point Manao wondered: how many times during the championship is a host team going to put on the guest uniform? Note that the order of the games does not affect this number.\n\nYou know the colors of the home and guest uniform for each team. For simplicity, the colors are numbered by integers in such a way that no two distinct colors have the same number. Help Manao find the answer to his question.\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 30). Each of the following n lines contains a pair of distinct space-separated integers hi, ai (1 ≤ hi, ai ≤ 100) — the colors of the i-th team's home and guest uniforms, respectively.\n\nOutput Format:\nIn a single line print the number of games where the host team is going to play in the guest uniform.\n\nExamples:\nExample 1:\nInput:\n3\n1 2\n2 4\n3 4\nOutput:\n1\n\nExample 2:\nInput:\n4\n100 42\n42 100\n5 42\n100 5\nOutput:\n5\n\nExample 3:\nInput:\n2\n1 2\n1 2\nOutput:\n0\n\nNote:\nIn the first test case the championship consists of 6 games. The only game with the event in question is the game between teams 2 and 1 on the stadium of team 2.\n\nIn the second test sample the host team will have to wear guest uniform in the games between teams: 1 and 2, 2 and 1, 2 and 3, 3 and 4, 4 and 2 (the host team is written first).",
    "examples": [
      {
        "input": "3\n1 2\n2 4\n3 4",
        "output": "1"
      },
      {
        "input": "4\n100 42\n42 100\n5 42\n100 5",
        "output": "5"
      },
      {
        "input": "2\n1 2\n1 2",
        "output": "0"
      }
    ],
    "solution": "n = int(input())\r\nho = []\r\ngst = []\r\nfor i in range(n):\r\n    team = input().split()\r\n    ho.append(team[0])\r\n    gst.append(team[1])\r\ncount = 0\r\nfor c in ho:\r\n    count += gst.count(c)\r\nprint(count)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "913/A",
    "problem": "Title: Modular Exponentiation\n\nThe following problem is well-known: given integers n and m, calculate\n\n$$2^n \\bmod m$$,\n\nwhere 2n = 2·2·...·2 (n factors), and $$x \\bmod y$$ denotes the remainder of division of x by y.\n\nYou are asked to solve the \"reverse\" problem. Given integers n and m, calculate\n\n$$m \\mod 2^n$$.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 108).\n\nThe second line contains a single integer m (1 ≤ m ≤ 108).\n\nOutput Format:\nOutput a single integer — the value of $$m \\mod 2^n$$.\n\nExamples:\nExample 1:\nInput:\n4\n42\nOutput:\n10\n\nExample 2:\nInput:\n1\n58\nOutput:\n0\n\nExample 3:\nInput:\n98765432\n23456789\nOutput:\n23456789\n\nNote:\nIn the first example, the remainder of division of 42 by 24 = 16 is equal to 10.\n\nIn the second example, 58 is divisible by 21 = 2 without remainder, and the answer is 0.",
    "examples": [
      {
        "input": "4\n42",
        "output": "10"
      },
      {
        "input": "1\n58",
        "output": "0"
      },
      {
        "input": "98765432\n23456789",
        "output": "23456789"
      }
    ],
    "solution": "from math import log2\r\nn = int(input())\r\nm = int(input())\r\nif log2(m) >= n:\r\n    print(m % 2**n)\r\nelse:\r\n    print(m)",
    "explanation": "Why is it hard to calculate the answer directly by the formula in the problem statement? The reason is that 2n is a very large number, for n = 108 it consists of around 30 million decimal digits. (Anyway, it was actually possible to get the problem accepted directly calculating the result in Python or Java using built-in long arithmetics.)\nThe main thing to notice in this problem: $$x \\bmod y = x$$ if x < y.\nHence, $$m \\mod 2^n = m$$ if m < 2n.\nSince m ≤ 108 by the constraints, for n ≥ 27 the answer is always equal to m.\nIf n < 27, it's easy to calculate the answer directly."
  },
  {
    "id": "884/C",
    "problem": "Title: Bertown Subway\n\nThe construction of subway in Bertown is almost finished! The President of Berland will visit this city soon to look at the new subway himself.\n\nThere are n stations in the subway. It was built according to the Bertown Transport Law:\n\n1. For each station i there exists exactly one train that goes from this station. Its destination station is pi, possibly pi = i;\n2. For each station i there exists exactly one station j such that pj = i.\n\nThe President will consider the convenience of subway after visiting it. The convenience is the number of ordered pairs (x, y) such that person can start at station x and, after taking some subway trains (possibly zero), arrive at station y (1 ≤ x, y ≤ n).\n\nThe mayor of Bertown thinks that if the subway is not convenient enough, then the President might consider installing a new mayor (and, of course, the current mayor doesn't want it to happen). Before President visits the city mayor has enough time to rebuild some paths of subway, thus changing the values of pi for not more than two subway stations. Of course, breaking the Bertown Transport Law is really bad, so the subway must be built according to the Law even after changes.\n\nThe mayor wants to do these changes in such a way that the convenience of the subway is maximized. Help him to calculate the maximum possible convenience he can get!\n\nInput Format:\nThe first line contains one integer number n (1 ≤ n ≤ 100000) — the number of stations.\n\nThe second line contains n integer numbers p1, p2, ..., pn (1 ≤ pi ≤ n) — the current structure of the subway. All these numbers are distinct.\n\nOutput Format:\nPrint one number — the maximum possible value of convenience.\n\nExamples:\nExample 1:\nInput:\n3\n2 1 3\nOutput:\n9\n\nExample 2:\nInput:\n5\n1 5 4 3 2\nOutput:\n17\n\nNote:\nIn the first example the mayor can change p2 to 3 and p3 to 1, so there will be 9 pairs: (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3).\n\nIn the second example the mayor can change p2 to 4 and p3 to 5.",
    "examples": [
      {
        "input": "3\n2 1 3",
        "output": "9"
      },
      {
        "input": "5\n1 5 4 3 2",
        "output": "17"
      }
    ],
    "solution": "# -*- coding: utf-8 -*-\r\n\r\nimport math\r\nimport collections\r\nimport bisect\r\nimport heapq\r\nimport time\r\nimport random\r\nimport itertools\r\nimport sys\r\n\r\n\"\"\"\r\ncreated by shhuan at 2017/11/8 09:09\r\n\r\n\"\"\"\r\n\r\nN = int(input())\r\nP = [0] + [int(x) for x in input().split()]\r\n\r\n\r\nLN = []\r\n\r\nC = []\r\nvis = [0] * (N+1)\r\nfor i in range(1, N+1):\r\n    if vis[i]:\r\n        continue\r\n    vis[i] = 1\r\n    c = [i]\r\n    while True:\r\n        i = P[i]\r\n        if not vis[i]:\r\n            vis[i] = 1\r\n            c.append(i)\r\n        else:\r\n            m = c.index(i)\r\n            C.append((len(c), c, i, m, len(c)-m))\r\n            break\r\n\r\n\r\nC.sort(reverse=True)\r\n\r\nif len(C) == 1:\r\n    print(N*N)\r\n    exit(0)\r\n\r\na = C[0]\r\nb = C[1]\r\nans = (a[0] + b[0]) ** 2\r\n\r\nfor c in C[2:]:\r\n    _, _, _, l, n = c\r\n    ans += n**2 + (2*n+l+1)*l//2\r\n\r\nprint(ans)\r\n\r\n\r\n\r\n\r\n\r\n",
    "explanation": "Let's notice that one swap can affect at most two cycles of this permutation. Moreover you can join two cycles into one with the length equal to the sums of lengths of initial ones.\nThe function we are going to maximize is f(a, b) = (a + b)2 - a2 - b2, where a and b are the lengths of the cycles we are joining together. f(a, b) = (a2 + 2ab + b2) - a2 - b2 = 2ab. Now its easily seen that the maximum is achived when joining two cycles with the greatest product of lengths. Finally they are the two longest cycles in permutation.\nOverall complexity: O(n)."
  },
  {
    "id": "656/A",
    "problem": "Title: Da Vinci Powers\n\nInput Format:\nThe input contains a single integer a (0 ≤ a ≤ 35).\n\nOutput Format:\nOutput a single integer.\n\nExamples:\nExample 1:\nInput:\n3\nOutput:\n8\n\nExample 2:\nInput:\n10\nOutput:\n1024",
    "examples": [
      {
        "input": "3",
        "output": "8"
      },
      {
        "input": "10",
        "output": "1024"
      }
    ],
    "solution": "if __name__ == \"__main__\":\r\n\ta = [1,\r\n\t2,\r\n\t4,\r\n\t8,\r\n\t16,\r\n\t32,\r\n\t64,\r\n\t128,\r\n\t256,\r\n\t512,\r\n\t1024,\r\n\t2048,\r\n\t4096,\r\n\t8092,\r\n\t16184,\r\n\t32368,\r\n\t64736,\r\n\t129472,\r\n\t258944,\r\n\t517888,\r\n\t1035776,\r\n\t2071552,\r\n\t4143104,\r\n\t8286208,\r\n\t16572416,\r\n\t33144832,\r\n\t66289664,\r\n\t132579328,\r\n\t265158656,\r\n\t530317312,\r\n\t1060634624,\r\n\t2121269248,\r\n\t4242538496,\r\n\t8485076992,\r\n\t16970153984,\r\n\t33940307968]\r\n\tprint (a[int(input())])\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "509/B",
    "problem": "Title: Painting Pebbles\n\nThere are n piles of pebbles on the table, the i-th pile contains ai pebbles. Your task is to paint each pebble using one of the k given colors so that for each color c and any two piles i and j the difference between the number of pebbles of color c in pile i and number of pebbles of color c in pile j is at most one.\n\nIn other words, let's say that bi, c is the number of pebbles of color c in the i-th pile. Then for any 1 ≤ c ≤ k, 1 ≤ i, j ≤ n the following condition must be satisfied |bi, c - bj, c| ≤ 1. It isn't necessary to use all k colors: if color c hasn't been used in pile i, then bi, c is considered to be zero.\n\nInput Format:\nThe first line of the input contains positive integers n and k (1 ≤ n, k ≤ 100), separated by a space — the number of piles and the number of colors respectively.\n\nThe second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 100) denoting number of pebbles in each of the piles.\n\nOutput Format:\nIf there is no way to paint the pebbles satisfying the given condition, output \"NO\" (without quotes) .\n\nOtherwise in the first line output \"YES\" (without quotes). Then n lines should follow, the i-th of them should contain ai space-separated integers. j-th (1 ≤ j ≤ ai) of these integers should be equal to the color of the j-th pebble in the i-th pile. If there are several possible answers, you may output any of them.\n\nExamples:\nExample 1:\nInput:\n4 4\n1 2 3 4\nOutput:\nYES\n1\n1 4\n1 2 4\n1 2 3 4\n\nExample 2:\nInput:\n5 2\n3 2 4 1 3\nOutput:\nNO\n\nExample 3:\nInput:\n5 4\n3 2 4 3 5\nOutput:\nYES\n1 2 3\n1 3\n1 2 3 4\n1 3 4\n1 1 2 3 4",
    "examples": [
      {
        "input": "4 4\n1 2 3 4",
        "output": "YES\n1\n1 4\n1 2 4\n1 2 3 4"
      },
      {
        "input": "5 2\n3 2 4 1 3",
        "output": "NO"
      },
      {
        "input": "5 4\n3 2 4 3 5",
        "output": "YES\n1 2 3\n1 3\n1 2 3 4\n1 3 4\n1 1 2 3 4"
      }
    ],
    "solution": "num_pilhas, c_cores = map(int, input().split())\r\npilhas = list(map(int, input().split()))\r\n\r\n# |bi, c - bj, c| ≤ 1\r\nif max(pilhas) - min(pilhas) > c_cores:\r\n    print('NO')\r\nelse:\r\n    print('YES')\r\n    for i in range(num_pilhas):\r\n      pilhas_colorida = []\r\n      for j in range(pilhas[i]):\r\n        cor = j % c_cores + 1\r\n        pilhas_colorida.append(str(cor))\r\n      print(' '.join(pilhas_colorida))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "656/B",
    "problem": "Title: Scrambled\n\nBtoh yuo adn yuor roomatme lhoate wianshg disehs, btu stlil sdmoeboy msut peorrfm tihs cohre dialy. Oen dya yuo decdie to idourtcne smoe syestm. Yuor rmmotaoe sstgegus teh fooniwllg dael. Yuo argee on tow arayrs of ientgres M adn R, nmebur upmicnog dyas (induiclng teh cunrret oen) wtih sicsescuve irnegets (teh ceurrnt dya is zreo), adn yuo wsah teh diehss on dya D if adn olny if terhe etsixs an iednx i scuh taht D mod M[i] = R[i], otwsehrie yuor rmootmae deos it. Yuo lkie teh cncepot, btu yuor rmotaome's cuinnng simle meaks yuo ssecupt sthnoemig, so yuo itennd to vefriy teh fnerisas of teh aemnrgeet.\n\nYuo aer geivn ayarrs M adn R. Cuaclatle teh pceanregte of dyas on wchih yuo edn up dnoig teh wisahng. Amsuse taht yuo hvae iiiftlneny mnay dyas aehad of yuo.\n\nInput Format:\nThe first line of input contains a single integer N (1 ≤ N ≤ 16).\n\nThe second and third lines of input contain N integers each, all between 0 and 16, inclusive, and represent arrays M and R, respectively. All M[i] are positive, for each i R[i] < M[i].\n\nOutput Format:\nOutput a single real number. The answer is considered to be correct if its absolute or relative error does not exceed 10 - 4.\n\nExamples:\nExample 1:\nInput:\n1\n2\n0\nOutput:\n0.500000\n\nExample 2:\nInput:\n2\n2 3\n1 0\nOutput:\n0.666667",
    "examples": [
      {
        "input": "1\n2\n0",
        "output": "0.500000"
      },
      {
        "input": "2\n2 3\n1 0",
        "output": "0.666667"
      }
    ],
    "solution": "from fractions import gcd\nfrom functools import reduce\nfrom operator import mul\n\nn = int(input())\nm = [int(x) for x in input().split()]\nr = [int(x) for x in input().split()]\n\nlcm = m[0]\nif len(m) > 1:\n    lcm = reduce(mul, m, 1) // reduce(gcd, m, 0)\n\nres = 0\nfor d in range(min(lcm, 100000)):\n    for i in range(n):\n        if d % m[i] == r[i]:\n            res += 1\n            break\n\nprint(res / min(lcm, 100000))\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "58/A",
    "problem": "Title: Chat room\n\nVasya has recently learned to type and log on to the Internet. He immediately entered a chat room and decided to say hello to everybody. Vasya typed the word s. It is considered that Vasya managed to say hello if several letters can be deleted from the typed word so that it resulted in the word \"hello\". For example, if Vasya types the word \"ahhellllloou\", it will be considered that he said hello, and if he types \"hlelo\", it will be considered that Vasya got misunderstood and he didn't manage to say hello. Determine whether Vasya managed to say hello by the given word s.\n\nInput Format:\nThe first and only line contains the word s, which Vasya typed. This word consisits of small Latin letters, its length is no less that 1 and no more than 100 letters.\n\nOutput Format:\nIf Vasya managed to say hello, print \"YES\", otherwise print \"NO\".\n\nExamples:\nExample 1:\nInput:\nahhellllloou\nOutput:\nYES\n\nExample 2:\nInput:\nhlelo\nOutput:\nNO",
    "examples": [
      {
        "input": "ahhellllloou",
        "output": "YES"
      },
      {
        "input": "hlelo",
        "output": "NO"
      }
    ],
    "solution": "s=list(input())\r\nn='NO'\r\nfor i in range(len(s)):\r\n    if s[i]=='h' :\r\n        for i_1 in range(i,len(s)):\r\n            if s[i_1]=='e' :\r\n                for i_2 in range(i_1,len(s)):\r\n                    if s[i_2]=='l' :\r\n                        for i_3 in range(i_2+1,len(s)):\r\n                            if s[i_3]=='l' :\r\n                                for i_4 in range(i_3,len(s)):\r\n                                    if s[i_4]=='o' :\r\n                                        n='YES'\r\n                                        break\r\n                            continue\r\n                    continue\r\n            continue\r\nprint(n)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "370/A",
    "problem": "Title: Rook, Bishop and King\n\nLittle Petya is learning to play chess. He has already learned how to move a king, a rook and a bishop. Let us remind you the rules of moving chess pieces. A chessboard is 64 square fields organized into an 8 × 8 table. A field is represented by a pair of integers (r, c) — the number of the row and the number of the column (in a classical game the columns are traditionally indexed by letters). Each chess piece takes up exactly one field. To make a move is to move a chess piece, the pieces move by the following rules:\n\n- A rook moves any number of fields horizontally or vertically.\n- A bishop moves any number of fields diagonally.\n- A king moves one field in any direction — horizontally, vertically or diagonally.\n\nThe pieces move like that\n\nPetya is thinking about the following problem: what minimum number of moves is needed for each of these pieces to move from field (r1, c1) to field (r2, c2)? At that, we assume that there are no more pieces besides this one on the board. Help him solve this problem.\n\nInput Format:\nThe input contains four integers r1, c1, r2, c2 (1 ≤ r1, c1, r2, c2 ≤ 8) — the coordinates of the starting and the final field. The starting field doesn't coincide with the final one.\n\nYou can assume that the chessboard rows are numbered from top to bottom 1 through 8, and the columns are numbered from left to right 1 through 8.\n\nOutput Format:\nPrint three space-separated integers: the minimum number of moves the rook, the bishop and the king (in this order) is needed to move from field (r1, c1) to field (r2, c2). If a piece cannot make such a move, print a 0 instead of the corresponding number.\n\nExamples:\nExample 1:\nInput:\n4 3 1 6\nOutput:\n2 1 3\n\nExample 2:\nInput:\n5 5 5 6\nOutput:\n1 0 1",
    "examples": [
      {
        "input": "4 3 1 6",
        "output": "2 1 3"
      },
      {
        "input": "5 5 5 6",
        "output": "1 0 1"
      }
    ],
    "solution": "def stessocolore(x1,y1,x2,y2):\r\n    if (x1+y1)%2 == (x2+y2)%2:\r\n        return True\r\n    else:\r\n        return False\r\nx1, y1, x2, y2 = map(int, input().split())\r\nif x1 == x2 or y1 == y2:\r\n    rook = 1\r\nelse:\r\n    rook = 2\r\nking = max([abs(x1-x2),abs(y1-y2)])\r\nif stessocolore(x1,y1,x2,y2):\r\n    if (x1-y1) == (x2-y2) or x1+y1 == x2+y2:\r\n        bish = 1\r\n    else:\r\n        bish = 2\r\nelse:\r\n    bish = 0\r\n\r\nprint(rook, bish, king)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "510/A",
    "problem": "Title: Fox And Snake\n\nFox Ciel starts to learn programming. The first task is drawing a fox! However, that turns out to be too hard for a beginner, so she decides to draw a snake instead.\n\nA snake is a pattern on a n by m table. Denote c-th cell of r-th row as (r, c). The tail of the snake is located at (1, 1), then it's body extends to (1, m), then goes down 2 rows to (3, m), then goes left to (3, 1) and so on.\n\nYour task is to draw this snake for Fox Ciel: the empty cells should be represented as dot characters ('.') and the snake cells should be filled with number signs ('#').\n\nConsider sample tests in order to understand the snake pattern.\n\nInput Format:\nThe only line contains two integers: n and m (3 ≤ n, m ≤ 50).\n\nn is an odd number.\n\nOutput Format:\nOutput n lines. Each line should contain a string consisting of m characters. Do not output spaces.\n\nExamples:\nExample 1:\nInput:\n3 3\nOutput:\n###\n..#\n###\n\nExample 2:\nInput:\n3 4\nOutput:\n####\n...#\n####\n\nExample 3:\nInput:\n5 3\nOutput:\n###\n..#\n###\n#..\n###\n\nExample 4:\nInput:\n9 9\nOutput:\n#########\n........#\n#########\n#........\n#########\n........#\n#########\n#........\n#########",
    "examples": [
      {
        "input": "3 3",
        "output": "###\n..#\n###"
      },
      {
        "input": "3 4",
        "output": "####\n...#\n####"
      },
      {
        "input": "5 3",
        "output": "###\n..#\n###\n#..\n###"
      },
      {
        "input": "9 9",
        "output": "#########\n........#\n#########\n#........\n#########\n........#\n#########\n#........\n#########"
      }
    ],
    "solution": "def Fox_and_Snake(r,c):\r\n    next_ = 3\r\n    next_2 = 1\r\n    for i in range(r):\r\n        for j in range(c):\r\n            if i %2 == 0:\r\n                print('#', end = '')\r\n            else:\r\n                if i == next_2 and j == (c-1):\r\n                    print('#', end = '')\r\n                    next_2 +=4\r\n                elif i == next_ and j ==0:\r\n                    print('#', end = '')\r\n                    next_ +=4\r\n                else :\r\n                    print('.', end = '')\r\n        print()\r\n        \r\nr, c = map( int, input().split())\r\n\r\nFox_and_Snake(r,c)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "296/B",
    "problem": "Title: Yaroslav and Two Strings\n\nYaroslav thinks that two strings s and w, consisting of digits and having length n are non-comparable if there are two numbers, i and j (1 ≤ i, j ≤ n), such that si > wi and sj < wj. Here sign si represents the i-th digit of string s, similarly, wj represents the j-th digit of string w.\n\nA string's template is a string that consists of digits and question marks (\"?\").\n\nYaroslav has two string templates, each of them has length n. Yaroslav wants to count the number of ways to replace all question marks by some integers in both templates, so as to make the resulting strings incomparable. Note that the obtained strings can contain leading zeroes and that distinct question marks can be replaced by distinct or the same integers.\n\nHelp Yaroslav, calculate the remainder after dividing the described number of ways by 1000000007 (109 + 7).\n\nInput Format:\nThe first line contains integer n (1 ≤ n ≤ 105) — the length of both templates. The second line contains the first template — a string that consists of digits and characters \"?\". The string's length equals n. The third line contains the second template in the same format.\n\nOutput Format:\nIn a single line print the remainder after dividing the answer to the problem by number 1000000007 (109 + 7).\n\nExamples:\nExample 1:\nInput:\n2\n90\n09\nOutput:\n1\n\nExample 2:\nInput:\n2\n11\n55\nOutput:\n0\n\nExample 3:\nInput:\n5\n?????\n?????\nOutput:\n993531194\n\nNote:\nThe first test contains no question marks and both strings are incomparable, so the answer is 1.\n\nThe second test has no question marks, but the given strings are comparable, so the answer is 0.",
    "examples": [
      {
        "input": "2\n90\n09",
        "output": "1"
      },
      {
        "input": "2\n11\n55",
        "output": "0"
      },
      {
        "input": "5\n?????\n?????",
        "output": "993531194"
      }
    ],
    "solution": "n, s = int(input()), 0\r\ns1, s2 = str(input()), str(input())\r\nb1, b2 = False, False\r\nfor i in range(n):\r\n  if s1[i] != '?' and s2[i] != '?':\r\n    if ord(s1[i]) < ord(s2[i]):\r\n      b1 = True\r\n    if ord(s1[i]) > ord(s2[i]):\r\n      b2 = True\r\n  s += (s1[i] == '?') + (s2[i] == '?')\r\nans1, ans2, ans3 = 1, 1, 1\r\nfor i in range(n):\r\n  if s1[i] == '?' and s2[i] == '?':\r\n    ans1 = (ans1 * 55) % 1000000007\r\n    ans2 = (ans2 * 55) % 1000000007\r\n    ans3 = (ans3 * 10) % 1000000007\r\n  elif s1[i] == '?':\r\n    ans1 = (ans1 * (ord(s2[i]) - ord('0') + 1)) % 1000000007\r\n    ans2 = (ans2 * (10 - ord(s2[i]) + ord('0'))) % 1000000007\r\n  elif s2[i] == '?':\r\n    ans1 = (ans1 * (10 - ord(s1[i]) + ord('0'))) % 1000000007\r\n    ans2 = (ans2 * (ord(s1[i]) - ord('0') + 1)) % 1000000007\r\nprint((10 ** s - (not b2) * ans1 - (not b1) * ans2 + (not b1 and not b2) * ans3) % 1000000007)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "122/A",
    "problem": "Title: Lucky Division\n\nPetya loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya calls a number almost lucky if it could be evenly divided by some lucky number. Help him find out if the given number n is almost lucky.\n\nInput Format:\nThe single line contains an integer n (1 ≤ n ≤ 1000) — the number that needs to be checked.\n\nOutput Format:\nIn the only line print \"YES\" (without the quotes), if number n is almost lucky. Otherwise, print \"NO\" (without the quotes).\n\nExamples:\nExample 1:\nInput:\n47\nOutput:\nYES\n\nExample 2:\nInput:\n16\nOutput:\nYES\n\nExample 3:\nInput:\n78\nOutput:\nNO\n\nNote:\nNote that all lucky numbers are almost lucky as any number is evenly divisible by itself.\n\nIn the first sample 47 is a lucky number. In the second sample 16 is divisible by 4.",
    "examples": [
      {
        "input": "47",
        "output": "YES"
      },
      {
        "input": "16",
        "output": "YES"
      },
      {
        "input": "78",
        "output": "NO"
      }
    ],
    "solution": "n=int(input(\"\"))\r\nwhile not(1<=n<=1000):\r\n    n=int(input(\"\"))\r\nl=[4,7,47,74,477,447,444,44,77,777,774,744,474]\r\np=len(l)\r\ni=0\r\ntest=False\r\nwhile not test and i<p:\r\n    if n%l[i]==0:\r\n        test=True\r\n    else:\r\n        i+=1\r\nif test:\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n    ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "633/B",
    "problem": "Title: A Trivial Problem\n\nMr. Santa asks all the great programmers of the world to solve a trivial problem. He gives them an integer m and asks for the number of positive integers n, such that the factorial of n ends with exactly m zeroes. Are you among those great programmers who can solve this problem?\n\nInput Format:\nThe only line of input contains an integer m (1 ≤ m ≤ 100 000) — the required number of trailing zeroes in factorial.\n\nOutput Format:\nFirst print k — the number of values of n such that the factorial of n ends with m zeroes. Then print these k integers in increasing order.\n\nExamples:\nExample 1:\nInput:\n1\nOutput:\n5\n5 6 7 8 9\n\nExample 2:\nInput:\n5\nOutput:\n0\n\nNote:\nThe factorial of n is equal to the product of all integers from 1 to n inclusive, that is n! = 1·2·3·...·n.\n\nIn the first sample, 5! = 120, 6! = 720, 7! = 5040, 8! = 40320 and 9! = 362880.",
    "examples": [
      {
        "input": "1",
        "output": "5\n5 6 7 8 9"
      },
      {
        "input": "5",
        "output": "0"
      }
    ],
    "solution": "#n,m,k = map(int, input().strip().split(' '))\r\nm=int(input())\r\n#a = list(map(int, input().strip().split(' ')))\r\nl=[1]\r\ni=1\r\nl1=[i]\r\nl2=0\r\n#building the array\r\nwhile(i<100000):\r\n    i+=1\r\n    l2=5*i\r\n    c=0\r\n    while(l2%5==0):\r\n        l2=l2//5\r\n        c+=1\r\n    l.append(l[-1]+c)\r\n    l1.append(i)\r\n#print(l)\r\nif m not in l:\r\n    print(0)\r\nelse:\r\n    print(5)\r\n    ind=l.index(m)\r\n    i1=5*l1[ind]\r\n    print(i1,i1+1,i1+2,i1+3,i1+4,end=\" \")\r\n    \r\n   ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "224/A",
    "problem": "Title: Parallelepiped\n\nYou've got a rectangular parallelepiped with integer edge lengths. You know the areas of its three faces that have a common vertex. Your task is to find the sum of lengths of all 12 edges of this parallelepiped.\n\nInput Format:\nThe first and the single line contains three space-separated integers — the areas of the parallelepiped's faces. The area's values are positive ( > 0) and do not exceed 104. It is guaranteed that there exists at least one parallelepiped that satisfies the problem statement.\n\nOutput Format:\nPrint a single number — the sum of all edges of the parallelepiped.\n\nExamples:\nExample 1:\nInput:\n1 1 1\nOutput:\n12\n\nExample 2:\nInput:\n4 6 6\nOutput:\n28\n\nNote:\nIn the first sample the parallelepiped has sizes 1 × 1 × 1, in the second one — 2 × 2 × 3.",
    "examples": [
      {
        "input": "1 1 1",
        "output": "12"
      },
      {
        "input": "4 6 6",
        "output": "28"
      }
    ],
    "solution": "import math\r\nz = []\r\nz[0:] = map(int, input().split())\r\nz.sort()\r\nlst1 = []\r\nlst2 = []\r\nlst3 = []\r\nlst = [1]\r\n\r\nfor i in range(1,z[1]):\r\n    if  i not in lst and z[0] % i == 0 and z[2] % i == 0: #and i not in lst:# and z[2] % i == 0:\r\n        lst.append(i)\r\n        #break\r\n    if  i not in lst and z[0] % i == 0 and z[1] % i == 0: #and i not in lst:# and z[2] % i == 0:\r\n        lst.append(i)\r\n        #break\r\n#print(lst)\r\ncount = sum(z)\r\nif len(lst1) == 0:\r\n    lst1.append(1)\r\n    lst1.append(z[1] // lst1[0])\r\n    lst1.append(z[2] // lst1[1])\r\nelse:\r\n    lst1.append(z[1] // lst1[0])\r\n    lst1.append(z[2] // lst1[1])\r\nfor i in range(len(lst)):\r\n    if (lst1[0] * lst1[1] + lst1[0] * lst1[2] + lst1[1] * lst1[2]) != count:\r\n        lst1.clear()\r\n        lst1.append(lst[len(lst1) - 1 -i])\r\n        lst1.append(z[1] // lst1[0])\r\n        lst1.append(z[2] // lst1[1])\r\n    else:\r\n        break\r\n\r\n\r\nprint(sum(lst1) * 4)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "580/A",
    "problem": "Title: Kefa and First Steps\n\nKefa decided to make some money doing business on the Internet for exactly n days. He knows that on the i-th day (1 ≤ i ≤ n) he makes ai money. Kefa loves progress, that's why he wants to know the length of the maximum non-decreasing subsegment in sequence ai. Let us remind you that the subsegment of the sequence is its continuous fragment. A subsegment of numbers is called non-decreasing if all numbers in it follow in the non-decreasing order.\n\nHelp Kefa cope with this task!\n\nInput Format:\nThe first line contains integer n (1 ≤ n ≤ 105).\n\nThe second line contains n integers a1,  a2,  ...,  an (1 ≤ ai ≤ 109).\n\nOutput Format:\nPrint a single integer — the length of the maximum non-decreasing subsegment of sequence a.\n\nExamples:\nExample 1:\nInput:\n6\n2 2 1 3 4 1\nOutput:\n3\n\nExample 2:\nInput:\n3\n2 2 9\nOutput:\n3\n\nNote:\nIn the first test the maximum non-decreasing subsegment is the numbers from the third to the fifth one.\n\nIn the second test the maximum non-decreasing subsegment is the numbers from the first to the third one.",
    "examples": [
      {
        "input": "6\n2 2 1 3 4 1",
        "output": "3"
      },
      {
        "input": "3\n2 2 9",
        "output": "3"
      }
    ],
    "solution": "n=int(input())\r\nr=input()\r\ns=r.split(\" \")\r\na=[]\r\nfor i in s:\r\n    a.append(int(i))\r\ni=0;maxi=1;num=1\r\nwhile i<n-1:\r\n    if a[i]<=a[i+1]:\r\n        num+=1\r\n        if num>maxi:\r\n            maxi=num\r\n    else:\r\n        num=1\r\n    i+=1\r\nprint(maxi)",
    "explanation": "Заметим, что если в массиве есть две пересекающиеся непрерывные неубывающие подпоследовательности, то их можно объединить в одну. Поэтому можно просто проходиться по массиву слева направо. Если текущую подпоследовательность можно продолжить с помощью i-го элемента, то делаем это, иначе начинаем новую. Ответом будет максимальная из всех найденных подпоследовательностей.\nАсимптотика — O(n)."
  },
  {
    "id": "749/B",
    "problem": "Title: Parallelogram is Back\n\nLong time ago Alex created an interesting problem about parallelogram. The input data for this problem contained four integer points on the Cartesian plane, that defined the set of vertices of some non-degenerate (positive area) parallelogram. Points not necessary were given in the order of clockwise or counterclockwise traversal.\n\nAlex had very nice test for this problem, but is somehow happened that the last line of the input was lost and now he has only three out of four points of the original parallelogram. He remembers that test was so good that he asks you to restore it given only these three points.\n\nInput Format:\nThe input consists of three lines, each containing a pair of integer coordinates xi and yi ( - 1000 ≤ xi, yi ≤ 1000). It's guaranteed that these three points do not lie on the same line and no two of them coincide.\n\nOutput Format:\nFirst print integer k — the number of ways to add one new integer point such that the obtained set defines some parallelogram of positive area. There is no requirement for the points to be arranged in any special order (like traversal), they just define the set of vertices.\n\nThen print k lines, each containing a pair of integer — possible coordinates of the fourth point.\n\nExamples:\nExample 1:\nInput:\n0 0\n1 0\n0 1\nOutput:\n3\n1 -1\n-1 1\n1 1\n\nNote:\nIf you need clarification of what parallelogram is, please check Wikipedia page:\n\nhttps://en.wikipedia.org/wiki/Parallelogram",
    "examples": [
      {
        "input": "0 0\n1 0\n0 1",
        "output": "3\n1 -1\n-1 1\n1 1"
      }
    ],
    "solution": "A=tuple(map(int,input().split()))\r\nB=tuple(map(int,input().split()))\r\nC=tuple(map(int,input().split()))\r\nXAB=A[0]-B[0]\r\nYAB=A[1]-B[1]\r\nset1=set()\r\nset1.add(tuple((C[0]+XAB,C[1]+YAB)))\r\nset1.add(tuple((C[0]-XAB,C[1]-YAB)))\r\nset1.add(tuple((A[0]+B[0]-C[0],A[1]+B[1]-C[1])))\r\nprint(len(set1))\r\nfor i in set1:\r\n    print(i[0],i[1])\r\n",
    "explanation": "Denote the input points as A, B, C, and the point we need to find as D.\nConsider the case when the segments AD and BC are the diagonals of parallelogram. Vector AD is equal to the sum of two vectors AB + BD = AC + CD. As in the parallelogram the opposite sides are equal and parallel, BD = AC, AB = CD, and we can conclude that AD = AB + AC. So, the coordinates of the point D can be calculated as A + AB + AC = (Ax + Bx - Ax + Cx - Ax, Ay + By - Ay + Cy - Ay) = (Bx + Cx - Ax, By + Cy - Ay).\nThe cases where the diagonals are BD and AC, CD and AB are processed in the same way.\nProve that all three given points are different. Let's suppose it's wrong. Without losing of generality suppose that the points got in cases AD and BD are equal.\nConsider the system of two equations for the equality of these points:\n• Bx + Cx - Ax = Ax + Cx - Bx\n• By + Cy - Ay = Ay + Cy - By\nWe can see that in can be simplified as\n• Ax = Bx\n• Ay = By\nAnd we got a contradiction, as all the points A, B, C are distinct."
  },
  {
    "id": "596/A",
    "problem": "Title: Wilbur and Swimming Pool\n\nAfter making bad dives into swimming pools, Wilbur wants to build a swimming pool in the shape of a rectangle in his backyard. He has set up coordinate axes, and he wants the sides of the rectangle to be parallel to them. Of course, the area of the rectangle must be positive. Wilbur had all four vertices of the planned pool written on a paper, until his friend came along and erased some of the vertices.\n\nNow Wilbur is wondering, if the remaining n vertices of the initial rectangle give enough information to restore the area of the planned swimming pool.\n\nInput Format:\nThe first line of the input contains a single integer n (1 ≤ n ≤ 4) — the number of vertices that were not erased by Wilbur's friend.\n\nEach of the following n lines contains two integers xi and yi ( - 1000 ≤ xi, yi ≤ 1000) —the coordinates of the i-th vertex that remains. Vertices are given in an arbitrary order.\n\nIt's guaranteed that these points are distinct vertices of some rectangle, that has positive area and which sides are parallel to the coordinate axes.\n\nOutput Format:\nPrint the area of the initial rectangle if it could be uniquely determined by the points remaining. Otherwise, print  - 1.\n\nExamples:\nExample 1:\nInput:\n2\n0 0\n1 1\nOutput:\n1\n\nExample 2:\nInput:\n1\n1 1\nOutput:\n-1\n\nNote:\nIn the first sample, two opposite corners of the initial rectangle are given, and that gives enough information to say that the rectangle is actually a unit square.\n\nIn the second sample there is only one vertex left and this is definitely not enough to uniquely define the area.",
    "examples": [
      {
        "input": "2\n0 0\n1 1",
        "output": "1"
      },
      {
        "input": "1\n1 1",
        "output": "-1"
      }
    ],
    "solution": "#----Kuzlyaev-Nikita-Codeforces-----\r\n#------------08.04.2020-------------\r\n\r\nimport math\r\nalph=\"abcdefghijklmnopqrstuvwxyz\"\r\n\r\n#-----------------------------------\r\n\r\nn=int(input())\r\na=[]\r\nfor i in range(n):\r\n    x,y=map(int,input().split())\r\n    a.append([x,y])\r\nif n==1:print(-1)\r\nelse:\r\n    S=0\r\n    for i in range(n-1):\r\n        for j in range(i+1,n):\r\n            x1,y1,x2,y2=a[i][0],a[i][1],a[j][0],a[j][1]\r\n            if x1!=x2 and y1!=y2:\r\n                S=abs(x1-x2)*abs(y1-y2)\r\n            \r\n    if S!=0:print(S)\r\n    else:\r\n        print(-1)\r\n    ",
    "explanation": "It is a necessary and sufficient condition that we have exactly 2 distinct values for x and y. If we have less than 2 distinct values for any variable, then there is no way to know the length of that dimension. If there are at least 3 distinct values for any variable, then that means more than 3 vertices lie on that dimension, which cannot happen since there can be at most 2 vertices in a line segment. The area, if it can be found, is just the difference of values of the x coordinates times the difference of values of the y coordinates.\nComplexity: O(1)"
  },
  {
    "id": "604/A",
    "problem": "Title: Uncowed Forces\n\nKevin Sun has just finished competing in Codeforces Round #334! The round was 120 minutes long and featured five problems with maximum point values of 500, 1000, 1500, 2000, and 2500, respectively. Despite the challenging tasks, Kevin was uncowed and bulldozed through all of them, distinguishing himself from the herd as the best cowmputer scientist in all of Bovinia. Kevin knows his submission time for each problem, the number of wrong submissions that he made on each problem, and his total numbers of successful and unsuccessful hacks. Because Codeforces scoring is complicated, Kevin wants you to write a program to compute his final score.\n\nCodeforces scores are computed as follows: If the maximum point value of a problem is x, and Kevin submitted correctly at minute m but made w wrong submissions, then his score on that problem is $$\\max \\left( 0.3x, \\left( 1 - \\frac{m}{250} \\right)x - 50w \\right)$$. His total score is equal to the sum of his scores for each problem. In addition, Kevin's total score gets increased by 100 points for each successful hack, but gets decreased by 50 points for each unsuccessful hack.\n\nAll arithmetic operations are performed with absolute precision and no rounding. It is guaranteed that Kevin's final score is an integer.\n\nInput Format:\nThe first line of the input contains five space-separated integers m1, m2, m3, m4, m5, where mi (0 ≤ mi ≤ 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w1, w2, w3, w4, w5, where wi (0 ≤ wi ≤ 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers hs and hu (0 ≤ hs, hu ≤ 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\n\nOutput Format:\nPrint a single integer, the value of Kevin's final score.\n\nExamples:\nExample 1:\nInput:\n20 40 60 80 100\n0 1 2 3 4\n1 0\nOutput:\n4900\n\nExample 2:\nInput:\n119 119 119 119 119\n0 0 0 0 0\n10 0\nOutput:\n4930\n\nNote:\nIn the second sample, Kevin takes 119 minutes on all of the problems. Therefore, he gets $$( 1 - \\frac { 1 1 9 } { 2 5 0 } ) = \\frac { 1 3 1 } { 2 5 0 }$$ of the points on each problem. So his score from solving problems is $${ \\frac { 1 3 1 } { 2 5 0 } } ( 5 0 0 + 1 0 0 0 + 1 5 0 0 + 2 0 0 0 + 2 5 0 0 ) = 3 9 3 0$$. Adding in 10·100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.",
    "examples": [
      {
        "input": "20 40 60 80 100\n0 1 2 3 4\n1 0",
        "output": "4900"
      },
      {
        "input": "119 119 119 119 119\n0 0 0 0 0\n10 0",
        "output": "4930"
      }
    ],
    "solution": "def score(x,m,w):\r\n    t=(1-(m/250))*x - (50*w)\r\n    return max(0.3*x,t)\r\n\r\nsl=[500,1000,1500,2000,2500]\r\nm=list(map(int, input().split()))\r\nw=list(map(int, input().split()))\r\ns,u=map(int,input().split())\r\n\r\nres=0\r\n\r\nfor i in range(5):\r\n    res+=score(sl[i],m[i],w[i])\r\nres+=(100*s)\r\nres-=(50*u)\r\nprint(int(res))",
    "explanation": "Hint: Just do it! But if you're having trouble, try doing your computations using only integers.\nThis problem is straightforward implementation—just code what's described in the problem statement. However, floating point error is one place where you can trip up. Avoid it by rounding (adding 0.5 before casting to int), or by doing all calculations with integers. The latter is possible since 250 always divides the maximum point value of a problem. Thus when we rewrite our formula for score as $$\\max \\left( 3 \\cdot x / 10, ( 250 - m ) \\cdot x / 250 \\right)$$, it is easy to check that we only have integers as intermediate values."
  },
  {
    "id": "579/B",
    "problem": "Title: Finding Team Member\n\nThere is a programing contest named SnakeUp, 2n people want to compete for it. In order to attend this contest, people need to form teams of exactly two people. You are given the strength of each possible combination of two people. All the values of the strengths are distinct.\n\nEvery contestant hopes that he can find a teammate so that their team’s strength is as high as possible. That is, a contestant will form a team with highest strength possible by choosing a teammate from ones who are willing to be a teammate with him/her. More formally, two people A and B may form a team if each of them is the best possible teammate (among the contestants that remain unpaired) for the other one.\n\nCan you determine who will be each person’s teammate?\n\nInput Format:\nThere are 2n lines in the input.\n\nThe first line contains an integer n (1 ≤ n ≤ 400) — the number of teams to be formed.\n\nThe i-th line (i > 1) contains i - 1 numbers ai1, ai2, ... , ai(i - 1). Here aij (1 ≤ aij ≤ 106, all aij are distinct) denotes the strength of a team consisting of person i and person j (people are numbered starting from 1.)\n\nOutput Format:\nOutput a line containing 2n numbers. The i-th number should represent the number of teammate of i-th person.\n\nExamples:\nExample 1:\nInput:\n2\n6\n1 2\n3 4 5\nOutput:\n2 1 4 3\n\nExample 2:\nInput:\n3\n487060\n3831 161856\n845957 794650 976977\n83847 50566 691206 498447\n698377 156232 59015 382455 626960\nOutput:\n6 5 4 3 2 1\n\nNote:\nIn the first sample, contestant 1 and 2 will be teammates and so do contestant 3 and 4, so the teammate of contestant 1, 2, 3, 4 will be 2, 1, 4, 3 respectively.",
    "examples": [
      {
        "input": "2\n6\n1 2\n3 4 5",
        "output": "2 1 4 3"
      },
      {
        "input": "3\n487060\n3831 161856\n845957 794650 976977\n83847 50566 691206 498447\n698377 156232 59015 382455 626960",
        "output": "6 5 4 3 2 1"
      }
    ],
    "solution": "n = int(input())\r\nstrengths = []\r\nfor i in range(1, 2 * n):\r\n    strengths.append(list(map(int, input().split())))\r\n\r\n# Initialize the teammates array\r\nteammates = [0] * (2 * n)\r\n\r\n# Sort the strengths in descending order\r\npairs = []\r\nfor i in range(1, 2 * n):\r\n    for j in range(i):\r\n        pairs.append((strengths[i - 1][j], i, j))\r\npairs.sort(reverse=True)\r\n\r\n# Pair the contestants greedily\r\nfor s, i, j in pairs:\r\n    # If both contestants are unpaired, pair them\r\n    if teammates[i] == 0 and teammates[j] == 0:\r\n        teammates[i] = j + 1\r\n        teammates[j] = i + 1\r\n\r\n# Print the output\r\nprint(*teammates)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "608/B",
    "problem": "Title: Hamming Distance Sum\n\nGenos needs your help. He was asked to solve the following programming problem by Saitama:\n\nThe length of some string s is denoted |s|. The Hamming distance between two strings s and t of equal length is defined as $$\\sum_{i=1}^{|s|} |s_i - t_i|$$, where si is the i-th character of s and ti is the i-th character of t. For example, the Hamming distance between string \"0011\" and string \"0110\" is |0 - 0| + |0 - 1| + |1 - 1| + |1 - 0| = 0 + 1 + 0 + 1 = 2.\n\nGiven two binary strings a and b, find the sum of the Hamming distances between a and all contiguous substrings of b of length |a|.\n\nInput Format:\nThe first line of the input contains binary string a (1 ≤ |a| ≤ 200 000).\n\nThe second line of the input contains binary string b (|a| ≤ |b| ≤ 200 000).\n\nBoth strings are guaranteed to consist of characters '0' and '1' only.\n\nOutput Format:\nPrint a single integer — the sum of Hamming distances between a and all contiguous substrings of b of length |a|.\n\nExamples:\nExample 1:\nInput:\n01\n00111\nOutput:\n3\n\nExample 2:\nInput:\n0011\n0110\nOutput:\n2\n\nNote:\nFor the first sample case, there are four contiguous substrings of b of length |a|: \"00\", \"01\", \"11\", and \"11\". The distance between \"01\" and \"00\" is |0 - 0| + |1 - 0| = 1. The distance between \"01\" and \"01\" is |0 - 0| + |1 - 1| = 0. The distance between \"01\" and \"11\" is |0 - 1| + |1 - 1| = 1. Last distance counts twice, as there are two occurrences of string \"11\". The sum of these edit distances is 1 + 0 + 1 + 1 = 3.\n\nThe second sample case is described in the statement.",
    "examples": [
      {
        "input": "01\n00111",
        "output": "3"
      },
      {
        "input": "0011\n0110",
        "output": "2"
      }
    ],
    "solution": "first_string = input()\r\nsecond_string = input()\r\ninfo ={\r\n    \"F_S_L\" : len(first_string) ,\r\n    \"S_S_L\" : len(second_string)\r\n}\r\narr = []\r\ncounter = 0\r\nif info[\"F_S_L\"] == info[\"S_S_L\"] :\r\n    for i in range(0 , info[\"S_S_L\"]) :\r\n        counter += abs(int(second_string[i]) - int(first_string[i]) )\r\nelse :\r\n    for i in range(0 , info[\"S_S_L\"]) :\r\n        #element of second string\r\n        E_O_S_S = int(second_string[i])\r\n        #the opposite\r\n        opposit = 0 if E_O_S_S == 1 else 1\r\n        if i < info[\"F_S_L\"] :\r\n            #element of first string\r\n            E_O_F_S = int(first_string[i])\r\n            if i == 0 :\r\n                arr.append([0 , 0])\r\n            else :\r\n                arr.append([arr[-1][0] , arr[-1][1]])\r\n            arr[-1][E_O_F_S] += 1\r\n        if info[\"S_S_L\"] - 1 - i < info[\"F_S_L\"] - 1 :\r\n            start = arr[-1]\r\n            x = info[\"F_S_L\"] - (info[\"S_S_L\"] - 1- i +2)\r\n            end   = arr[x]\r\n            ar    = [abs(start[0] - end[0] ), abs(start[1] - end[1]) ]\r\n            counter += ar[opposit]\r\n        elif i < info[\"F_S_L\"] :\r\n            counter += arr[i][opposit]\r\n        else :\r\n            counter += arr[-1][opposit]\r\nprint(counter)\r\n",
    "explanation": "We are trying to find $$\\sum_{i=0}^{|b|-|a|-1} \\sum_{j=0}^{|a|-1} |a[j] - b[i+j]|$$. Swapping the sums, we see that this is equivalent to $$\\sum_{j=0}^{|a|-1} \\sum_{i=0}^{|b|-|a|} |a[j] - b[i+j]|$$.\nSumming up the answer in the naive fashion will give an O(n2) solution. However, notice that we can actually find $$\\frac{|b|-|a|}{2} \\sum_{i=0}^{|b|-|a|} |a[j] - b[i+j]|$$ without going through each individual character. Rather, all we need is a frequency count of different characters. To obtain this frequency count, we can simply build prefix count arrays of all characters on b. Let's call this prefix count array F, where F[x][c] gives the number of occurrences of the character c in the prefix [0, x) of b. We can then write $$\\sum_{j=0}^{|a|-1} \\sum_{i=0}^{|b|-|a|} |a[j] - b[i+j]|$$. as $$\\sum_{j=0}^{|a|-1}\\sum_{c=a}^{z}|a[j]-c|\\cdot(F[|b|-|a|+j+1][c]-F[j][c])$$. This gives us a linear solution, albeit with a slightly large constant factor.\nTime Complexity - O(|a| + |b|), Memory Complexity - O(|b|)"
  },
  {
    "id": "490/B",
    "problem": "Title: Queue\n\nDuring the lunch break all n Berland State University students lined up in the food court. However, it turned out that the food court, too, has a lunch break and it temporarily stopped working.\n\nStanding in a queue that isn't being served is so boring! So, each of the students wrote down the number of the student ID of the student that stands in line directly in front of him, and the student that stands in line directly behind him. If no one stands before or after a student (that is, he is the first one or the last one), then he writes down number 0 instead (in Berland State University student IDs are numerated from 1).\n\nAfter that, all the students went about their business. When they returned, they found out that restoring the queue is not such an easy task.\n\nHelp the students to restore the state of the queue by the numbers of the student ID's of their neighbors in the queue.\n\nInput Format:\nThe first line contains integer n (2 ≤ n ≤ 2·105) — the number of students in the queue.\n\nThen n lines follow, i-th line contains the pair of integers ai, bi (0 ≤ ai, bi ≤ 106), where ai is the ID number of a person in front of a student and bi is the ID number of a person behind a student. The lines are given in the arbitrary order. Value 0 is given instead of a neighbor's ID number if the neighbor doesn't exist.\n\nThe ID numbers of all students are distinct. It is guaranteed that the records correspond too the queue where all the students stand in some order.\n\nOutput Format:\nPrint a sequence of n integers x1, x2, ..., xn — the sequence of ID numbers of all the students in the order they go in the queue from the first student to the last one.\n\nExamples:\nExample 1:\nInput:\n4\n92 31\n0 7\n31 0\n7 141\nOutput:\n92 7 31 141\n\nNote:\nThe picture illustrates the queue for the first sample.",
    "examples": [
      {
        "input": "4\n92 31\n0 7\n31 0\n7 141",
        "output": "92 7 31 141"
      }
    ],
    "solution": "n = int(input())\ncd = set()\ntrace = {}\nnodes = set()\n\nfor _ in range(n):\n    a, b = input().split()\n    if a == '0':\n        a = 'start'\n    if b == '0':\n        b = 'end'\n    cd.add(b)\n    nodes.add(a)\n    nodes.add(b)\n    trace[a] = b\n\nfirst, second = -1, trace.get('start')\nfor nd in nodes:\n    if nd not in cd and nd != 'start':\n        first = nd\n\nwhile first or second:\n    if first and first != 'end':\n        print(first, end=\" \")\n    if second and second != 'end':\n        print(second, end=\" \")\n    first = trace.get(first)\n    second = trace.get(second)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1006/C",
    "problem": "Title: Three Parts of the Array\n\nYou are given an array $$$d_1, d_2, \\dots, d_n$$$ consisting of $$$n$$$ integer numbers.\n\nYour task is to split this array into three parts (some of which may be empty) in such a way that each element of the array belongs to exactly one of the three parts, and each of the parts forms a consecutive contiguous subsegment (possibly, empty) of the original array.\n\nLet the sum of elements of the first part be $$$sum_1$$$, the sum of elements of the second part be $$$sum_2$$$ and the sum of elements of the third part be $$$sum_3$$$. Among all possible ways to split the array you have to choose a way such that $$$sum_1 = sum_3$$$ and $$$sum_1$$$ is maximum possible.\n\nMore formally, if the first part of the array contains $$$a$$$ elements, the second part of the array contains $$$b$$$ elements and the third part contains $$$c$$$ elements, then:\n\n$$$$$$sum_1 = \\sum\\limits_{1 \\le i \\le a}d_i,$$$$$$ $$$$$$sum_2 = \\sum\\limits_{a + 1 \\le i \\le a + b}d_i,$$$$$$ $$$$$$sum_3 = \\sum\\limits_{a + b + 1 \\le i \\le a + b + c}d_i.$$$$$$\n\nThe sum of an empty array is $$$0$$$.\n\nYour task is to find a way to split the array such that $$$sum_1 = sum_3$$$ and $$$sum_1$$$ is maximum possible.\n\nInput Format:\nThe first line of the input contains one integer $$$n$$$ ($$$1 \\le n \\le 2 \\cdot 10^5$$$) — the number of elements in the array $$$d$$$.\n\nThe second line of the input contains $$$n$$$ integers $$$d_1, d_2, \\dots, d_n$$$ ($$$1 \\le d_i \\le 10^9$$$) — the elements of the array $$$d$$$.\n\nOutput Format:\nPrint a single integer — the maximum possible value of $$$sum_1$$$, considering that the condition $$$sum_1 = sum_3$$$ must be met.\n\nObviously, at least one valid way to split the array exists (use $$$a=c=0$$$ and $$$b=n$$$).\n\nExamples:\nExample 1:\nInput:\n5\n1 3 1 1 4\nOutput:\n5\n\nExample 2:\nInput:\n5\n1 3 2 1 4\nOutput:\n4\n\nExample 3:\nInput:\n3\n4 1 2\nOutput:\n0\n\nNote:\nIn the first example there is only one possible splitting which maximizes $$$sum_1$$$: $$$[1, 3, 1], [~], [1, 4]$$$.\n\nIn the second example the only way to have $$$sum_1=4$$$ is: $$$[1, 3], [2, 1], [4]$$$.\n\nIn the third example there is only one way to split the array: $$$[~], [4, 1, 2], [~]$$$.",
    "examples": [
      {
        "input": "5\n1 3 1 1 4",
        "output": "5"
      },
      {
        "input": "5\n1 3 2 1 4",
        "output": "4"
      },
      {
        "input": "3\n4 1 2",
        "output": "0"
      }
    ],
    "solution": "a=int(input())\r\nz=list(map(int,input().split()))\r\ni=0;j=a-1\r\ns,s1,s2=0,0,0\r\nwhile(i<=j):\r\n    if s1==s2:\r\n        s=s1\r\n        s2+=z[j]\r\n        j-=1\r\n    elif s1>s2:s2+=z[j];j-=1\r\n    else:s1+=z[i];i+=1\r\nif s1==s2:print(max(s1,s))\r\nelse:print(s)",
    "explanation": "Since the given array consists of positive integers, for each value of $$$a$$$, there can be at most one value of $$$c$$$ such that $$$sum_1 = sum_3$$$. We can use binary search on the array of prefix sums of $$$d$$$ to find the correct value of $$$c$$$, given that it exists. If it does exist and $$$a+c \\le n$$$, this is a candidate solution so we store it. Alternatively, we can use the two pointers trick – when $$$a$$$ increases, $$$c$$$ cannot decrease. Be careful to use 64 bit integers to store sums.\nOverall complexity is $$$O(n \\log n)$$$ or $$$O(n)$$$."
  },
  {
    "id": "558/A",
    "problem": "Title: Lala Land and Apple Trees\n\nAmr lives in Lala Land. Lala Land is a very beautiful country that is located on a coordinate line. Lala Land is famous with its apple trees growing everywhere.\n\nLala Land has exactly n apple trees. Tree number i is located in a position xi and has ai apples growing on it. Amr wants to collect apples from the apple trees. Amr currently stands in x = 0 position. At the beginning, he can choose whether to go right or left. He'll continue in his direction until he meets an apple tree he didn't visit before. He'll take all of its apples and then reverse his direction, continue walking in this direction until he meets another apple tree he didn't visit before and so on. In the other words, Amr reverses his direction when visiting each new apple tree. Amr will stop collecting apples when there are no more trees he didn't visit in the direction he is facing.\n\nWhat is the maximum number of apples he can collect?\n\nInput Format:\nThe first line contains one number n (1 ≤ n ≤ 100), the number of apple trees in Lala Land.\n\nThe following n lines contains two integers each xi, ai ( - 105 ≤ xi ≤ 105, xi ≠ 0, 1 ≤ ai ≤ 105), representing the position of the i-th tree and number of apples on it.\n\nIt's guaranteed that there is at most one apple tree at each coordinate. It's guaranteed that no tree grows in point 0.\n\nOutput Format:\nOutput the maximum number of apples Amr can collect.\n\nExamples:\nExample 1:\nInput:\n2\n-1 5\n1 5\nOutput:\n10\n\nExample 2:\nInput:\n3\n-2 2\n1 4\n-1 3\nOutput:\n9\n\nExample 3:\nInput:\n3\n1 9\n3 5\n7 10\nOutput:\n9\n\nNote:\nIn the first sample test it doesn't matter if Amr chose at first to go left or right. In both cases he'll get all the apples.\n\nIn the second sample test the optimal solution is to go left to x =  - 1, collect apples from there, then the direction will be reversed, Amr has to go to x = 1, collect apples from there, then the direction will be reversed and Amr goes to the final tree x =  - 2.\n\nIn the third sample test the optimal solution is to go right to x = 1, collect apples from there, then the direction will be reversed and Amr will not be able to collect anymore apples because there are no apple trees to his left.",
    "examples": [
      {
        "input": "2\n-1 5\n1 5",
        "output": "10"
      },
      {
        "input": "3\n-2 2\n1 4\n-1 3",
        "output": "9"
      },
      {
        "input": "3\n1 9\n3 5\n7 10",
        "output": "9"
      }
    ],
    "solution": "n = int(input())\r\n\r\npos = []\r\nneg = []\r\nfor _ in range(n):\r\n    xi, ai = map(int,input().split())\r\n    if xi > 0:\r\n        pos.append((xi, ai))\r\n    else:\r\n        neg.append((xi, ai))\r\n\r\nlim = min(len(pos), len(neg))\r\n\r\nans = 0\r\n\r\nif len(pos) > len(neg):\r\n    for x, a in sorted(pos)[:lim+1]:\r\n        ans += a\r\n\r\n    for x, a in sorted(neg)[-lim:]:\r\n        ans += a\r\nelif len(pos) < len(neg):\r\n    for x, a in sorted(pos)[:lim]:\r\n        ans += a\r\n\r\n    for x, a in sorted(neg)[-lim-1:]:\r\n        ans += a\r\nelse:\r\n    for x, a in sorted(pos)[:lim]:\r\n        ans += a\r\n\r\n    for x, a in sorted(neg)[-lim:]:\r\n        ans += a\r\n        \r\n\r\nprint(ans)\r\n\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "31/A",
    "problem": "Title: Worms Evolution\n\nProfessor Vasechkin is studying evolution of worms. Recently he put forward hypotheses that all worms evolve by division. There are n forms of worms. Worms of these forms have lengths a1, a2, ..., an. To prove his theory, professor needs to find 3 different forms that the length of the first form is equal to sum of lengths of the other two forms. Help him to do this.\n\nInput Format:\nThe first line contains integer n (3 ≤ n ≤ 100) — amount of worm's forms. The second line contains n space-separated integers ai (1 ≤ ai ≤ 1000) — lengths of worms of each form.\n\nOutput Format:\nOutput 3 distinct integers i j k (1 ≤ i, j, k ≤ n) — such indexes of worm's forms that ai = aj + ak. If there is no such triple, output -1. If there are several solutions, output any of them. It possible that aj = ak.\n\nExamples:\nExample 1:\nInput:\n5\n1 2 3 5 7\nOutput:\n3 2 1\n\nExample 2:\nInput:\n5\n1 8 1 5 1\nOutput:\n-1",
    "examples": [
      {
        "input": "5\n1 2 3 5 7",
        "output": "3 2 1"
      },
      {
        "input": "5\n1 8 1 5 1",
        "output": "-1"
      }
    ],
    "solution": "n = int(input())\r\ndata = list(input().split())\r\nnumbers_list = list(map(int, data))\r\nnumbers = sorted(numbers_list)\r\n\r\ni = 0\r\nj = 1\r\n\r\nwhile i != n - 1:\r\n    if numbers[i] + numbers[j] not in numbers:\r\n        if i == n - 2:\r\n            print(\"-1\")\r\n            break\r\n        if j != n - 1:\r\n            j += 1\r\n        else:\r\n            i += 1\r\n            j = i + 1\r\n\r\n    else:\r\n        target = numbers[i] + numbers[j]\r\n        if numbers[i] != numbers[j]:\r\n            first = numbers[i]\r\n            second = numbers[j]\r\n            print(f\"{numbers_list.index(target) + 1} {numbers_list.index(second) + 1} {numbers_list.index(first) + 1}\")\r\n            break\r\n        else:\r\n            twin = numbers[i]\r\n            first = [i for i, n in enumerate(numbers) if n == twin][0]\r\n            second = [i for i, n in enumerate(numbers) if n == twin][1]\r\n            print(f\"{numbers_list.index(target) + 1} {second + 1} {first + 1}\")\r\n            break",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "159/B",
    "problem": "Title: Matchmaker\n\nPolycarpus has n markers and m marker caps. Each marker is described by two numbers: xi is the color and yi is the diameter. Correspondingly, each cap is described by two numbers: aj is the color and bj is the diameter. Cap (aj, bj) can close marker (xi, yi) only if their diameters match, that is, bj = yi. Besides, a marker is considered to be beautifully closed, if the cap color and the marker color match, that is, aj = xi.\n\nFind the way to close the maximum number of markers. If there are several such ways, then choose the one that has the maximum number of beautifully closed markers.\n\nInput Format:\nThe first input line contains two space-separated integers n and m (1 ≤ n, m ≤ 105) — the number of markers and the number of caps, correspondingly.\n\nNext n lines describe the markers. The i-th line contains two space-separated integers xi, yi (1 ≤ xi, yi ≤ 1000) — the i-th marker's color and diameter, correspondingly.\n\nNext m lines describe the caps. The j-th line contains two space-separated integers aj, bj (1 ≤ aj, bj ≤ 1000) — the color and diameter of the j-th cap, correspondingly.\n\nOutput Format:\nPrint two space-separated integers u, v, where u is the number of closed markers and v is the number of beautifully closed markers in the sought optimal way. Remember that you have to find the way to close the maximum number of markers, and if there are several such ways, you should choose the one where the number of beautifully closed markers is maximum.\n\nExamples:\nExample 1:\nInput:\n3 4\n1 2\n3 4\n2 4\n5 4\n2 4\n1 1\n1 2\nOutput:\n3 2\n\nExample 2:\nInput:\n2 2\n1 2\n2 1\n3 4\n5 1\nOutput:\n1 0\n\nNote:\nIn the first test sample the first marker should be closed by the fourth cap, the second marker should be closed by the first cap and the third marker should be closed by the second cap. Thus, three markers will be closed, and two of them will be beautifully closed — the first and the third markers.",
    "examples": [
      {
        "input": "3 4\n1 2\n3 4\n2 4\n5 4\n2 4\n1 1\n1 2",
        "output": "3 2"
      },
      {
        "input": "2 2\n1 2\n2 1\n3 4\n5 1",
        "output": "1 0"
      }
    ],
    "solution": "import sys\r\nimport math            \r\n\r\nn, m = list(map(int, input().split()))\r\n\r\nc = []\r\nz = [0] * 1000\r\nk = [0] * 1000\r\nfor i in range(1000):\r\n    c.append([0] * 1000)\r\n\r\nfor i in range(n):\r\n    x, y = list(map(int, input().split()))\r\n    c[x - 1][y - 1] += 1\r\n    z[y - 1] += 1\r\n\r\nca = 0\r\ncb = 0\r\nfor i in range(m):\r\n    a, b = list(map(int, input().split()))\r\n    if(c[a - 1][b - 1] > 0):\r\n        ca += 1\r\n        cb += 1\r\n        c[a - 1][b - 1] -= 1\r\n        z[b - 1] -= 1\r\n    else:\r\n        k[b - 1] += 1\r\n\r\nfor i in range(1000):\r\n    ca += min(z[i], k[i])\r\n      \r\nprint(ca, cb)\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "549/B",
    "problem": "Title: Looksery Party\n\nThe Looksery company, consisting of n staff members, is planning another big party. Every employee has his phone number and the phone numbers of his friends in the phone book. Everyone who comes to the party, sends messages to his contacts about how cool it is. At the same time everyone is trying to spend as much time on the fun as possible, so they send messages to everyone without special thinking, moreover, each person even sends a message to himself or herself.\n\nIgor and Max, Looksery developers, started a dispute on how many messages each person gets. Igor indicates n numbers, the i-th of which indicates how many messages, in his view, the i-th employee is going to take. If Igor guesses correctly at least one of these numbers, he wins, otherwise Max wins.\n\nYou support Max in this debate, so you need, given the contact lists of the employees, to determine whether there is a situation where Igor loses. Specifically, you need to determine which employees should come to the party, and which should not, so after all the visitors send messages to their contacts, each employee received a number of messages that is different from what Igor stated.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of employees of company Looksery.\n\nNext n lines contain the description of the contact lists of the employees. The i-th of these lines contains a string of length n, consisting of digits zero and one, specifying the contact list of the i-th employee. If the j-th character of the i-th string equals 1, then the j-th employee is in the i-th employee's contact list, otherwise he isn't. It is guaranteed that the i-th character of the i-th line is always equal to 1.\n\nThe last line contains n space-separated integers: a1, a2, ..., an (0 ≤ ai ≤ n), where ai represents the number of messages that the i-th employee should get according to Igor.\n\nOutput Format:\nIn the first line print a single integer m — the number of employees who should come to the party so that Igor loses the dispute.\n\nIn the second line print m space-separated integers — the numbers of these employees in an arbitrary order.\n\nIf Igor wins the dispute in any case, print -1.\n\nIf there are multiple possible solutions, print any of them.\n\nExamples:\nExample 1:\nInput:\n3\n101\n010\n001\n0 1 2\nOutput:\n1\n1\n\nExample 2:\nInput:\n1\n1\n1\nOutput:\n0\n\nExample 3:\nInput:\n4\n1111\n0101\n1110\n0001\n1 0 1 0\nOutput:\n4\n1 2 3 4\n\nNote:\nIn the first sample Igor supposes that the first employee will receive 0 messages. Since he isn't contained in any other contact list he must come to the party in order to receive one message from himself. If he is the only who come to the party then he will receive 1 message, the second employee will receive 0 messages and the third will also receive 1 message. Thereby Igor won't guess any number.\n\nIn the second sample if the single employee comes to the party he receives 1 message and Igor wins, so he shouldn't do it.\n\nIn the third sample the first employee will receive 2 messages, the second — 3, the third — 2, the fourth — 3.",
    "examples": [
      {
        "input": "3\n101\n010\n001\n0 1 2",
        "output": "1\n1"
      },
      {
        "input": "1\n1\n1",
        "output": "0"
      },
      {
        "input": "4\n1111\n0101\n1110\n0001\n1 0 1 0",
        "output": "4\n1 2 3 4"
      }
    ],
    "solution": "n=int(input().strip())\r\n\r\nnums=['']+[' '+input().strip() for _ in range(n)]\r\na=[0]+list(map(int,input().split()))\r\n\r\n\r\ndef send(x):\r\n    for i in range(1,n+1):\r\n        if nums[x][i]=='1':\r\n            a[i]-=1\r\n\r\nvis=[0]*(n+1)\r\nwhile True:\r\n    for i in range(1,n+1):\r\n        if not vis[i] and not a[i]:\r\n            vis[i]=1\r\n            send(i)\r\n            break\r\n    else:\r\n        for i in range(1,n+1):\r\n            if not a[i]:\r\n                print(-1)\r\n                exit()\r\n        break\r\n\r\n\r\nans=[]\r\nfor i in range(1,n+1):\r\n    if vis[i]:\r\n        ans.append(i)\r\n\r\nif ans:\r\n    print(len(ans))\r\n    print(*ans)\r\nelse:\r\n    print(0)\r\n",
    "explanation": "In any cases there is such set of people that if they come on party and send messages to their contacts then each employee receives the number of messages that is different from what Igor pointed. Let's show how to build such set. There are 2 cases.\n1. There are no zeros among Igor's numbers. So if nobody comes on party then each employee receives 0 messages and, therefore, the desired set is empty.\n2. There is at least one zero. Suppose Igor thinks that i-th employee will receive 0 messages. Then we should add i-th employee in the desired set. He will send messages to his contacts and will receive 1 message from himself. If we add other employees in the desired set then the number of messages that i-th employee will receive will not decrease so we can remove him from considering. Igor pointed some numbers for people from contact list of i-th employee and because they have already received one message we need to decrease these numbers by one. After that we can consider the same problem but with number of employees equals to n - 1. If the remaining number of employees is equal to 0 then the desired set is built."
  },
  {
    "id": "1/C",
    "problem": "Title: Ancient Berland Circus\n\nNowadays all circuses in Berland have a round arena with diameter 13 meters, but in the past things were different.\n\nIn Ancient Berland arenas in circuses were shaped as a regular (equiangular) polygon, the size and the number of angles could vary from one circus to another. In each corner of the arena there was a special pillar, and the rope strung between the pillars marked the arena edges.\n\nRecently the scientists from Berland have discovered the remains of the ancient circus arena. They found only three pillars, the others were destroyed by the time.\n\nYou are given the coordinates of these three pillars. Find out what is the smallest area that the arena could have.\n\nInput Format:\nThe input file consists of three lines, each of them contains a pair of numbers –– coordinates of the pillar. Any coordinate doesn't exceed 1000 by absolute value, and is given with at most six digits after decimal point.\n\nOutput Format:\nOutput the smallest possible area of the ancient arena. This number should be accurate to at least 6 digits after the decimal point. It's guaranteed that the number of angles in the optimal polygon is not larger than 100.\n\nExamples:\nExample 1:\nInput:\n0.000000 0.000000\n1.000000 1.000000\n0.000000 1.000000\nOutput:\n1.00000000",
    "examples": [
      {
        "input": "0.000000 0.000000\n1.000000 1.000000\n0.000000 1.000000",
        "output": "1.00000000"
      }
    ],
    "solution": "from decimal import Decimal\r\nimport math\r\n\r\ndef dis(x1, y1, x2, y2):\r\n\treturn math.sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1))\r\n\r\ndef ang(a, b, c):\r\n\treturn math.acos((a*a + b * b - c * c) / (2.0 * a*b))\r\n\r\ndef zero(n):\r\n\treturn (n < 1e-3) and (n > -1e-3)\r\n\r\ndef check(n):\r\n\treturn zero(n - math.trunc(n + 0.5000))\r\n\r\nx1, y1 = map(Decimal, input().split())\r\nx2, y2 = map(Decimal, input().split())\r\nx3, y3 = map(Decimal, input().split())\r\n\r\na = dis(x1, y1, x2, y2)\r\nb = dis(x1, y1, x3, y3)\r\nc = dis(x2, y2, x3, y3)\r\n\r\ncc = 0.5 * (a + b + c)\r\n\r\nSabc = math.sqrt(cc * (cc - a) * (cc - b) * (cc - c))\r\n\r\nA = ang(a, b, c) / math.pi\r\nB = ang(b, c, a) / math.pi\r\nC = ang(c, a, b) / math.pi\r\n\r\nfor i in range(3, 1001):\r\n    if check(A*i) and check(B*i) and check(C*i):\r\n        break\r\n\r\nR = a * b * c / (4.0 * Sabc)\r\nt = 2.0 * math.pi / i\r\nMinS = R * R * math.sin(t) * math.pi / t\r\nprint('%.8f' % (MinS))\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "21/A",
    "problem": "Title: Jabber ID\n\nJabber ID on the national Berland service «Babber» has a form <username>@<hostname>[/resource], where\n\n- <username> — is a sequence of Latin letters (lowercase or uppercase), digits or underscores characters «_», the length of <username> is between 1 and 16, inclusive.\n- <hostname> — is a sequence of word separated by periods (characters «.»), where each word should contain only characters allowed for <username>, the length of each word is between 1 and 16, inclusive. The length of <hostname> is between 1 and 32, inclusive.\n- <resource> — is a sequence of Latin letters (lowercase or uppercase), digits or underscores characters «_», the length of <resource> is between 1 and 16, inclusive.\n\nThe content of square brackets is optional — it can be present or can be absent.\n\nThere are the samples of correct Jabber IDs: [email protected], [email protected]/contest.\n\nYour task is to write program which checks if given string is a correct Jabber ID.\n\nInput Format:\nThe input contains of a single line. The line has the length between 1 and 100 characters, inclusive. Each characters has ASCII-code between 33 and 127, inclusive.\n\nOutput Format:\nPrint YES or NO.\n\nExamples:\nExample 1:\nInput:\n[email protected]\nOutput:\nYES\n\nExample 2:\nInput:\n[email protected]\n/contest.icpc/12\nOutput:\nNO",
    "examples": [
      {
        "input": "[email protected]",
        "output": "YES"
      },
      {
        "input": "[email protected]\n/contest.icpc/12",
        "output": "NO"
      }
    ],
    "solution": "import re\r\n\r\ns = input()\r\nreg = re.compile(r'^\\w{1,16}@(\\w{1,16}\\.)*\\w{1,16}(/\\w{1,16})?$')\r\n \r\nif reg.match(s):\r\n\tprint(\"YES\")\r\nelse:\r\n\tprint(\"NO\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "691/B",
    "problem": "Title: s-palindrome\n\nLet's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\nEnglish alphabet\n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\nInput Format:\nThe only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.\n\nOutput Format:\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\nExamples:\nExample 1:\nInput:\noXoxoXo\nOutput:\nTAK\n\nExample 2:\nInput:\nbod\nOutput:\nTAK\n\nExample 3:\nInput:\nER\nOutput:\nNIE",
    "examples": [
      {
        "input": "oXoxoXo",
        "output": "TAK"
      },
      {
        "input": "bod",
        "output": "TAK"
      },
      {
        "input": "ER",
        "output": "NIE"
      }
    ],
    "solution": "t = input()\nk = len(t) // 2 + 1\np = zip(t[:k], t[-k:][::-1])\nu, v = 'AHIMOoTUVvWwXxY', 'bd db pq qp'\ns = all(a in u and a == b or a + b in v for a, b in p)\nprint(['NIE', 'TAK'][s])\n\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t \t\t  \t\t \t",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "750/A",
    "problem": "Title: New Year and Hurry\n\nLimak is going to participate in a contest on the last day of the 2016. The contest will start at 20:00 and will last four hours, exactly until midnight. There will be n problems, sorted by difficulty, i.e. problem 1 is the easiest and problem n is the hardest. Limak knows it will take him 5·i minutes to solve the i-th problem.\n\nLimak's friends organize a New Year's Eve party and Limak wants to be there at midnight or earlier. He needs k minutes to get there from his house, where he will participate in the contest first.\n\nHow many problems can Limak solve if he wants to make it to the party?\n\nInput Format:\nThe only line of the input contains two integers n and k (1 ≤ n ≤ 10, 1 ≤ k ≤ 240) — the number of the problems in the contest and the number of minutes Limak needs to get to the party from his house.\n\nOutput Format:\nPrint one integer, denoting the maximum possible number of problems Limak can solve so that he could get to the party at midnight or earlier.\n\nExamples:\nExample 1:\nInput:\n3 222\nOutput:\n2\n\nExample 2:\nInput:\n4 190\nOutput:\n4\n\nExample 3:\nInput:\n7 1\nOutput:\n7\n\nNote:\nIn the first sample, there are 3 problems and Limak needs 222 minutes to get to the party. The three problems require 5, 10 and 15 minutes respectively. Limak can spend 5 + 10 = 15 minutes to solve first two problems. Then, at 20:15 he can leave his house to get to the party at 23:57 (after 222 minutes). In this scenario Limak would solve 2 problems. He doesn't have enough time to solve 3 problems so the answer is 2.\n\nIn the second sample, Limak can solve all 4 problems in 5 + 10 + 15 + 20 = 50 minutes. At 20:50 he will leave the house and go to the party. He will get there exactly at midnight.\n\nIn the third sample, Limak needs only 1 minute to get to the party. He has enough time to solve all 7 problems.",
    "examples": [
      {
        "input": "3 222",
        "output": "2"
      },
      {
        "input": "4 190",
        "output": "4"
      },
      {
        "input": "7 1",
        "output": "7"
      }
    ],
    "solution": "def solve(n, k):\r\n    l = 240 - k\r\n    for i in range(1, n+1):\r\n        if l >= 5*i:\r\n            l -= 5*i\r\n        else:\r\n            return i-1\r\n    return n\r\n\r\n\r\nn, k = list(map(int, input().split()))\r\nprint(solve(n, k))",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "797/C",
    "problem": "Title: Minimal string\n\nPetya recieved a gift of a string s with length up to 105 characters for his birthday. He took two more empty strings t and u and decided to play a game. This game has two possible moves:\n\n- Extract the first character of s and append t with this character.\n- Extract the last character of t and append u with this character.\n\nPetya wants to get strings s and t empty and string u lexicographically minimal.\n\nYou should write a program that will help Petya win the game.\n\nInput Format:\nFirst line contains non-empty string s (1 ≤ |s| ≤ 105), consisting of lowercase English letters.\n\nOutput Format:\nPrint resulting string u.\n\nExamples:\nExample 1:\nInput:\ncab\nOutput:\nabc\n\nExample 2:\nInput:\nacdb\nOutput:\nabdc",
    "examples": [
      {
        "input": "cab",
        "output": "abc"
      },
      {
        "input": "acdb",
        "output": "abdc"
      }
    ],
    "solution": "import math\r\nimport bisect\r\n\r\n\r\ndef getList(method=int):\r\n    return list(map(method, input().split()))\r\n\r\n\r\ndef getInt():\r\n    return int(input())\r\n\r\n\r\ndef hasGreater(c):\r\n    global mp\r\n    for k, v in mp.items():\r\n        if c > k and v:\r\n            return True\r\n    return False\r\n\r\n\r\ns = [v for v in input()]\r\nt = []\r\nans = ''\r\nn = len(s)\r\nmp = {chr(ord('a') + i): 0 for i in range(26)}\r\nfor v in s:\r\n    mp[v] += 1\r\n\r\nfor v in s:\r\n    if len(t):\r\n        while len(t) and not hasGreater(t[-1]):\r\n            ans += t.pop()\r\n\r\n    t.append(v)\r\n    mp[v] -= 1\r\n\r\nwhile len(t):\r\n    ans += t.pop()\r\n\r\nprint(ans)\r\n",
    "explanation": "On every step you should maintain minimal alphabetic letter in current string s (this can be done by keeping array of 26 cells with number of times each letter appear in string nd updating it on every step). Let's call string t a stack and use its terms.\nNow you extract letters from s one by one. Put the letter to the top of the stack. Pop letters from the top of stack and push them to answer while they are less or equal than any letter left in string s. After string s becomes empty push all the letters from stack to answer.\nThe answer will be lexicographically minimal. It is obvious if we consider the case when current top of stack is strictly greater than any character from the remaining string s, or there is a character in s that is strictly less than current top. If current top is equal to some character then appending answer with the letter from top won't make answer worse.\nOverall complexity: O(n * |AL|), where |AL| is the length of the alpabet, 26 in our case."
  },
  {
    "id": "389/A",
    "problem": "Title: Fox and Number Game\n\nFox Ciel is playing a game with numbers now.\n\nCiel has n positive integers: x1, x2, ..., xn. She can do the following operation as many times as needed: select two different indexes i and j such that xi > xj hold, and then apply assignment xi = xi - xj. The goal is to make the sum of all numbers as small as possible.\n\nPlease help Ciel to find this minimal sum.\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 100). Then the second line contains n integers: x1, x2, ..., xn (1 ≤ xi ≤ 100).\n\nOutput Format:\nOutput a single integer — the required minimal sum.\n\nExamples:\nExample 1:\nInput:\n2\n1 2\nOutput:\n2\n\nExample 2:\nInput:\n3\n2 4 6\nOutput:\n6\n\nExample 3:\nInput:\n2\n12 18\nOutput:\n12\n\nExample 4:\nInput:\n5\n45 12 27 30 18\nOutput:\n15\n\nNote:\nIn the first example the optimal way is to do the assignment: x2 = x2 - x1.\n\nIn the second example the optimal sequence of operations is: x3 = x3 - x2, x2 = x2 - x1.",
    "examples": [
      {
        "input": "2\n1 2",
        "output": "2"
      },
      {
        "input": "3\n2 4 6",
        "output": "6"
      },
      {
        "input": "2\n12 18",
        "output": "12"
      },
      {
        "input": "5\n45 12 27 30 18",
        "output": "15"
      }
    ],
    "solution": "import fractions\n\n\nN = int(input())\nX = list(map(int, input().split()))\nnow = fractions.gcd(X[0], X[1])\nfor i in range(2, N):\n    now = fractions.gcd(now, X[i])\n\nans = now * N\nprint(ans)\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "362/B",
    "problem": "Title: Petya and Staircases\n\nLittle boy Petya loves stairs very much. But he is bored from simple going up and down them — he loves jumping over several stairs at a time. As he stands on some stair, he can either jump to the next one or jump over one or two stairs at a time. But some stairs are too dirty and Petya doesn't want to step on them.\n\nNow Petya is on the first stair of the staircase, consisting of n stairs. He also knows the numbers of the dirty stairs of this staircase. Help Petya find out if he can jump through the entire staircase and reach the last stair number n without touching a dirty stair once.\n\nOne has to note that anyway Petya should step on the first and last stairs, so if the first or the last stair is dirty, then Petya cannot choose a path with clean steps only.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n ≤ 109, 0 ≤ m ≤ 3000) — the number of stairs in the staircase and the number of dirty stairs, correspondingly. The second line contains m different space-separated integers d1, d2, ..., dm (1 ≤ di ≤ n) — the numbers of the dirty stairs (in an arbitrary order).\n\nOutput Format:\nPrint \"YES\" if Petya can reach stair number n, stepping only on the clean stairs. Otherwise print \"NO\".\n\nExamples:\nExample 1:\nInput:\n10 5\n2 4 8 3 6\nOutput:\nNO\n\nExample 2:\nInput:\n10 5\n2 4 5 7 9\nOutput:\nYES",
    "examples": [
      {
        "input": "10 5\n2 4 8 3 6",
        "output": "NO"
      },
      {
        "input": "10 5\n2 4 5 7 9",
        "output": "YES"
      }
    ],
    "solution": "\r\nn, m = map(int, input().split())\r\n\r\nif m == 0:\r\n    print(\"YES\")\r\n    quit()\r\n\r\nl_d = list(map(int, input().split()))\r\nl_d.sort()\r\nif l_d[0] == 1 or l_d[len(l_d) - 1] == n:\r\n    print(\"NO\")\r\n    quit()\r\n\r\nc = 0\r\np = -1\r\nfor d in l_d:\r\n    if d == p + 1:\r\n        c += 1\r\n    else:\r\n        c = 1\r\n    p = d\r\n    \r\n    if c == 3:\r\n        print(\"NO\")\r\n        quit()\r\nprint(\"YES\")",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "581/B",
    "problem": "Title: Luxurious Houses\n\nThe capital of Berland has n multifloor buildings. The architect who built up the capital was very creative, so all the houses were built in one row.\n\nLet's enumerate all the houses from left to right, starting with one. A house is considered to be luxurious if the number of floors in it is strictly greater than in all the houses with larger numbers. In other words, a house is luxurious if the number of floors in it is strictly greater than in all the houses, which are located to the right from it. In this task it is assumed that the heights of floors in the houses are the same.\n\nThe new architect is interested in n questions, i-th of them is about the following: \"how many floors should be added to the i-th house to make it luxurious?\" (for all i from 1 to n, inclusive). You need to help him cope with this task.\n\nNote that all these questions are independent from each other — the answer to the question for house i does not affect other answers (i.e., the floors to the houses are not actually added).\n\nInput Format:\nThe first line of the input contains a single number n (1 ≤ n ≤ 105) — the number of houses in the capital of Berland.\n\nThe second line contains n space-separated positive integers hi (1 ≤ hi ≤ 109), where hi equals the number of floors in the i-th house.\n\nOutput Format:\nPrint n integers a1, a2, ..., an, where number ai is the number of floors that need to be added to the house number i to make it luxurious. If the house is already luxurious and nothing needs to be added to it, then ai should be equal to zero.\n\nAll houses are numbered from left to right, starting from one.\n\nExamples:\nExample 1:\nInput:\n5\n1 2 3 1 2\nOutput:\n3 2 0 2 0\n\nExample 2:\nInput:\n4\n3 2 1 4\nOutput:\n2 3 4 0",
    "examples": [
      {
        "input": "5\n1 2 3 1 2",
        "output": "3 2 0 2 0"
      },
      {
        "input": "4\n3 2 1 4",
        "output": "2 3 4 0"
      }
    ],
    "solution": "t = int(input())\r\na = input().split()\r\nh = []\r\nmh = 0\r\nfor i in range(t - 1, -1, -1):\r\n    h.append(max(0, mh + 1 - int(a[i])))\r\n    mh = max(mh, int(a[i]))\r\nprint(*h[::-1])\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "146/B",
    "problem": "Title: Lucky Mask\n\nPetya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya calls a mask of a positive integer n the number that is obtained after successive writing of all lucky digits of number n from the left to the right. For example, the mask of number 72174994 is number 7744, the mask of 7 is 7, the mask of 9999047 is 47. Obviously, mask of any number is always a lucky number.\n\nPetya has two numbers — an arbitrary integer a and a lucky number b. Help him find the minimum number c (c > a) such that the mask of number c equals b.\n\nInput Format:\nThe only line contains two integers a and b (1 ≤ a, b ≤ 105). It is guaranteed that number b is lucky.\n\nOutput Format:\nIn the only line print a single number — the number c that is sought by Petya.\n\nExamples:\nExample 1:\nInput:\n1 7\nOutput:\n7\n\nExample 2:\nInput:\n100 47\nOutput:\n147",
    "examples": [
      {
        "input": "1 7",
        "output": "7"
      },
      {
        "input": "100 47",
        "output": "147"
      }
    ],
    "solution": "import sys\r\n\r\ndef fx(a):\r\n    sa=str(a)\r\n    m=\"\"\r\n    for i in range(len(sa)):\r\n        if sa[i]=='4' or sa[i]=='7':\r\n            m+=sa[i]\r\n\r\n    if len(m)>0:\r\n        n=int(m)\r\n    else:\r\n        n=0\r\n        \r\n    return n\r\n\r\na,b=map(int,input().split())\r\n\r\nwhile 1:\r\n    a+=1\r\n    x=fx(a)\r\n    if x==b:\r\n        print(a)\r\n        exit(0)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "862/A",
    "problem": "Title: Mahmoud and Ehab and the MEX\n\nDr. Evil kidnapped Mahmoud and Ehab in the evil land because of their performance in the Evil Olympiad in Informatics (EOI). He decided to give them some problems to let them go.\n\nDr. Evil is interested in sets, He has a set of n integers. Dr. Evil calls a set of integers evil if the MEX of it is exactly x. the MEX of a set of integers is the minimum non-negative integer that doesn't exist in it. For example, the MEX of the set {0, 2, 4} is 1 and the MEX of the set {1, 2, 3} is 0 .\n\nDr. Evil is going to make his set evil. To do this he can perform some operations. During each operation he can add some non-negative integer to his set or erase some element from it. What is the minimal number of operations Dr. Evil has to perform to make his set evil?\n\nInput Format:\nThe first line contains two integers n and x (1 ≤ n ≤ 100, 0 ≤ x ≤ 100) — the size of the set Dr. Evil owns, and the desired MEX.\n\nThe second line contains n distinct non-negative integers not exceeding 100 that represent the set.\n\nOutput Format:\nThe only line should contain one integer — the minimal number of operations Dr. Evil should perform.\n\nExamples:\nExample 1:\nInput:\n5 3\n0 4 5 6 7\nOutput:\n2\n\nExample 2:\nInput:\n1 0\n0\nOutput:\n1\n\nExample 3:\nInput:\n5 0\n1 2 3 4 5\nOutput:\n0\n\nNote:\nFor the first test case Dr. Evil should add 1 and 2 to the set performing 2 operations.\n\nFor the second test case Dr. Evil should erase 0 from the set. After that, the set becomes empty, so the MEX of it is 0.\n\nIn the third test case the set is already evil.",
    "examples": [
      {
        "input": "5 3\n0 4 5 6 7",
        "output": "2"
      },
      {
        "input": "1 0\n0",
        "output": "1"
      },
      {
        "input": "5 0\n1 2 3 4 5",
        "output": "0"
      }
    ],
    "solution": "g,x = [int(i) for i in input().split()]\r\nn = [int(i) for i in input().split()]\r\nh = [False] * 101\r\nfor i in n:\r\n    h[i] = True\r\np = 0\r\nfor i in range(x):\r\n    if h[i] == False:\r\n        p+=1\r\nif h[x] == True:\r\n    p+=1\r\nprint(p)\r\n",
    "explanation": "One can see that in the final set all the elements less than x should exist, x shouldn't exist and any element greater than x doesn't matter, so we will count the number of elements less than x that don't exist in the initial set and add this to the answer, If x exists we'll add 1 to the answer because x should be removed.\nTime complexity : O(n + x).\nSolution link (me) : TODO.\nSolution link ([user:mahmoudbadawy,2017-09-17]) : TODO."
  },
  {
    "id": "27/A",
    "problem": "Title: Next Test\n\n«Polygon» is a system which allows to create programming tasks in a simple and professional way. When you add a test to the problem, the corresponding form asks you for the test index. As in most cases it is clear which index the next test will have, the system suggests the default value of the index. It is calculated as the smallest positive integer which is not used as an index for some previously added test.\n\nYou are to implement this feature. Create a program which determines the default index of the next test, given the indexes of the previously added tests.\n\nInput Format:\nThe first line contains one integer n (1 ≤ n ≤ 3000) — the amount of previously added tests. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 3000) — indexes of these tests.\n\nOutput Format:\nOutput the required default value for the next test index.\n\nExamples:\nExample 1:\nInput:\n3\n1 7 2\nOutput:\n3",
    "examples": [
      {
        "input": "3\n1 7 2",
        "output": "3"
      }
    ],
    "solution": "n = int(input())\r\nnum = list(map(int,input().split()))\r\nmaxnum = max(num)\r\ndefault = (maxnum+1)*[0]\r\nfor j in range(len(num)):\r\n\tdefault[num[j]] = 1\r\n# print(default)\r\nflag = 0\r\nfor j in range(1,len(default)):\r\n\tif default[j] == 0:\r\n\t\tflag = 1\r\n\t\tans = j\r\n\t\tbreak\r\nif flag == 1:\r\n\tprint(ans)\r\nelse:\r\n\tprint(n+1)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "271/A",
    "problem": "Title: Beautiful Year\n\nIt seems like the year of 2013 came only yesterday. Do you know a curious fact? The year of 2013 is the first year after the old 1987 with only distinct digits.\n\nNow you are suggested to solve the following problem: given a year number, find the minimum year number which is strictly larger than the given one and has only distinct digits.\n\nInput Format:\nThe single line contains integer y (1000 ≤ y ≤ 9000) — the year number.\n\nOutput Format:\nPrint a single integer — the minimum year number that is strictly larger than y and all it's digits are distinct. It is guaranteed that the answer exists.\n\nExamples:\nExample 1:\nInput:\n1987\nOutput:\n2013\n\nExample 2:\nInput:\n2013\nOutput:\n2014",
    "examples": [
      {
        "input": "1987",
        "output": "2013"
      },
      {
        "input": "2013",
        "output": "2014"
      }
    ],
    "solution": "a = int(input()) + 1\r\nwhile len(set(str(a))) != 4: a += 1\r\nprint(a)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "596/B",
    "problem": "Title: Wilbur and Array\n\nWilbur the pig is tinkering with arrays again. He has the array a1, a2, ..., an initially consisting of n zeros. At one step, he can choose any index i and either add 1 to all elements ai, ai + 1, ... , an or subtract 1 from all elements ai, ai + 1, ..., an. His goal is to end up with the array b1, b2, ..., bn.\n\nOf course, Wilbur wants to achieve this goal in the minimum number of steps and asks you to compute this value.\n\nInput Format:\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the length of the array ai. Initially ai = 0 for every position i, so this array is not given in the input.\n\nThe second line of the input contains n integers b1, b2, ..., bn ( - 109 ≤ bi ≤ 109).\n\nOutput Format:\nPrint the minimum number of steps that Wilbur needs to make in order to achieve ai = bi for all i.\n\nExamples:\nExample 1:\nInput:\n5\n1 2 3 4 5\nOutput:\n5\n\nExample 2:\nInput:\n4\n1 2 2 1\nOutput:\n3\n\nNote:\nIn the first sample, Wilbur may successively choose indices 1, 2, 3, 4, and 5, and add 1 to corresponding suffixes.\n\nIn the second sample, Wilbur first chooses indices 1 and 2 and adds 1 to corresponding suffixes, then he chooses index 4 and subtract 1.",
    "examples": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "5"
      },
      {
        "input": "4\n1 2 2 1",
        "output": "3"
      }
    ],
    "solution": "a=int(input())\r\nx=list(map(int,input().split()))\r\nt=abs(x[0])\r\nif a>1:\r\n    for i in range(1,a):\r\n        t+=abs(x[i-1]-x[i])\r\nprint(t)\r\n",
    "explanation": "No matter what, we make |b1| operations to make a1 equal to b1. Once this is done, a2, a3, ... an = b1. Then no matter what, we must make |b2 - b1| operations to make a2 equal to b2. In general, to make ai = bi we need to make |bi - bi - 1| operations, so in total we make |b1| + |b2 - b1| + |b3 - b2| + ... + |bn - bn - 1| operations."
  },
  {
    "id": "821/B",
    "problem": "Title: Okabe and Banana Trees\n\nOkabe needs bananas for one of his experiments for some strange reason. So he decides to go to the forest and cut banana trees.\n\nConsider the point (x, y) in the 2D plane such that x and y are integers and 0 ≤ x, y. There is a tree in such a point, and it has x + y bananas. There are no trees nor bananas in other points. Now, Okabe draws a line with equation $$y = - \\frac { x } { m } + b$$. Okabe can select a single rectangle with axis aligned sides with all points on or under the line and cut all the trees in all points that are inside or on the border of this rectangle and take their bananas. Okabe's rectangle can be degenerate; that is, it can be a line segment or even a point.\n\nHelp Okabe and find the maximum number of bananas he can get if he chooses the rectangle wisely.\n\nOkabe is sure that the answer does not exceed 1018. You can trust him.\n\nInput Format:\nThe first line of input contains two space-separated integers m and b (1 ≤ m ≤ 1000, 1 ≤ b ≤ 10000).\n\nOutput Format:\nPrint the maximum number of bananas Okabe can get from the trees he cuts.\n\nExamples:\nExample 1:\nInput:\n1 5\nOutput:\n30\n\nExample 2:\nInput:\n2 3\nOutput:\n25\n\nNote:\nThe graph above corresponds to sample test 1. The optimal rectangle is shown in red and has 30 bananas.",
    "examples": [
      {
        "input": "1 5",
        "output": "30"
      },
      {
        "input": "2 3",
        "output": "25"
      }
    ],
    "solution": "def get2(n):\n\tres = n*(n+1)*(2*n+1)//6 + n*(n+1)//2\n\tres //= 2;\n\treturn res\n\ndef get(x,y):\n\treturn get2(x+y) - get2(x-1) - get2(y-1)\n\nm,b = input().split()\nm = int(m)\nb = int(b)\n\nmv = 0\nfor i in range(b+1):\n\tj = m*b-m*i\n\tcur = get(j,i)\n\tif cur > mv:\n\t\tmv = cur\n\nprint(mv)",
    "explanation": "The critical observation to make is that the optimal rectangle should always have a lower-left vertex at the origin. This is due to the fact that the line has positive y-intercept and negative slope: any rectangle which doesn't have a vertex at the origin could easily be extended to have a vertex at the origin and even more bananas.\nThen, we just need to try every x-coordinate for the upper-right corner of the box and pick the maximum y-coordinate without going over the line. We can compute the sum of any rectangle in O(1) using arithmetic series sums, so this becomes O(bm) because the x-intercept can be up to bm. You can make it faster by trying every y-coordinate; this makes the complexity O(b), but this was unnecessary to solve the problem.\n$$\\text{Challenge:}$$ Can you solve the problem with better complexity?"
  },
  {
    "id": "964/A",
    "problem": "Title: Splits\n\nLet's define a split of $$$n$$$ as a nonincreasing sequence of positive integers, the sum of which is $$$n$$$.\n\nFor example, the following sequences are splits of $$$8$$$: $$$[4, 4]$$$, $$$[3, 3, 2]$$$, $$$[2, 2, 1, 1, 1, 1]$$$, $$$[5, 2, 1]$$$.\n\nThe following sequences aren't splits of $$$8$$$: $$$[1, 7]$$$, $$$[5, 4]$$$, $$$[11, -3]$$$, $$$[1, 1, 4, 1, 1]$$$.\n\nThe weight of a split is the number of elements in the split that are equal to the first element. For example, the weight of the split $$$[1, 1, 1, 1, 1]$$$ is $$$5$$$, the weight of the split $$$[5, 5, 3, 3, 3]$$$ is $$$2$$$ and the weight of the split $$$[9]$$$ equals $$$1$$$.\n\nFor a given $$$n$$$, find out the number of different weights of its splits.\n\nInput Format:\nThe first line contains one integer $$$n$$$ ($$$1 \\leq n \\leq 10^9$$$).\n\nOutput Format:\nOutput one integer — the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n7\nOutput:\n4\n\nExample 2:\nInput:\n8\nOutput:\n5\n\nExample 3:\nInput:\n9\nOutput:\n5\n\nNote:\nIn the first sample, there are following possible weights of splits of $$$7$$$:\n\nWeight 1: [$$$\\textbf 7$$$]\n\nWeight 2: [$$$\\textbf 3$$$, $$$\\textbf 3$$$, 1]\n\nWeight 3: [$$$\\textbf 2$$$, $$$\\textbf 2$$$, $$$\\textbf 2$$$, 1]\n\nWeight 7: [$$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$, $$$\\textbf 1$$$]",
    "examples": [
      {
        "input": "7",
        "output": "4"
      },
      {
        "input": "8",
        "output": "5"
      },
      {
        "input": "9",
        "output": "5"
      }
    ],
    "solution": "# from dust i have come, dust i will be\r\n\r\nn=int(input())\r\nprint(n//2+1)",
    "explanation": "There are 2 cases:\nIf weight of the split equals $$$n$$$, then the split consist of ones. Here we have only 1 option.\nElse maximum number in the split is more then 1. Then we can replace all maximum numbers with twos and the rest we split into ones and weight will be the same. So, here we have $$$\\frac{n}{2}$$$ options.\nAnswer for this problem is $$$\\frac{n}{2}$$$ + 1."
  },
  {
    "id": "10/C",
    "problem": "Title: Digital Root\n\nNot long ago Billy came across such a problem, where there were given three natural numbers A, B and C from the range [1, N], and it was asked to check whether the equation AB = C is correct. Recently Billy studied the concept of a digital root of a number. We should remind you that a digital root d(x) of the number x is the sum s(x) of all the digits of this number, if s(x) ≤ 9, otherwise it is d(s(x)). For example, a digital root of the number 6543 is calculated as follows: d(6543) = d(6 + 5 + 4 + 3) = d(18) = 9. Billy has counted that the digital root of a product of numbers is equal to the digital root of the product of the factors' digital roots, i.e. d(xy) = d(d(x)d(y)). And the following solution to the problem came to his mind: to calculate the digital roots and check if this condition is met. However, Billy has doubts that this condition is sufficient. That's why he asks you to find out the amount of test examples for the given problem such that the algorithm proposed by Billy makes mistakes.\n\nInput Format:\nThe first line contains the only number N (1 ≤ N ≤ 106).\n\nOutput Format:\nOutput one number — the amount of required A, B and C from the range [1, N].\n\nExamples:\nExample 1:\nInput:\n4\nOutput:\n2\n\nExample 2:\nInput:\n5\nOutput:\n6\n\nNote:\nFor the first sample the required triples are (3, 4, 3) and (4, 3, 3).",
    "examples": [
      {
        "input": "4",
        "output": "2"
      },
      {
        "input": "5",
        "output": "6"
      }
    ],
    "solution": "n , ans , a = int(input()) , 0 , [0] * 10\r\nfor i in range(1,n+1):\r\n    ans -= (int)(n/i)\r\n    a[i % 9] += 1\r\nfor i in range(9):\r\n    for j in range(9):\r\n        ans += a[i] * a[j] * a[(i * j) % 9]\r\nprint (ans)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "863/A",
    "problem": "Title: Quasi-palindrome\n\nLet quasi-palindromic number be such number that adding some leading zeros (possible none) to it produces a palindromic string.\n\nString t is called a palindrome, if it reads the same from left to right and from right to left.\n\nFor example, numbers 131 and 2010200 are quasi-palindromic, they can be transformed to strings \"131\" and \"002010200\", respectively, which are palindromes.\n\nYou are given some integer number x. Check if it's a quasi-palindromic number.\n\nInput Format:\nThe first line contains one integer number x (1 ≤ x ≤ 109). This number is given without any leading zeroes.\n\nOutput Format:\nPrint \"YES\" if number x is quasi-palindromic. Otherwise, print \"NO\" (without quotes).\n\nExamples:\nExample 1:\nInput:\n131\nOutput:\nYES\n\nExample 2:\nInput:\n320\nOutput:\nNO\n\nExample 3:\nInput:\n2010200\nOutput:\nYES",
    "examples": [
      {
        "input": "131",
        "output": "YES"
      },
      {
        "input": "320",
        "output": "NO"
      },
      {
        "input": "2010200",
        "output": "YES"
      }
    ],
    "solution": "s=input()\r\ns=s[::-1]\r\ns=str(int(s))\r\nif s==s[::-1]:\r\n    print('YES')\r\nelse:\r\n    print('NO')",
    "explanation": "You can check if the given is quasi-palindromic by removing all the trailing zeros and checking if resulting string is a palindrome."
  },
  {
    "id": "667/A",
    "problem": "Title: Pouring Rain\n\nA lot of people in Berland hates rain, but you do not. Rain pacifies, puts your thoughts in order. By these years you have developed a good tradition — when it rains, you go on the street and stay silent for a moment, contemplate all around you, enjoy freshness, think about big deeds you have to do.\n\nToday everything had changed quietly. You went on the street with a cup contained water, your favorite drink. In a moment when you were drinking a water you noticed that the process became quite long: the cup still contained water because of rain. You decided to make a formal model of what was happening and to find if it was possible to drink all water in that situation.\n\nThus, your cup is a cylinder with diameter equals d centimeters. Initial level of water in cup equals h centimeters from the bottom.\n\nYou drink a water with a speed equals v milliliters per second. But rain goes with such speed that if you do not drink a water from the cup, the level of water increases on e centimeters per second. The process of drinking water from the cup and the addition of rain to the cup goes evenly and continuously.\n\nFind the time needed to make the cup empty or find that it will never happen. It is guaranteed that if it is possible to drink all water, it will happen not later than after 104 seconds.\n\nNote one milliliter equals to one cubic centimeter.\n\nInput Format:\nThe only line of the input contains four integer numbers d, h, v, e (1 ≤ d, h, v, e ≤ 104), where:\n\n- d — the diameter of your cylindrical cup,\n- h — the initial level of water in the cup,\n- v — the speed of drinking process from the cup in milliliters per second,\n- e — the growth of water because of rain if you do not drink from the cup.\n\nOutput Format:\nIf it is impossible to make the cup empty, print \"NO\" (without quotes).\n\nOtherwise print \"YES\" (without quotes) in the first line. In the second line print a real number — time in seconds needed the cup will be empty. The answer will be considered correct if its relative or absolute error doesn't exceed 10 - 4. It is guaranteed that if the answer exists, it doesn't exceed 104.\n\nExamples:\nExample 1:\nInput:\n1 2 3 100\nOutput:\nNO\n\nExample 2:\nInput:\n1 1 1 1\nOutput:\nYES\n3.659792366325\n\nNote:\nIn the first example the water fills the cup faster than you can drink from it.\n\nIn the second example area of the cup's bottom equals to $$\\frac{\\pi}{4}$$, thus we can conclude that you decrease the level of water by $$\\frac{4}{\\pi}$$ centimeters per second. At the same time water level increases by 1 centimeter per second due to rain. Thus, cup will be empty in $$\\frac{\\pi}{4-\\pi}$$ seconds.",
    "examples": [
      {
        "input": "1 2 3 100",
        "output": "NO"
      },
      {
        "input": "1 1 1 1",
        "output": "YES\n3.659792366325"
      }
    ],
    "solution": "d,h,v,e = map(int, input().split())\r\ndenominator = (4.00 * v) - ((d**2)*e*3.1415926)\r\nif(denominator < 0):\r\n    print(\"NO\")\r\nelse:\r\n    print(\"YES\")\r\n    numerator = 3.1415926 * (d**2) * h\r\n    answer = numerator/denominator\r\n    print(answer)",
    "explanation": "Чтобы узнать, сколько воды вы потребляете за секунду, вы должны разделить выпитый в секунду объём v на площадь дна, равную $$\\frac{\\pi d^2}{4}$$. Далее следует сравнить эту величину с e. Если ваша скорость выше, то вы опустошите кружку через $$\\frac{\\hbar}{\\frac{4v}{\\pi d^2} - e}$$ секунд. Иначе вы не сможете её опустошить."
  },
  {
    "id": "386/B",
    "problem": "Title: Fly, freebies, fly!\n\nEveryone loves a freebie. Especially students.\n\nIt is well-known that if in the night before exam a student opens window, opens the student's record-book and shouts loudly three times \"Fly, freebie, fly!\" — then flown freebie helps him to pass the upcoming exam.\n\nIn the night before the exam on mathematical analysis n students living in dormitory shouted treasured words. The i-th student made a sacrament at the time ti, where ti is the number of seconds elapsed since the beginning of the night.\n\nIt is known that the freebie is a capricious and willful lady. That night the freebie was near dormitory only for T seconds. Therefore, if for two students their sacrament times differ for more than T, then the freebie didn't visit at least one of them.\n\nSince all students are optimists, they really want to know what is the maximal number of students visited by the freebie can be.\n\nInput Format:\nThe first line of the input contains integer n (1 ≤ n ≤ 100), where n — the number of students shouted \"Fly, freebie, fly!\" The second line contains n positive integers ti (1 ≤ ti ≤ 1000).\n\nThe last line contains integer T (1 ≤ T ≤ 1000) — the time interval during which the freebie was near the dormitory.\n\nOutput Format:\nPrint a single integer — the largest number of people who will pass exam tomorrow because of the freebie visit.\n\nExamples:\nExample 1:\nInput:\n6\n4 1 7 8 3 8\n1\nOutput:\n3",
    "examples": [
      {
        "input": "6\n4 1 7 8 3 8\n1",
        "output": "3"
      }
    ],
    "solution": "n = int(input())\r\np = list(map(int,input().split()))\r\nT = int(input())\r\np.sort()\r\nfs = 0\r\nmaxx = 0\r\nfor i in range(n):\r\n    while fs<n and p[fs]-p[i]<=T:\r\n        fs+=1\r\n    maxx  = max(maxx,fs-i)\r\nprint(maxx)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "1011/A",
    "problem": "Title: Stages\n\nNatasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string — concatenation of letters, which correspond to the stages.\n\nThere are $$$n$$$ stages available. The rocket must contain exactly $$$k$$$ of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f', ..., 'z'.\n\nFor the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z' — $$$26$$$ tons.\n\nBuild the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.\n\nInput Format:\nThe first line of input contains two integers — $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 50$$$) – the number of available stages and the number of stages to use in the rocket.\n\nThe second line contains string $$$s$$$, which consists of exactly $$$n$$$ lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.\n\nOutput Format:\nPrint a single integer — the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.\n\nExamples:\nExample 1:\nInput:\n5 3\nxyabd\nOutput:\n29\n\nExample 2:\nInput:\n7 4\nproblem\nOutput:\n34\n\nExample 3:\nInput:\n2 2\nab\nOutput:\n-1\n\nExample 4:\nInput:\n12 1\nabaabbaaabbb\nOutput:\n1\n\nNote:\nIn the first example, the following rockets satisfy the condition:\n\n- \"adx\" (weight is $$$1+4+24=29$$$);\n- \"ady\" (weight is $$$1+4+25=30$$$);\n- \"bdx\" (weight is $$$2+4+24=30$$$);\n- \"bdy\" (weight is $$$2+4+25=31$$$).\n\nRocket \"adx\" has the minimal weight, so the answer is $$$29$$$.\n\nIn the second example, target rocket is \"belo\". Its weight is $$$2+5+12+15=34$$$.\n\nIn the third example, $$$n=k=2$$$, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.",
    "examples": [
      {
        "input": "5 3\nxyabd",
        "output": "29"
      },
      {
        "input": "7 4\nproblem",
        "output": "34"
      },
      {
        "input": "2 2\nab",
        "output": "-1"
      },
      {
        "input": "12 1\nabaabbaaabbb",
        "output": "1"
      }
    ],
    "solution": "n,k=map(int,input().split())\r\na=list(input())\r\na.sort()\r\nx=1\r\nt=ord(a[0])-96\r\ns=a[0]\r\nfor i in range(1,n):\r\n    if x==k:\r\n        break\r\n    if ord(a[i])-ord(s)>=2:\r\n        s=a[i]\r\n        t+=ord(a[i])-96\r\n        x+=1\r\nif x<k:\r\n    print(-1)\r\nelse:\r\n    print(t)\r\n    \r\n    \r\n    ",
    "explanation": "The problem can be solved by the following greedy algorithm.\nSort letters in increasing order. Let's try to add letters in this order. If the current letter is the first in the string, then add it to the answer. Otherwise, check: if the current letter is at least two positions later in the alphabet than the previous letter of the answer, add it to the response, otherwise go over to the next letter.\nAs soon as there are $$$k$$$ letters in the answer, print it. If after this algorithm the answer has less than $$$k$$$ letters, print -1.\nComplexity: $$$O(n\\log n)$$$."
  },
  {
    "id": "955/B",
    "problem": "Title: Not simply beatiful strings\n\nLet's call a string adorable if its letters can be realigned in such a way that they form two consequent groups of equal symbols (note that different groups must contain different symbols). For example, ababa is adorable (you can transform it to aaabb, where the first three letters form a group of a-s and others — a group of b-s), but cccc is not since in each possible consequent partition letters in these two groups coincide.\n\nYou're given a string s. Check whether it can be split into two non-empty subsequences such that the strings formed by these subsequences are adorable. Here a subsequence is an arbitrary set of indexes of the string.\n\nInput Format:\nThe only line contains s (1 ≤ |s| ≤ 105) consisting of lowercase latin letters.\n\nOutput Format:\nPrint «Yes» if the string can be split according to the criteria above or «No» otherwise.\n\nEach letter can be printed in arbitrary case.\n\nExamples:\nExample 1:\nInput:\nababa\nOutput:\nYes\n\nExample 2:\nInput:\nzzcxx\nOutput:\nYes\n\nExample 3:\nInput:\nyeee\nOutput:\nNo\n\nNote:\nIn sample case two zzcxx can be split into subsequences zc and zxx each of which is adorable.\n\nThere's no suitable partition in sample case three.",
    "examples": [
      {
        "input": "ababa",
        "output": "Yes"
      },
      {
        "input": "zzcxx",
        "output": "Yes"
      },
      {
        "input": "yeee",
        "output": "No"
      }
    ],
    "solution": "s = input()\r\nl = list(set(s))\r\nans = 1\r\nif (len(l)>4) or (len(l)<=1):\r\n    ans = 0\r\nelse:\r\n    if len(l)==2:\r\n        c1=0\r\n        c0=0\r\n        for i in range(len(s)):\r\n            if s[i]==l[0]:\r\n                c0+=1\r\n            else:\r\n                c1+=1\r\n        if (c1<2) or (c0<2):\r\n            ans = 0\r\n    if (len(l)==3):\r\n        c1 = 0\r\n        c2 = 0\r\n        c0 = 0\r\n        for i in range(len(s)):\r\n            if s[i]==l[0]:\r\n                c0+=1\r\n            if s[i]==l[1]:\r\n                c1+=1\r\n            if s[i]==l[2]:\r\n                c2+=1\r\n        if (c1+c2+c0)<4:\r\n            ans = 0\r\nif (ans==0):\r\n    print('No')\r\nelse:\r\n    print('Yes')\r\n        \r\n            \r\n        \r\n        \r\n    \r\n\r\n    \r\n",
    "explanation": "Since order of letters in adorable strings doesn't matter, it doesn't matter in the initial string as well. Let d be the number of distinct letters in s. Consider the following cases one after another:\n• If |s| < 4 answer is «No» since lengths of adorable strings cannot be less than two;\n• If d is more than 4 answer is also «No» since adorable strings contain two distinct letters;\n• If d is equal to 4 answer is always «Yes» (we give two types of letters to string one and other two to string two);\n• If d is equal to three answer is also «Yes» (based on the fact that length of s is no less than 4);\n• If d is equal to two answer depends on whether there's a letter occuring only once (because that means that one of the strings will consist of letters of the same kind);\n• If all letters are the same, answer is «No» (same as the previous case)."
  },
  {
    "id": "32/B",
    "problem": "Title: Borze\n\nTernary numeric notation is quite popular in Berland. To telegraph the ternary number the Borze alphabet is used. Digit 0 is transmitted as «.», 1 as «-.» and 2 as «--». You are to decode the Borze code, i.e. to find out the ternary number given its representation in Borze alphabet.\n\nInput Format:\nThe first line contains a number in Borze code. The length of the string is between 1 and 200 characters. It's guaranteed that the given string is a valid Borze code of some ternary number (this number can have leading zeroes).\n\nOutput Format:\nOutput the decoded ternary number. It can have leading zeroes.\n\nExamples:\nExample 1:\nInput:\n.-.--\nOutput:\n012\n\nExample 2:\nInput:\n--.\nOutput:\n20\n\nExample 3:\nInput:\n-..-.--\nOutput:\n1012",
    "examples": [
      {
        "input": ".-.--",
        "output": "012"
      },
      {
        "input": "--.",
        "output": "20"
      },
      {
        "input": "-..-.--",
        "output": "1012"
      }
    ],
    "solution": "p=0\r\nc=''\r\ns=input()\r\nfor i in range(len(s)):\r\n    if p==0:\r\n        if s[i]=='.':\r\n            c+='0'\r\n        elif s[i+1]=='.':\r\n            c+='1'\r\n            p=1\r\n        else:\r\n            c+='2'\r\n            p=1\r\n    else:\r\n        p=0\r\nprint(c)",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "789/B",
    "problem": "Title: Masha and geometric depression\n\nMasha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b1 and q. Remind that a geometric progression is a sequence of integers b1, b2, b3, ..., where for each i > 1 the respective term satisfies the condition bi = bi - 1·q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a1, a2, ..., am, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |bi| ≤ l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\nInput Format:\nThe first line of input contains four integers b1, q, l, m (-109 ≤ b1, q ≤ 109, 1 ≤ l ≤ 109, 1 ≤ m ≤ 105) — the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a1, a2, ..., am (-109 ≤ ai ≤ 109) — numbers that will never be written on the board.\n\nOutput Format:\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\n3 2 30 4\n6 14 25 48\nOutput:\n3\n\nExample 2:\nInput:\n123 1 2143435 4\n123 11 -5453 141245\nOutput:\n0\n\nExample 3:\nInput:\n123 1 2143435 4\n54343 -13 6 124\nOutput:\ninf\n\nNote:\nIn the first sample case, Masha will write integers 3, 12, 24. Progression term 6 will be skipped because it is a \"bad\" integer. Terms bigger than 24 won't be written because they exceed l by absolute value.\n\nIn the second case, Masha won't write any number because all terms are equal 123 and this is a \"bad\" integer.\n\nIn the third case, Masha will write infinitely integers 123.",
    "examples": [
      {
        "input": "3 2 30 4\n6 14 25 48",
        "output": "3"
      },
      {
        "input": "123 1 2143435 4\n123 11 -5453 141245",
        "output": "0"
      },
      {
        "input": "123 1 2143435 4\n54343 -13 6 124",
        "output": "inf"
      }
    ],
    "solution": "def main():\r\n    b1, q, l, m = map(int, input().split())\r\n    a = set(map(int, input().split()))\r\n\r\n    if b1 == 0:\r\n        if 0 in a:\r\n            return 0\r\n        else:\r\n            return 'inf'\r\n\r\n    if q == 0:\r\n        if abs(b1) > l:\r\n            return 0\r\n\r\n        if b1 in a:\r\n            if 0 in a:\r\n                return 0\r\n            else:\r\n                return 'inf'\r\n        else:\r\n            if 0 in a:\r\n                return 1\r\n            else:\r\n                return 'inf'\r\n\r\n    if q == 1:\r\n        if abs(b1) > l or b1 in a:\r\n            return 0\r\n        else:\r\n            return 'inf'\r\n\r\n    if q == -1:\r\n        if abs(b1) > l or b1 in a and -b1 in a:\r\n            return 0\r\n        else:\r\n            return 'inf'\r\n\r\n    result = 0\r\n    b = b1\r\n    while True:\r\n        if abs(b) > l:\r\n            break\r\n\r\n        if b not in a:\r\n            result += 1\r\n\r\n        b *= q\r\n\r\n    return result\r\n\r\n\r\nif __name__ == '__main__':\r\n    # import sys\r\n    # sys.stdin = open(\"B.txt\")\r\n    print(main())\r\n\r\n",
    "explanation": "We need to handle following cases in the solution:\n1. |b1| > l — answer is 0.\n2. b1 = 0 — if 0 is present in array a than answer is 0, else inf.\n3. q = 1 — if b1 is present in array a than answer is 0, else inf.\n4. q =  - 1 — if both b1 and  - b1 are present in array a than answer is 0, otherwise inf.\n5. q = 0 — if 0 isn't present in array a than answer is inf, else if b1 is present in a than answer is 0, else answer is 1.\n6. In all other cases we can simply iterate over all terms of progression b while their absolute value doesn't exceed l. For every term that is not present in a we simply increasing answer by 1. Obviously, the absolute value of every next element is bigger in at least 2 times than the absolute value of previous. That's why we'll need to check at most log l progression terms.\nSolution complexity is O(M·logL) or O(M·logM + logL·logM)."
  },
  {
    "id": "376/A",
    "problem": "Title: Lever\n\nYou have a description of a lever as string s. We'll represent the string length as record |s|, then the lever looks as a horizontal bar with weights of length |s| - 1 with exactly one pivot. We will assume that the bar is a segment on the Ox axis between points 0 and |s| - 1.\n\nThe decoding of the lever description is given below.\n\n- If the i-th character of the string equals \"^\", that means that at coordinate i there is the pivot under the bar.\n- If the i-th character of the string equals \"=\", that means that at coordinate i there is nothing lying on the bar.\n- If the i-th character of the string equals digit c (1-9), that means that at coordinate i there is a weight of mass c on the bar.\n\nYour task is, given the lever description, print if it will be in balance or not. Assume that the bar doesn't weight anything. Assume that the bar initially is in balance then all weights are simultaneously put on it. After that the bar either tilts to the left, or tilts to the right, or is in balance.\n\nInput Format:\nThe first line contains the lever description as a non-empty string s (3 ≤ |s| ≤ 106), consisting of digits (1-9) and characters \"^\" and \"=\". It is guaranteed that the line contains exactly one character \"^\". It is guaranteed that the pivot of the lever isn't located in any end of the lever bar.\n\nTo solve the problem you may need 64-bit integer numbers. Please, do not forget to use them in your programs.\n\nOutput Format:\nPrint \"left\" if the given lever tilts to the left, \"right\" if it tilts to the right and \"balance\", if it is in balance.\n\nExamples:\nExample 1:\nInput:\n=^==\nOutput:\nbalance\n\nExample 2:\nInput:\n9===^==1\nOutput:\nleft\n\nExample 3:\nInput:\n2==^7==\nOutput:\nright\n\nExample 4:\nInput:\n41^52==\nOutput:\nbalance\n\nNote:\nAs you solve the problem, you may find the following link useful to better understand how a lever functions: http://en.wikipedia.org/wiki/Lever.\n\nThe pictures to the examples:",
    "examples": [
      {
        "input": "=^==",
        "output": "balance"
      },
      {
        "input": "9===^==1",
        "output": "left"
      },
      {
        "input": "2==^7==",
        "output": "right"
      },
      {
        "input": "41^52==",
        "output": "balance"
      }
    ],
    "solution": "x=input()\r\nn=x.index(\"^\")\r\nl=list(x[:n])\r\nl=l[::-1]\r\nr=list(x[n+1:])\r\nf=s=0\r\nfor i in range(len(l)):\r\n    if l[i].isdigit():\r\n        f=f+(i+1)*int(l[i])\r\nfor i in range(len(r)):\r\n    if r[i].isdigit():\r\n        s=s+(i+1)*int(r[i])\r\nif f==s:\r\n    print(\"balance\")\r\nelif f>s:\r\n    print(\"left\")\r\nelse:\r\n    print(\"right\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "276/A",
    "problem": "Title: Lunch Rush\n\nHaving written another programming contest, three Rabbits decided to grab some lunch. The coach gave the team exactly k time units for the lunch break.\n\nThe Rabbits have a list of n restaurants to lunch in: the i-th restaurant is characterized by two integers fi and ti. Value ti shows the time the Rabbits need to lunch in the i-th restaurant. If time ti exceeds the time k that the coach has given for the lunch break, then the Rabbits' joy from lunching in this restaurant will equal fi - (ti - k). Otherwise, the Rabbits get exactly fi units of joy.\n\nYour task is to find the value of the maximum joy the Rabbits can get from the lunch, depending on the restaurant. The Rabbits must choose exactly one restaurant to lunch in. Note that the joy value isn't necessarily a positive value.\n\nInput Format:\nThe first line contains two space-separated integers — n (1 ≤ n ≤ 104) and k (1 ≤ k ≤ 109) — the number of restaurants in the Rabbits' list and the time the coach has given them to lunch, correspondingly. Each of the next n lines contains two space-separated integers — fi (1 ≤ fi ≤ 109) and ti (1 ≤ ti ≤ 109) — the characteristics of the i-th restaurant.\n\nOutput Format:\nIn a single line print a single integer — the maximum joy value that the Rabbits will get from the lunch.\n\nExamples:\nExample 1:\nInput:\n2 5\n3 3\n4 5\nOutput:\n4\n\nExample 2:\nInput:\n4 6\n5 8\n3 6\n2 3\n2 2\nOutput:\n3\n\nExample 3:\nInput:\n1 5\n1 7\nOutput:\n-1",
    "examples": [
      {
        "input": "2 5\n3 3\n4 5",
        "output": "4"
      },
      {
        "input": "4 6\n5 8\n3 6\n2 3\n2 2",
        "output": "3"
      },
      {
        "input": "1 5\n1 7",
        "output": "-1"
      }
    ],
    "solution": "#Keshika Patwari\r\n#Indian Institute Of Technology, Jodhpur\r\n#  2022\r\nimport sys\r\ninput=sys.stdin.readline\r\ndef exe():\r\n    \r\n    return max(l)\r\nn,k=map(int,input().split())\r\nl=[]\r\nfor i in range(n):\r\n    f,t=map(int,input().split())\r\n    if(t>k):\r\n        a=f-(t-k)\r\n    else:\r\n        a=f\r\n    l.append(a)\r\nprint(exe())",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "859/C",
    "problem": "Title: Pie Rules\n\nYou may have heard of the pie rule before. It states that if two people wish to fairly share a slice of pie, one person should cut the slice in half, and the other person should choose who gets which slice. Alice and Bob have many slices of pie, and rather than cutting the slices in half, each individual slice will be eaten by just one person.\n\nThe way Alice and Bob decide who eats each slice is as follows. First, the order in which the pies are to be handed out is decided. There is a special token called the \"decider\" token, initially held by Bob. Until all the pie is handed out, whoever has the decider token will give the next slice of pie to one of the participants, and the decider token to the other participant. They continue until no slices of pie are left.\n\nAll of the slices are of excellent quality, so each participant obviously wants to maximize the total amount of pie they get to eat. Assuming both players make their decisions optimally, how much pie will each participant receive?\n\nInput Format:\nInput will begin with an integer N (1 ≤ N ≤ 50), the number of slices of pie.\n\nFollowing this is a line with N integers indicating the sizes of the slices (each between 1 and 100000, inclusive), in the order in which they must be handed out.\n\nOutput Format:\nPrint two integers. First, the sum of the sizes of slices eaten by Alice, then the sum of the sizes of the slices eaten by Bob, assuming both players make their decisions optimally.\n\nExamples:\nExample 1:\nInput:\n3\n141 592 653\nOutput:\n653 733\n\nExample 2:\nInput:\n5\n10 21 10 21 10\nOutput:\n31 41\n\nNote:\nIn the first example, Bob takes the size 141 slice for himself and gives the decider token to Alice. Then Alice gives the size 592 slice to Bob and keeps the decider token for herself, so that she can then give the size 653 slice to herself.",
    "examples": [
      {
        "input": "3\n141 592 653",
        "output": "653 733"
      },
      {
        "input": "5\n10 21 10 21 10",
        "output": "31 41"
      }
    ],
    "solution": "import math\r\nfrom random import random\r\n\r\ndef getInt():\r\n    return(int(input()))\r\n\r\ndef getInts():\r\n    line = input().split()\r\n    return [int(l) for l in line]\r\n\r\ndef getFloat():\r\n    return(float(input()))\r\n\r\ndef getFloats():\r\n    line = input().split()\r\n    return [float(l) for l in line]\r\n\r\ndef getStrings():\r\n    line = input().split()\r\n    return(line)\r\n\r\n\r\nN = getInt()\r\nvalues = getInts()\r\n\r\nnConsidered = 0\r\n#                nC, nO\r\nbestForChooserSoFar = [0, 0]\r\n\r\nfor i in range(len(values)):\r\n    v = values[len(values) - i - 1]\r\n    qsIfTaken = [v + bestForChooserSoFar[1], bestForChooserSoFar[0]]\r\n    qsIfGiven = [bestForChooserSoFar[0], v + bestForChooserSoFar[1]]\r\n\r\n    if(qsIfTaken[0] >= qsIfGiven[0]):\r\n        bestForChooserSoFar = qsIfTaken\r\n    else:\r\n        bestForChooserSoFar = qsIfGiven\r\n\r\nprint(str(bestForChooserSoFar[1]) + ' ' + str(bestForChooserSoFar[0]))",
    "explanation": "Denote Score(L) as the total sizes of slices that will be eaten by whoever holds the decider token, for a list of pies L, and denote Total(L) as the total size of all slices, and Rest(L) as the list of pies formed by removing the first pie. Note that the total sizes of slices eaten by whoever doesn't hold the decider token is given by Total(L) - Score(L).\nLet's consider the options available to the participant with the decider token. If they choose to take the pie for themselves, they end up with L[0] + Total(Rest(L)) - Score(Rest(L)) total pie. If they let the other participant have the slice, they end up with Score(Rest(L)) total pie. They will choose whichever option is larger. To compute the answer, we simply start from the end of the game and work backwards to the beginning.\nChallenge: Try to solve the variant of this game where instead of handing out slices in a fixed order, the participant who doesn't currently hold the decider token gets to select which slice is handed out next. The optimal strategy is not difficult to discover, but proving it is very difficult."
  },
  {
    "id": "45/A",
    "problem": "Title: Codecraft III\n\nToday Vasya visited a widely known site and learned that the continuation of his favourite game Codecraft II will appear after exactly k months. He looked at the calendar and learned that at the moment is the month number s. Vasya immediately got interested in what month Codecraft III will appear. Help him understand that.\n\nAll the twelve months in Vasya's calendar are named using their usual English names: January, February, March, April, May, June, July, August, September, October, November, December.\n\nInput Format:\nThe first input line contains the name of the current month. It is guaranteed that it is a proper English name of one of twelve months. The first letter is uppercase, the rest are lowercase. The second line contains integer k (0 ≤ k ≤ 100) — the number of months left till the appearance of Codecraft III.\n\nOutput Format:\nPrint starting from an uppercase letter the name of the month in which the continuation of Codeforces II will appear. The printed name must be contained in the list January, February, March, April, May, June, July, August, September, October, November, December.\n\nExamples:\nExample 1:\nInput:\nNovember\n3\nOutput:\nFebruary\n\nExample 2:\nInput:\nMay\n24\nOutput:\nMay",
    "examples": [
      {
        "input": "November\n3",
        "output": "February"
      },
      {
        "input": "May\n24",
        "output": "May"
      }
    ],
    "solution": "l=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\nn=input()\r\np=int(input())\r\npp=l.index(n)\r\nprint(l[(pp+p)%12])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "584/A",
    "problem": "Title: Olesya and Rodion\n\nOlesya loves numbers consisting of n digits, and Rodion only likes numbers that are divisible by t. Find some number that satisfies both of them.\n\nYour task is: given the n and t print an integer strictly larger than zero consisting of n digits that is divisible by t. If such number doesn't exist, print  - 1.\n\nInput Format:\nThe single line contains two numbers, n and t (1 ≤ n ≤ 100, 2 ≤ t ≤ 10) — the length of the number and the number it should be divisible by.\n\nOutput Format:\nPrint one such positive number without leading zeroes, — the answer to the problem, or  - 1, if such number doesn't exist. If there are multiple possible answers, you are allowed to print any of them.\n\nExamples:\nExample 1:\nInput:\n3 2\nOutput:\n712",
    "examples": [
      {
        "input": "3 2",
        "output": "712"
      }
    ],
    "solution": "n, t=(map(int,input().split()))\r\nif n==1 and t==10:\r\n    print(-1)\r\nelif n>=2 and t ==10:\r\n    for i in range((n-1)):\r\n        print('1',end=\"\")\r\n    print(0)\r\nelse:\r\n    for i in range((n)):\r\n        print(t,end=\"\")\r\n        ",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "29/B",
    "problem": "Title: Traffic Lights\n\nA car moves from point A to point B at speed v meters per second. The action takes place on the X-axis. At the distance d meters from A there are traffic lights. Starting from time 0, for the first g seconds the green light is on, then for the following r seconds the red light is on, then again the green light is on for the g seconds, and so on.\n\nThe car can be instantly accelerated from 0 to v and vice versa, can instantly slow down from the v to 0. Consider that it passes the traffic lights at the green light instantly. If the car approaches the traffic lights at the moment when the red light has just turned on, it doesn't have time to pass it. But if it approaches the traffic lights at the moment when the green light has just turned on, it can move. The car leaves point A at the time 0.\n\nWhat is the minimum time for the car to get from point A to point B without breaking the traffic rules?\n\nInput Format:\nThe first line contains integers l, d, v, g, r (1 ≤ l, d, v, g, r ≤ 1000, d < l) — the distance between A and B (in meters), the distance from A to the traffic lights, car's speed, the duration of green light and the duration of red light.\n\nOutput Format:\nOutput a single number — the minimum time that the car needs to get from point A to point B. Your output must have relative or absolute error less than 10 - 6.\n\nExamples:\nExample 1:\nInput:\n2 1 3 4 5\nOutput:\n0.66666667\n\nExample 2:\nInput:\n5 4 3 1 1\nOutput:\n2.33333333",
    "examples": [
      {
        "input": "2 1 3 4 5",
        "output": "0.66666667"
      },
      {
        "input": "5 4 3 1 1",
        "output": "2.33333333"
      }
    ],
    "solution": "def fmod(x, m):\r\n    while x >= m:\r\n        x = x - m\r\n    return x\r\n\r\nl, d, v, g, r = map(int, input().split(' '))\r\n\r\nx = fmod(float(d / v), g + r)\r\n\r\nans = (d / v) + (l - d) / v\r\n\r\nif x >= g:\r\n    ans = ans + g + r - x    \r\n\r\nprint(\"%.10f\" % (ans))\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "702/C",
    "problem": "Title: Cellular Network\n\nYou are given n points on the straight line — the positions (x-coordinates) of the cities and m points on the same line — the positions (x-coordinates) of the cellular towers. All towers work in the same way — they provide cellular network for all cities, which are located at the distance which is no more than r from this tower.\n\nYour task is to find minimal r that each city has been provided by cellular network, i.e. for each city there is at least one cellular tower at the distance which is no more than r.\n\nIf r = 0 then a tower provides cellular network only for the point where it is located. One tower can provide cellular network for any number of cities, but all these cities must be at the distance which is no more than r from this tower.\n\nInput Format:\nThe first line contains two positive integers n and m (1 ≤ n, m ≤ 105) — the number of cities and the number of cellular towers.\n\nThe second line contains a sequence of n integers a1, a2, ..., an ( - 109 ≤ ai ≤ 109) — the coordinates of cities. It is allowed that there are any number of cities in the same point. All coordinates ai are given in non-decreasing order.\n\nThe third line contains a sequence of m integers b1, b2, ..., bm ( - 109 ≤ bj ≤ 109) — the coordinates of cellular towers. It is allowed that there are any number of towers in the same point. All coordinates bj are given in non-decreasing order.\n\nOutput Format:\nPrint minimal r so that each city will be covered by cellular network.\n\nExamples:\nExample 1:\nInput:\n3 2\n-2 2 4\n-3 0\nOutput:\n4\n\nExample 2:\nInput:\n5 3\n1 5 10 14 17\n4 11 15\nOutput:\n3",
    "examples": [
      {
        "input": "3 2\n-2 2 4\n-3 0",
        "output": "4"
      },
      {
        "input": "5 3\n1 5 10 14 17\n4 11 15",
        "output": "3"
      }
    ],
    "solution": "############ ---- Input Functions ---- ############\nimport sys\ninput = sys.stdin.readline\n\n# takes integer inputs\ndef inp():\n    return(int(input()))\n# takes List inputs\ndef inlt(): \n    return(list(map(int,input().split())))\n# takes string inputs\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\n# takes space space separated integer inputs\ndef invr():\n    return(list(map(int, input().split())))\n\nnum_cities, num_towers = invr()\ncities = inlt()\ntowers = inlt()\n\nj = 0\nans = 0\nfor i in range(num_cities):\n    while j+1 < num_towers and abs(towers[j+1] - cities[i]) <= abs(towers[j] - cities[i]):\n        j += 1\n    ans = max(ans, abs(cities[i] - towers[j]))\n\nprint(ans)",
    "explanation": "At first store coordinates of all towers in set towers.\nThen let's look through all cities. Let the current city be located in the point cur. Let it = towers.lowerbound(cur). Then if it is not equal to the end of the set we put in the variable dist the value ( * it - cur) — the distance to the nearest tower on the right for the current city. If it is not equal to the beginning of the set we need to make it –  and update dist = min(dist, cur -  * it) — the distance to the nearest tower on the left to the current city. After that we only need to update the answer: ans = max(ans, dist).\nAlso this problem can be solved with help of two pointers in linear time."
  },
  {
    "id": "216/B",
    "problem": "Title: Forming Teams\n\nOne day n students come to the stadium. They want to play football, and for that they need to split into teams, the teams must have an equal number of people.\n\nWe know that this group of people has archenemies. Each student has at most two archenemies. Besides, if student A is an archenemy to student B, then student B is an archenemy to student A.\n\nThe students want to split so as no two archenemies were in one team. If splitting in the required manner is impossible, some students will have to sit on the bench.\n\nDetermine the minimum number of students you will have to send to the bench in order to form the two teams in the described manner and begin the game at last.\n\nInput Format:\nThe first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of students and the number of pairs of archenemies correspondingly.\n\nNext m lines describe enmity between students. Each enmity is described as two numbers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) — the indexes of the students who are enemies to each other. Each enmity occurs in the list exactly once. It is guaranteed that each student has no more than two archenemies.\n\nYou can consider the students indexed in some manner with distinct integers from 1 to n.\n\nOutput Format:\nPrint a single integer — the minimum number of students you will have to send to the bench in order to start the game.\n\nExamples:\nExample 1:\nInput:\n5 4\n1 2\n2 4\n5 3\n1 4\nOutput:\n1\n\nExample 2:\nInput:\n6 2\n1 4\n3 4\nOutput:\n0\n\nExample 3:\nInput:\n6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4\nOutput:\n2",
    "examples": [
      {
        "input": "5 4\n1 2\n2 4\n5 3\n1 4",
        "output": "1"
      },
      {
        "input": "6 2\n1 4\n3 4",
        "output": "0"
      },
      {
        "input": "6 6\n1 2\n2 3\n3 1\n4 5\n5 6\n6 4",
        "output": "2"
      }
    ],
    "solution": "def detect_cycle(node, parent, visited, graph, ref):\n    visited.add(node)\n    ref[\"count\"] += 1\n    for neighbor in graph[node]:\n        if neighbor == parent:\n            continue\n        if neighbor not in visited:\n            if detect_cycle(neighbor, node, visited, graph, ref):\n                return True\n        else:\n            return True\n    return False\n\n\ndef main():\n    n, m = map(int, input().split(\" \"))\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n    for _ in range(m):\n        a, b = map(int, input().split(\" \"))\n        graph[a].append(b)\n        graph[b].append(a)\n    ref = {}\n    bench = 0\n    visited = set()\n    for node in graph:\n        ref[\"count\"] = 0\n        if node not in visited:\n            if detect_cycle(node, None, visited, graph, ref):\n                bench += ref[\"count\"] % 2\n    bench += ((n - bench) % 2)\n    return bench\nprint(main())\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "397/B",
    "problem": "Title: On Corruption and Numbers\n\nAlexey, a merry Berland entrant, got sick of the gray reality and he zealously wants to go to university. There are a lot of universities nowadays, so Alexey is getting lost in the diversity — he has not yet decided what profession he wants to get. At school, he had bad grades in all subjects, and it's only thanks to wealthy parents that he was able to obtain the graduation certificate.\n\nThe situation is complicated by the fact that each high education institution has the determined amount of voluntary donations, paid by the new students for admission — ni berubleys. He cannot pay more than ni, because then the difference between the paid amount and ni can be regarded as a bribe!\n\nEach rector is wearing the distinctive uniform of his university. Therefore, the uniform's pockets cannot contain coins of denomination more than ri. The rector also does not carry coins of denomination less than li in his pocket — because if everyone pays him with so small coins, they gather a lot of weight and the pocket tears. Therefore, a donation can be paid only by coins of denomination x berubleys, where li ≤ x ≤ ri (Berland uses coins of any positive integer denomination). Alexey can use the coins of different denominations and he can use the coins of the same denomination any number of times. When Alexey was first confronted with such orders, he was puzzled because it turned out that not all universities can accept him! Alexey is very afraid of going into the army (even though he had long wanted to get the green uniform, but his dad says that the army bullies will beat his son and he cannot pay to ensure the boy's safety). So, Alexey wants to know for sure which universities he can enter so that he could quickly choose his alma mater.\n\nThanks to the parents, Alexey is not limited in money and we can assume that he has an unlimited number of coins of each type.\n\nIn other words, you are given t requests, each of them contains numbers ni, li, ri. For each query you need to answer, whether it is possible to gather the sum of exactly ni berubleys using only coins with an integer denomination from li to ri berubleys. You can use coins of different denominations. Coins of each denomination can be used any number of times.\n\nInput Format:\nThe first line contains the number of universities t, (1 ≤ t ≤ 1000) Each of the next t lines contain three space-separated integers: ni, li, ri (1 ≤ ni, li, ri ≤ 109; li ≤ ri).\n\nOutput Format:\nFor each query print on a single line: either \"Yes\", if Alexey can enter the university, or \"No\" otherwise.\n\nExamples:\nExample 1:\nInput:\n2\n5 2 3\n6 4 5\nOutput:\nYes\nNo\n\nNote:\nYou can pay the donation to the first university with two coins: one of denomination 2 and one of denomination 3 berubleys. The donation to the second university cannot be paid.",
    "examples": [
      {
        "input": "2\n5 2 3\n6 4 5",
        "output": "Yes\nNo"
      }
    ],
    "solution": "t = int(input())\r\nfor i in range(0, t) :\r\n    n, l, r = [int(s) for s in input().split()]\r\n    print('Yes' if n % l <= (r - l) *  (n // l) else 'No')",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "557/A",
    "problem": "Title: Ilya and Diplomas\n\nSoon a school Olympiad in Informatics will be held in Berland, n schoolchildren will participate there.\n\nAt a meeting of the jury of the Olympiad it was decided that each of the n participants, depending on the results, will get a diploma of the first, second or third degree. Thus, each student will receive exactly one diploma.\n\nThey also decided that there must be given at least min1 and at most max1 diplomas of the first degree, at least min2 and at most max2 diplomas of the second degree, and at least min3 and at most max3 diplomas of the third degree.\n\nAfter some discussion it was decided to choose from all the options of distributing diplomas satisfying these limitations the one that maximizes the number of participants who receive diplomas of the first degree. Of all these options they select the one which maximizes the number of the participants who receive diplomas of the second degree. If there are multiple of these options, they select the option that maximizes the number of diplomas of the third degree.\n\nChoosing the best option of distributing certificates was entrusted to Ilya, one of the best programmers of Berland. However, he found more important things to do, so it is your task now to choose the best option of distributing of diplomas, based on the described limitations.\n\nIt is guaranteed that the described limitations are such that there is a way to choose such an option of distributing diplomas that all n participants of the Olympiad will receive a diploma of some degree.\n\nInput Format:\nThe first line of the input contains a single integer n (3 ≤ n ≤ 3·106) — the number of schoolchildren who will participate in the Olympiad.\n\nThe next line of the input contains two integers min1 and max1 (1 ≤ min1 ≤ max1 ≤ 106) — the minimum and maximum limits on the number of diplomas of the first degree that can be distributed.\n\nThe third line of the input contains two integers min2 and max2 (1 ≤ min2 ≤ max2 ≤ 106) — the minimum and maximum limits on the number of diplomas of the second degree that can be distributed.\n\nThe next line of the input contains two integers min3 and max3 (1 ≤ min3 ≤ max3 ≤ 106) — the minimum and maximum limits on the number of diplomas of the third degree that can be distributed.\n\nIt is guaranteed that min1 + min2 + min3 ≤ n ≤ max1 + max2 + max3.\n\nOutput Format:\nIn the first line of the output print three numbers, showing how many diplomas of the first, second and third degree will be given to students in the optimal variant of distributing diplomas.\n\nThe optimal variant of distributing diplomas is the one that maximizes the number of students who receive diplomas of the first degree. Of all the suitable options, the best one is the one which maximizes the number of participants who receive diplomas of the second degree. If there are several of these options, the best one is the one that maximizes the number of diplomas of the third degree.\n\nExamples:\nExample 1:\nInput:\n6\n1 5\n2 6\n3 7\nOutput:\n1 2 3\n\nExample 2:\nInput:\n10\n1 2\n1 3\n1 5\nOutput:\n2 3 5\n\nExample 3:\nInput:\n6\n1 3\n2 2\n2 2\nOutput:\n2 2 2",
    "examples": [
      {
        "input": "6\n1 5\n2 6\n3 7",
        "output": "1 2 3"
      },
      {
        "input": "10\n1 2\n1 3\n1 5",
        "output": "2 3 5"
      },
      {
        "input": "6\n1 3\n2 2\n2 2",
        "output": "2 2 2"
      }
    ],
    "solution": "n = int(input())\r\nmin1,max1 = map(int,input().split())\r\nmin2,max2 = map(int,input().split())\r\nmin3,max3 = map(int,input().split())\r\nl1 = min(max1, n - min2 - min3)\r\nl2 = min(max2, n - l1 - min3)\r\nl3 = n - l1 - l2\r\nprint(l1,l2,l3)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "577/B",
    "problem": "Title: Modulo Sum\n\nYou are given a sequence of numbers a1, a2, ..., an, and a number m.\n\nCheck if it is possible to choose a non-empty subsequence aij such that the sum of numbers in this subsequence is divisible by m.\n\nInput Format:\nThe first line contains two numbers, n and m (1 ≤ n ≤ 106, 2 ≤ m ≤ 103) — the size of the original sequence and the number such that sum should be divisible by it.\n\nThe second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109).\n\nOutput Format:\nIn the single line print either \"YES\" (without the quotes) if there exists the sought subsequence, or \"NO\" (without the quotes), if such subsequence doesn't exist.\n\nExamples:\nExample 1:\nInput:\n3 5\n1 2 3\nOutput:\nYES\n\nExample 2:\nInput:\n1 6\n5\nOutput:\nNO\n\nExample 3:\nInput:\n4 6\n3 1 1 3\nOutput:\nYES\n\nExample 4:\nInput:\n6 6\n5 5 5 5 5 5\nOutput:\nYES\n\nNote:\nIn the first sample test you can choose numbers 2 and 3, the sum of which is divisible by 5.\n\nIn the second sample test the single non-empty subsequence of numbers is a single number 5. Number 5 is not divisible by 6, that is, the sought subsequence doesn't exist.\n\nIn the third sample test you need to choose two numbers 3 on the ends.\n\nIn the fourth sample test you can take the whole subsequence.",
    "examples": [
      {
        "input": "3 5\n1 2 3",
        "output": "YES"
      },
      {
        "input": "1 6\n5",
        "output": "NO"
      },
      {
        "input": "4 6\n3 1 1 3",
        "output": "YES"
      },
      {
        "input": "6 6\n5 5 5 5 5 5",
        "output": "YES"
      }
    ],
    "solution": "n,m=map(int,input().split())\r\na=list(map(int,input().split()))\r\n \r\nd=set()\r\nfor i in a:\r\n    w={(i+y)%m for y in d}\r\n    d|=w\r\n    d.add(i%m)\r\n    if 0 in d:\r\n        print(\"YES\")\r\n        exit()\r\nprint(\"NO\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "38/A",
    "problem": "Title: Army\n\nThe Berland Armed Forces System consists of n ranks that are numbered using natural numbers from 1 to n, where 1 is the lowest rank and n is the highest rank.\n\nOne needs exactly di years to rise from rank i to rank i + 1. Reaching a certain rank i having not reached all the previous i - 1 ranks is impossible.\n\nVasya has just reached a new rank of a, but he dreams of holding the rank of b. Find for how many more years Vasya should serve in the army until he can finally realize his dream.\n\nInput Format:\nThe first input line contains an integer n (2 ≤ n ≤ 100). The second line contains n - 1 integers di (1 ≤ di ≤ 100). The third input line contains two integers a and b (1 ≤ a < b ≤ n). The numbers on the lines are space-separated.\n\nOutput Format:\nPrint the single number which is the number of years that Vasya needs to rise from rank a to rank b.\n\nExamples:\nExample 1:\nInput:\n3\n5 6\n1 2\nOutput:\n5\n\nExample 2:\nInput:\n3\n5 6\n1 3\nOutput:\n11",
    "examples": [
      {
        "input": "3\n5 6\n1 2",
        "output": "5"
      },
      {
        "input": "3\n5 6\n1 3",
        "output": "11"
      }
    ],
    "solution": "a = int(input())\r\nb = list(map(int,input().split()))\r\nc , d = list(map(int,input().split()))\r\ncount = 0\r\nfor i in range(c,d):\r\n    count += b[i-1]\r\nprint(count)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "426/A",
    "problem": "Title: Sereja and Mugs\n\nSereja showed an interesting game to his friends. The game goes like that. Initially, there is a table with an empty cup and n water mugs on it. Then all players take turns to move. During a move, a player takes a non-empty mug of water and pours all water from it into the cup. If the cup overfills, then we assume that this player lost.\n\nAs soon as Sereja's friends heard of the game, they wanted to play it. Sereja, on the other hand, wanted to find out whether his friends can play the game in such a way that there are no losers. You are given the volumes of all mugs and the cup. Also, you know that Sereja has (n - 1) friends. Determine if Sereja's friends can play the game so that nobody loses.\n\nInput Format:\nThe first line contains integers n and s (2 ≤ n ≤ 100; 1 ≤ s ≤ 1000) — the number of mugs and the volume of the cup. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10). Number ai means the volume of the i-th mug.\n\nOutput Format:\nIn a single line, print \"YES\" (without the quotes) if his friends can play in the described manner, and \"NO\" (without the quotes) otherwise.\n\nExamples:\nExample 1:\nInput:\n3 4\n1 1 1\nOutput:\nYES\n\nExample 2:\nInput:\n3 4\n3 1 3\nOutput:\nYES\n\nExample 3:\nInput:\n3 4\n4 4 4\nOutput:\nNO",
    "examples": [
      {
        "input": "3 4\n1 1 1",
        "output": "YES"
      },
      {
        "input": "3 4\n3 1 3",
        "output": "YES"
      },
      {
        "input": "3 4\n4 4 4",
        "output": "NO"
      }
    ],
    "solution": "k = int(input().split()[1])\r\nif sum(sorted(list(map(int,input().split())))[:-1]) > k:\r\n    print('NO')\r\nelse:\r\n    print('YES')",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "486/B",
    "problem": "Title: OR in Matrix\n\nLet's define logical OR as an operation on two logical values (i. e. values that belong to the set {0, 1}) that is equal to 1 if either or both of the logical values is set to 1, otherwise it is 0. We can define logical OR of three or more logical values in the same manner:\n\n$$a_{1} \\operatorname{OR} a_{2} \\operatorname{OR} \\ldots \\operatorname{OR} a_{k}$$ where $$a_i \\in \\{0, 1\\}$$ is equal to 1 if some ai = 1, otherwise it is equal to 0.\n\nNam has a matrix A consisting of m rows and n columns. The rows are numbered from 1 to m, columns are numbered from 1 to n. Element at row i (1 ≤ i ≤ m) and column j (1 ≤ j ≤ n) is denoted as Aij. All elements of A are either 0 or 1. From matrix A, Nam creates another matrix B of the same size using formula:\n\n$$B_{ij} = A_{i1} \\text{ OR } A_{i2} \\text{ OR } \\ldots \\text{ OR } A_{in} \\text{ OR } A_{1j} \\text{ OR } \\ldots \\text{ OR } A_{mj}$$.\n\n(Bij is OR of all elements in row i and column j of matrix A)\n\nNam gives you matrix B and challenges you to guess matrix A. Although Nam is smart, he could probably make a mistake while calculating matrix B, since size of A can be large.\n\nInput Format:\nThe first line contains two integer m and n (1 ≤ m, n ≤ 100), number of rows and number of columns of matrices respectively.\n\nThe next m lines each contain n integers separated by spaces describing rows of matrix B (each element of B is either 0 or 1).\n\nOutput Format:\nIn the first line, print \"NO\" if Nam has made a mistake when calculating B, otherwise print \"YES\". If the first line is \"YES\", then also print m rows consisting of n integers representing matrix A that can produce given matrix B. If there are several solutions print any one.\n\nExamples:\nExample 1:\nInput:\n2 2\n1 0\n0 0\nOutput:\nNO\n\nExample 2:\nInput:\n2 3\n1 1 1\n1 1 1\nOutput:\nYES\n1 1 1\n1 1 1\n\nExample 3:\nInput:\n2 3\n0 1 0\n1 1 1\nOutput:\nYES\n0 0 0\n0 1 0",
    "examples": [
      {
        "input": "2 2\n1 0\n0 0",
        "output": "NO"
      },
      {
        "input": "2 3\n1 1 1\n1 1 1",
        "output": "YES\n1 1 1\n1 1 1"
      },
      {
        "input": "2 3\n0 1 0\n1 1 1",
        "output": "YES\n0 0 0\n0 1 0"
      }
    ],
    "solution": "from copy import deepcopy\n\ndef handle() -> None:\n    n, m = [int(s) for s in input().split(\" \")]\n    original_matrix = []\n\n    for _ in range(n):\n        original_matrix.append([int(s) for s in input().split(\" \")])\n\n    zero_matrix = deepcopy(original_matrix)\n    rows_to_mark = set()\n    cols_to_mark = set()\n\n    for row in range(n):\n        for col in range(m):\n            if original_matrix[row][col] == 0:\n                rows_to_mark.add(row)\n                cols_to_mark.add(col)\n\n    for row in rows_to_mark:\n        zero_matrix[row] = [0 for _ in range(m)]\n    for col in cols_to_mark:\n        for r in range(n):\n            zero_matrix[r][col] = 0\n\n    rows_to_mark.clear()\n    cols_to_mark.clear()\n\n    for row in range(n):\n        for col in range(m):\n            if zero_matrix[row][col] == 1:\n                rows_to_mark.add(row)\n                cols_to_mark.add(col)\n\n    one_matrix = deepcopy(zero_matrix)\n\n    for row in rows_to_mark:\n        one_matrix[row] = [1 for _ in range(m)]\n    for col in cols_to_mark:\n        for r in range(n):\n            one_matrix[r][col] = 1\n\n    if one_matrix == original_matrix:\n        print(\"YES\")\n        for row in range(n):\n            print(\" \".join([str(s) for s in zero_matrix[row]]))\n    else:\n        print(\"NO\")\n\n\n\nhandle()",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "373/B",
    "problem": "Title: Making Sequences is Fun\n\nWe'll define S(n) for positive integer n as follows: the number of the n's digits in the decimal base. For example, S(893) = 3, S(114514) = 6.\n\nYou want to make a consecutive integer sequence starting from number m (m, m + 1, ...). But you need to pay S(n)·k to add the number n to the sequence.\n\nYou can spend a cost up to w, and you want to make the sequence as long as possible. Write a program that tells sequence's maximum length.\n\nInput Format:\nThe first line contains three integers w (1 ≤ w ≤ 1016), m (1 ≤ m ≤ 1016), k (1 ≤ k ≤ 109).\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput Format:\nThe first line should contain a single integer — the answer to the problem.\n\nExamples:\nExample 1:\nInput:\n9 1 1\nOutput:\n9\n\nExample 2:\nInput:\n77 7 7\nOutput:\n7\n\nExample 3:\nInput:\n114 5 14\nOutput:\n6\n\nExample 4:\nInput:\n1 1 2\nOutput:\n0",
    "examples": [
      {
        "input": "9 1 1",
        "output": "9"
      },
      {
        "input": "77 7 7",
        "output": "7"
      },
      {
        "input": "114 5 14",
        "output": "6"
      },
      {
        "input": "1 1 2",
        "output": "0"
      }
    ],
    "solution": "def cnt(x, y):\r\n  return y-x\r\n\r\nw, m, k = map(int, input().split())\r\np, d, res = 1, 0, 0\r\nwhile p <= m:\r\n  p *= 10\r\n  d += 1\r\nwhile cnt(m, p)*d*k <= w:\r\n  w -= cnt(m, p)*d*k\r\n  res += cnt(m, p)\r\n  m = p\r\n  p *= 10\r\n  d += 1\r\nlo, hi = m, p\r\nwhile hi-lo > 1:\r\n  mid = (lo+hi)//2\r\n  if (cnt(m, mid)*d*k <= w): lo = mid\r\n  else: hi = mid\r\nres += cnt(m, lo)\r\n\r\nprint(res)\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "17/A",
    "problem": "Title: Noldbach problem\n\nNick is interested in prime numbers. Once he read about Goldbach problem. It states that every even integer greater than 2 can be expressed as the sum of two primes. That got Nick's attention and he decided to invent a problem of his own and call it Noldbach problem. Since Nick is interested only in prime numbers, Noldbach problem states that at least k prime numbers from 2 to n inclusively can be expressed as the sum of three integer numbers: two neighboring prime numbers and 1. For example, 19 = 7 + 11 + 1, or 13 = 5 + 7 + 1.\n\nTwo prime numbers are called neighboring if there are no other prime numbers between them.\n\nYou are to help Nick, and find out if he is right or wrong.\n\nInput Format:\nThe first line of the input contains two integers n (2 ≤ n ≤ 1000) and k (0 ≤ k ≤ 1000).\n\nOutput Format:\nOutput YES if at least k prime numbers from 2 to n inclusively can be expressed as it was described above. Otherwise output NO.\n\nExamples:\nExample 1:\nInput:\n27 2\nOutput:\nYES\n\nExample 2:\nInput:\n45 7\nOutput:\nNO\n\nNote:\nIn the first sample the answer is YES since at least two numbers can be expressed as it was described (for example, 13 and 19). In the second sample the answer is NO since it is impossible to express 7 prime numbers from 2 to 45 in the desired form.",
    "examples": [
      {
        "input": "27 2",
        "output": "YES"
      },
      {
        "input": "45 7",
        "output": "NO"
      }
    ],
    "solution": "import math\r\ndef isprime(k):\r\n    for i in range (2, int(math.sqrt(k)+1)):\r\n        if(k%i==0):\r\n            return 0\r\n    return 1\r\n\r\nn,k = map(int, input().split())\r\ncount = 0\r\nlis = []\r\nfor i in range(2, n+1):\r\n    if(isprime(i)):\r\n        lis.append(i)\r\nfor i in range (0, len(lis)-1):\r\n    if((lis[i]+lis[i+1]+1) in lis):\r\n        count += 1\r\nif(count >=k):\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "929/C",
    "problem": "Title: Красивая команда\n\nЗавтра у хоккейной команды, которой руководит Евгений, важный матч. Евгению нужно выбрать шесть игроков, которые выйдут на лед в стартовом составе: один вратарь, два защитника и три нападающих.\n\nТак как это стартовый состав, Евгения больше волнует, насколько красива будет команда на льду, чем способности игроков. А именно, Евгений хочет выбрать такой стартовый состав, чтобы номера любых двух игроков из стартового состава отличались не более, чем в два раза. Например, игроки с номерами 13, 14, 10, 18, 15 и 20 устроят Евгения, а если, например, на лед выйдут игроки с номерами 8 и 17, то это не устроит Евгения.\n\nПро каждого из игроков вам известно, на какой позиции он играет (вратарь, защитник или нападающий), а также его номер. В хоккее номера игроков не обязательно идут подряд. Посчитайте число различных стартовых составов из одного вратаря, двух защитников и трех нападающих, которые может выбрать Евгений, чтобы выполнялось его условие красоты.\n\nInput Format:\nПервая строка содержит три целых числа g, d и f (1 ≤ g ≤ 1 000, 1 ≤ d ≤ 1 000, 1 ≤ f ≤ 1 000) — число вратарей, защитников и нападающих в команде Евгения.\n\nВторая строка содержит g целых чисел, каждое в пределах от 1 до 100 000 — номера вратарей.\n\nТретья строка содержит d целых чисел, каждое в пределах от 1 до 100 000 — номера защитников.\n\nЧетвертая строка содержит f целых чисел, каждое в пределах от 1 до 100 000 — номера нападающих.\n\nГарантируется, что общее количество игроков не превосходит 1 000, т. е. g + d + f ≤ 1 000. Все g + d + f номеров игроков различны.\n\nOutput Format:\nВыведите одно целое число — количество возможных стартовых составов.\n\nExamples:\nExample 1:\nInput:\n1 2 3\n15\n10 19\n20 11 13\nOutput:\n1\n\nExample 2:\nInput:\n2 3 4\n16 40\n20 12 19\n13 21 11 10\nOutput:\n6\n\nNote:\nВ первом примере всего один вариант для выбора состава, который удовлетворяет описанным условиям, поэтому ответ 1.\n\nВо втором примере подходят следующие игровые сочетания (в порядке вратарь-защитник-защитник-нападающий-нападающий-нападающий):\n\n- 16 20 12 13 21 11\n- 16 20 12 13 11 10\n- 16 20 19 13 21 11\n- 16 20 19 13 11 10\n- 16 12 19 13 21 11\n- 16 12 19 13 11 10\n\nТаким образом, ответ на этот пример — 6.",
    "examples": [
      {
        "input": "1 2 3\n15\n10 19\n20 11 13",
        "output": "1"
      },
      {
        "input": "2 3 4\n16 40\n20 12 19\n13 21 11 10",
        "output": "6"
      }
    ],
    "solution": "import bisect\r\nfrom functools import lru_cache\r\n\r\ng, d, f = tuple(map(int, input().split()))\r\n\r\ngoals = list(map(int, input().split()))\r\ndefs = list(map(int, input().split()))\r\nforwards = list(map(int, input().split()))\r\n\r\ngoals.sort()\r\ndefs.sort()\r\nforwards.sort()\r\n\r\nforwards.append(100000000)\r\ndefs.append(100000000)\r\ngoals.append(100000000)\r\n\r\nnumers = []\r\nroles = []\r\ngi, di, fi = 0, 0, 0\r\n\r\nfor i in range(d + g + f):\r\n    numers.append(min(goals[gi], defs[di], forwards[fi]))\r\n\r\n    if numers[-1] == goals[gi]:\r\n        roles.append(1)\r\n        gi += 1\r\n\r\n    if numers[-1] == forwards[fi]:\r\n        roles.append(3)\r\n        fi += 1\r\n\r\n    if numers[-1] == defs[di]:\r\n        roles.append(2)\r\n        di += 1\r\n\r\n#print(numers)\r\n#print(roles)\r\n\r\n\r\n@lru_cache()\r\ndef my_comb(n, k):\r\n    if k == 0:\r\n        return 1\r\n    if n < k:\r\n        return 0\r\n    if n == k:\r\n        return 1\r\n    if k == 3:\r\n        return (n * (n - 1) * (n - 2)) // 6\r\n    if k == 2:\r\n        return (n * (n - 1)) // 2\r\n    if k == 1:\r\n        return n\r\n    assert False\r\n\r\n\r\ndef solve(numers, roles):\r\n    ans = 0\r\n    for i in range(len(numers)):\r\n        # check all combinations with guy i\r\n\r\n        possible_max_num = bisect.bisect_right(numers, numers[i] * 2)\r\n\r\n        if possible_max_num - i < 5:\r\n            continue\r\n\r\n        avaliable_f = roles[i + 1: possible_max_num].count(3)\r\n        avaliable_d = roles[i + 1: possible_max_num].count(2)\r\n        avaliable_g = roles[i + 1: possible_max_num].count(1)\r\n\r\n        needed_f, needed_d, needed_g = 3, 2, 1\r\n\r\n        if roles[i] == 1:\r\n            needed_g -= 1\r\n        elif roles[i] == 2:\r\n            needed_d -= 1\r\n        else:\r\n            needed_f -= 1\r\n\r\n        possible_combinations_with_ith = my_comb(avaliable_d, needed_d) * my_comb(avaliable_f, needed_f) * my_comb(\r\n            avaliable_g, needed_g)\r\n        ans += possible_combinations_with_ith\r\n\r\n    return ans\r\n\r\n\r\nprint(solve(numers, roles))\r\n",
    "explanation": "Алгоритм решения заключается в следующем.\nПусть минимальный номер, который мы возьмем в команду, принадлежит одному из вратарей. Тогда переберём кому из вратарей принадлежит этот номер. Пусть это вратарь, который имеет на футболке номер minG. Тогда мы можем взять в состав вместе с ним двух защитников и трёх нападающих с номерами от minG + 1 до 2·minG. Количество подходящих защитников cntD определяем с помощью прохода по всем защитникам, а количество подходящих нападающих cntF определяем с помощью прохода по всем нападающим. Таким образом, мы можем взять двух защитников из cntD защитников, эта величина равна D = cntD * (cntD - 1) / 2, а также взять трёх нападающих, эта величина равна F = cntF * (cntF - 1) * (cntF - 2) / 6. Так как для каждой пары защитников из D нам подойдет любая тройка нападающих из F, то нужно к ответу прибавить D·F.\nПусть минимальный номер, который мы возьмем в команду, принадлежит одному из защитников. Тогда переберём кому из защитников принадлежит этот номер. Пусть это защитник, который имеет на футболке номер minD. Тогда мы можем взять в состав вместе с ним одного вратаря, ещё одного защитника и трёх нападающих с номерами от minD + 1 до 2·minD. Количество подходящих вратарей cntG, количество подходящих защитников cntD и количество подходящих нападающих cntF определяем с помощью проходов по соответствующим массивам. Таким образом, мы можем взять одного вратаря, эта величина G = cntG, взять ещё одного защитника из cntD защитников, эта величина равна D = cntD, а также взять трёх нападающих, эта величина равна F = cntF * (cntF - 1) * (cntF - 2) / 6. Так как для каждого вратаря из G подойдет любой защитник из D и любая тройка нападающих из F, то нужно к ответу прибавить G·D·F.\nПусть минимальный номер, который мы возьмем в команду, принадлежит одному из нападающих. Тогда переберём кому из нападающих принадлежит этот номер. Пусть это нападающий, который имеет на футболке номер minF. Тогда мы можем взять в состав вместе с ним одного вратаря, двух защитников и двух нападающих с номерами от minF + 1 до 2·minF. Количество подходящих вратарей cntG, количество подходящих защитников cntD и количество подходящих нападающих cntF определяем с помощью проходов по соответствующим массивам. Таким образом, мы можем взять одного вратаря, эта величина G = cntG, взять двух защитников из cntD защитников, эта величина равна D = cntD * (cntD - 1) / 2, а также взять двух нападающих, эта величина равна F = cntF * (cntF - 1) / 2. Так как для каждого вратаря из G подойдет любая пара защитников из D и любая пара нападающих из F, то нужно к ответу прибавить G·D·F.\nСтоит отметить, что не нужно забывать про переполнение и выполнять все вычисления в 64-битном типе данных."
  },
  {
    "id": "586/B",
    "problem": "Title: Laurenty and Shop\n\nA little boy Laurenty has been playing his favourite game Nota for quite a while and is now very hungry. The boy wants to make sausage and cheese sandwiches, but first, he needs to buy a sausage and some cheese.\n\nThe town where Laurenty lives in is not large. The houses in it are located in two rows, n houses in each row. Laurenty lives in the very last house of the second row. The only shop in town is placed in the first house of the first row.\n\nThe first and second rows are separated with the main avenue of the city. The adjacent houses of one row are separated by streets.\n\nEach crosswalk of a street or an avenue has some traffic lights. In order to cross the street, you need to press a button on the traffic light, wait for a while for the green light and cross the street. Different traffic lights can have different waiting time.\n\nThe traffic light on the crosswalk from the j-th house of the i-th row to the (j + 1)-th house of the same row has waiting time equal to aij (1 ≤ i ≤ 2, 1 ≤ j ≤ n - 1). For the traffic light on the crossing from the j-th house of one row to the j-th house of another row the waiting time equals bj (1 ≤ j ≤ n). The city doesn't have any other crossings.\n\nThe boy wants to get to the store, buy the products and go back. The main avenue of the city is wide enough, so the boy wants to cross it exactly once on the way to the store and exactly once on the way back home. The boy would get bored if he had to walk the same way again, so he wants the way home to be different from the way to the store in at least one crossing.\n\nFigure to the first sample.\n\nHelp Laurenty determine the minimum total time he needs to wait at the crossroads.\n\nInput Format:\nThe first line of the input contains integer n (2 ≤ n ≤ 50) — the number of houses in each row.\n\nEach of the next two lines contains n - 1 space-separated integer — values aij (1 ≤ aij ≤ 100).\n\nThe last line contains n space-separated integers bj (1 ≤ bj ≤ 100).\n\nOutput Format:\nPrint a single integer — the least total time Laurenty needs to wait at the crossroads, given that he crosses the avenue only once both on his way to the store and on his way back home.\n\nExamples:\nExample 1:\nInput:\n4\n1 2 3\n3 2 1\n3 2 2 3\nOutput:\n12\n\nExample 2:\nInput:\n3\n1 2\n3 3\n2 1 3\nOutput:\n11\n\nExample 3:\nInput:\n2\n1\n1\n1 1\nOutput:\n4\n\nNote:\nThe first sample is shown on the figure above.\n\nIn the second sample, Laurenty's path can look as follows:\n\n- Laurenty crosses the avenue, the waiting time is 3;\n- Laurenty uses the second crossing in the first row, the waiting time is 2;\n- Laurenty uses the first crossing in the first row, the waiting time is 1;\n- Laurenty uses the first crossing in the first row, the waiting time is 1;\n- Laurenty crosses the avenue, the waiting time is 1;\n- Laurenty uses the second crossing in the second row, the waiting time is 3.\n\nIn the last sample Laurenty visits all the crossings, so the answer is 4.",
    "examples": [
      {
        "input": "4\n1 2 3\n3 2 1\n3 2 2 3",
        "output": "12"
      },
      {
        "input": "3\n1 2\n3 3\n2 1 3",
        "output": "11"
      },
      {
        "input": "2\n1\n1\n1 1",
        "output": "4"
      }
    ],
    "solution": "N = int(input())\r\n\r\nfr, sr = [ int(i) for i in input().split() ], [ int(i) for i in input().split() ]\r\ncross = [ int(i) for i in input().split() ]\r\n\r\nspend_time = [sum(sr) + cross[0]]\r\nfor i in range(1, N):\r\n    summ = spend_time[-1] - sr[i - 1] - cross[i - 1]\r\n    summ = summ + fr[i - 1] + cross[i]\r\n    spend_time.append(summ)\r\n\r\nspend_time.sort()\r\nprint(spend_time[0] + spend_time[1])",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "841/B",
    "problem": "Title: Godsend\n\nLeha somehow found an array consisting of n integers. Looking at it, he came up with a task. Two players play the game on the array. Players move one by one. The first player can choose for his move a subsegment of non-zero length with an odd sum of numbers and remove it from the array, after that the remaining parts are glued together into one array and the game continues. The second player can choose a subsegment of non-zero length with an even sum and remove it. Loses the one who can not make a move. Who will win if both play optimally?\n\nInput Format:\nFirst line of input data contains single integer n (1 ≤ n ≤ 106) — length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109).\n\nOutput Format:\nOutput answer in single line. \"First\", if first player wins, and \"Second\" otherwise (without quotes).\n\nExamples:\nExample 1:\nInput:\n4\n1 3 2 3\nOutput:\nFirst\n\nExample 2:\nInput:\n2\n2 2\nOutput:\nSecond\n\nNote:\nIn first sample first player remove whole array in one move and win.\n\nIn second sample first player can't make a move and lose.",
    "examples": [
      {
        "input": "4\n1 3 2 3",
        "output": "First"
      },
      {
        "input": "2\n2 2",
        "output": "Second"
      }
    ],
    "solution": "import sys\r\nimport math\r\n\"\"\"files=False\r\nif files:\r\n    fn='symposium'\r\n    sys.stdin=open(fn+'.in')\r\n    sys.stdout=open(fn+'.out',mode='w')\r\n\"\"\"\r\n\r\ndef ria():\r\n    return [int(i) for i in input().split()]\r\nsz=ria()[0]\r\nar=ria()\r\nsuma=sum(ar)\r\nif suma%2==1:\r\n    print('First')\r\n    exit(0)\r\nthere=False\r\ntherek=False\r\nfor i in ar:\r\n    if i%2==1:\r\n        there=True\r\n    if i%2==0:\r\n        therek=True\r\n\r\nif (there and len(ar)>2) or (not therek):\r\n    print('First')\r\nelse:\r\n    print('Second')\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "441/B",
    "problem": "Title: Valera and Fruits\n\nValera loves his garden, where n fruit trees grow.\n\nThis year he will enjoy a great harvest! On the i-th tree bi fruit grow, they will ripen on a day number ai. Unfortunately, the fruit on the tree get withered, so they can only be collected on day ai and day ai + 1 (all fruits that are not collected in these two days, become unfit to eat).\n\nValera is not very fast, but there are some positive points. Valera is ready to work every day. In one day, Valera can collect no more than v fruits. The fruits may be either from the same tree, or from different ones. What is the maximum amount of fruit Valera can collect for all time, if he operates optimally well?\n\nInput Format:\nThe first line contains two space-separated integers n and v (1 ≤ n, v ≤ 3000) — the number of fruit trees in the garden and the number of fruits that Valera can collect in a day.\n\nNext n lines contain the description of trees in the garden. The i-th line contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ 3000) — the day the fruits ripen on the i-th tree and the number of fruits on the i-th tree.\n\nOutput Format:\nPrint a single integer — the maximum number of fruit that Valera can collect.\n\nExamples:\nExample 1:\nInput:\n2 3\n1 5\n2 3\nOutput:\n8\n\nExample 2:\nInput:\n5 10\n3 20\n2 20\n1 20\n4 20\n5 20\nOutput:\n60\n\nNote:\nIn the first sample, in order to obtain the optimal answer, you should act as follows.\n\n- On the first day collect 3 fruits from the 1-st tree.\n- On the second day collect 1 fruit from the 2-nd tree and 2 fruits from the 1-st tree.\n- On the third day collect the remaining fruits from the 2-nd tree.\n\nIn the second sample, you can only collect 60 fruits, the remaining fruit will simply wither.",
    "examples": [
      {
        "input": "2 3\n1 5\n2 3",
        "output": "8"
      },
      {
        "input": "5 10\n3 20\n2 20\n1 20\n4 20\n5 20",
        "output": "60"
      }
    ],
    "solution": "from collections import defaultdict\r\nn,v=map(int,input().split())\r\nhashmap=[0]*(30002)\r\nm=-1\r\nfor _ in range(n):\r\n    a,b=map(int,input().split())\r\n    hashmap[a]+=b\r\n    m=max(m,a)\r\nans=0\r\nfor i in range(1,m+2):\r\n    took=0\r\n    # print(hashmap[i-1],'#')\r\n    if hashmap[i-1]>0:\r\n        took=min(hashmap[i-1],v)\r\n        hashmap[i-1]-=took\r\n        ans+=took\r\n    rem=v-took\r\n    ct=min(rem,hashmap[i])\r\n    ans+=ct\r\n    hashmap[i]-=ct\r\n    # print(ans)\r\n# print(hashmap)\r\nprint(ans)\r\n\r\n",
    "explanation": "No editorial explanation available."
  },
  {
    "id": "884/A",
    "problem": "Title: Book Reading\n\nRecently Luba bought a very interesting book. She knows that it will take t seconds to read the book. Luba wants to finish reading as fast as she can.\n\nBut she has some work to do in each of n next days. The number of seconds that Luba has to spend working during i-th day is ai. If some free time remains, she can spend it on reading.\n\nHelp Luba to determine the minimum number of day when she finishes reading.\n\nIt is guaranteed that the answer doesn't exceed n.\n\nRemember that there are 86400 seconds in a day.\n\nInput Format:\nThe first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 106) — the number of days and the time required to read the book.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 86400) — the time Luba has to spend on her work during i-th day.\n\nOutput Format:\nPrint the minimum day Luba can finish reading the book.\n\nIt is guaranteed that answer doesn't exceed n.\n\nExamples:\nExample 1:\nInput:\n2 2\n86400 86398\nOutput:\n2\n\nExample 2:\nInput:\n2 86400\n0 86400\nOutput:\n1",
    "examples": [
      {
        "input": "2 2\n86400 86398",
        "output": "2"
      },
      {
        "input": "2 86400\n0 86400",
        "output": "1"
      }
    ],
    "solution": "n, t = map(int, input().split())\ndaftar_waktu_kerja = list(map(int, input().split()))\nhari = 1\n\nfor waktu_kerja in daftar_waktu_kerja:\n  waktu_kosong = 86400 - waktu_kerja\n  t -= waktu_kosong\n\n  if t <= 0:\n    print(hari)\n    break\n  \n  hari += 1\n\t \t\t  \t\t\t\t\t     \t   \t \t\t    \t",
    "explanation": "Let's read the book greedily. On i-th day Luba will read for 86400 - ai seconds. Subtract value for each day from t until t becomes less or equal to zero. That will be the day Luba finishes the book.\nOverall complexity: O(n)."
  },
  {
    "id": "916/B",
    "problem": "Title: Jamie and Binary Sequence (changed after round)\n\nJamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem:\n\nFind k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one.\n\nTo be more clear, consider all integer sequence with length k (a1, a2, ..., ak) with $$\\sum_{i=1}^{k} 2^{a_i} = n$$. Give a value $$y = \\max_{1 \\leq i \\leq k} a_i$$ to each sequence. Among all sequence(s) that have the minimum y value, output the one that is the lexicographically largest.\n\nFor definitions of powers and lexicographical order see notes.\n\nInput Format:\nThe first line consists of two integers n and k (1 ≤ n ≤ 1018, 1 ≤ k ≤ 105) — the required sum and the length of the sequence.\n\nOutput Format:\nOutput \"No\" (without quotes) in a single line if there does not exist such sequence. Otherwise, output \"Yes\" (without quotes) in the first line, and k numbers separated by space in the second line — the required sequence.\n\nIt is guaranteed that the integers in the answer sequence fit the range [ - 1018, 1018].\n\nExamples:\nExample 1:\nInput:\n23 5\nOutput:\nYes\n3 3 2 1 0\n\nExample 2:\nInput:\n13 2\nOutput:\nNo\n\nExample 3:\nInput:\n1 2\nOutput:\nYes\n-1 -1\n\nNote:\nSample 1:\n\n23 + 23 + 22 + 21 + 20 = 8 + 8 + 4 + 2 + 1 = 23\n\nAnswers like (3, 3, 2, 0, 1) or (0, 1, 2, 3, 3) are not lexicographically largest.\n\nAnswers like (4, 1, 1, 1, 0) do not have the minimum y value.\n\nSample 2:\n\nIt can be shown there does not exist a sequence with length 2.\n\nSample 3:\n\n$$2^{-1} + 2^{-1} = \\frac{1}{2} + \\frac{1}{2} = 1$$\n\nPowers of 2:\n\nIf x > 0, then 2x = 2·2·2·...·2 (x times).\n\nIf x = 0, then 2x = 1.\n\nIf x < 0, then $$2^x = \\frac{1}{2^{-x}}$$.\n\nLexicographical order:\n\nGiven two different sequences of the same length, (a1, a2, ... , ak) and (b1, b2, ... , bk), the first one is smaller than the second one for the lexicographical order, if and only if ai < bi, for the first i where ai and bi differ.",
    "examples": [
      {
        "input": "23 5",
        "output": "Yes\n3 3 2 1 0"
      },
      {
        "input": "13 2",
        "output": "No"
      },
      {
        "input": "1 2",
        "output": "Yes\n-1 -1"
      }
    ],
    "solution": "read = lambda: map(int, input().split())\r\nn, k = read()\r\nb = bin(n)[2:]\r\nbl = len(b)\r\nk -= b.count('1')\r\nif k < 0:\r\n    print('No')\r\n    exit()\r\nprint('Yes')\r\nm = -2\r\na = {}\r\nfor _ in range(bl):\r\n    if b[_] == '1':\r\n        a[bl - _ - 1] = 1\r\n        if m is -2:\r\n            m = bl - _ - 1\r\nwhile k > 0:\r\n    if k >= a[m]:\r\n        k -= a[m]\r\n        a[m - 1] = a.get(m - 1, 0) + a[m] * 2\r\n        a.pop(m)\r\n        m -= 1\r\n    else:\r\n        break\r\nm = min(a.keys())\r\nwhile k > 0:\r\n    k -= 1\r\n    if a[m] is 1:\r\n        a.pop(m)\r\n    else:\r\n        a[m] -= 1\r\n    a[m - 1] = a.get(m - 1, 0) + 2\r\n    m -= 1\r\nfor k in sorted(list(a.keys()), reverse=True):\r\n    print(('%d ' % k) * a[k], end='')",
    "explanation": "No editorial explanation available."
  }
]